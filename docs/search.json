[
  {
    "objectID": "scripts/ms_figures/supplementary_tables.html",
    "href": "scripts/ms_figures/supplementary_tables.html",
    "title": "Supplementary tables",
    "section": "",
    "text": "Table 1Table 2Table 3Table 4Table 5Table 6Table 7\n\n\n\n\n\n\n\n\n\n\n\nPangenome statistics: Homology group counts for the genus pangenome and individual species pangenome\n\n\n\n\n\n\n\n\n\nHomology group copy number variation across 454 genomes in the pangenome. This is a big file and hence refer to the raw file at location …"
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#initial-setup",
    "href": "scripts/analysis/prophage_cluster_summary.html#initial-setup",
    "title": "Summary report on prophage clustering",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(skimr))\nsuppressPackageStartupMessages(library(ComplexHeatmap))\nsuppressPackageStartupMessages(library(ggdist))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(org.Pectobacterium.spp.pan.eg.db))\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/compare_hg_sets.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\ntreeMethod &lt;- \"core_snp_ml\"     #ani_upgma, kmer_nj, core_snp_ml\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\noutDir &lt;- confs$analysis$prophages$summary$dir\n\npanOrgDb &lt;- org.Pectobacterium.spp.pan.eg.db"
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#import-data",
    "href": "scripts/analysis/prophage_cluster_summary.html#import-data",
    "title": "Summary report on prophage clustering",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId\n)\n\nspeciesOrder &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$phylogeny[[treeMethod]]$files$species_order)\n)\n\n## read tree\nrawTree &lt;- import_tree(\n  confs$analysis$phylogeny[[treeMethod]]$files$tree_rooted,\n  phylo = TRUE\n)\n\nrawTree &lt;- representative_genomes_tree(phy = rawTree, metadata = sampleInfo)"
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#import-phage-clustering-data",
    "href": "scripts/analysis/prophage_cluster_summary.html#import-phage-clustering-data",
    "title": "Summary report on prophage clustering",
    "section": "Import phage clustering data",
    "text": "Import phage clustering data\n\n\nCode\nphageAn &lt;- suppressMessages(\n  readr::read_tsv(confs$data$prophages$files$data)\n) %&gt;%\n  dplyr::select(prophage_id, completeness, checkv_quality, taxonomy)\n\n# read prophage HGs stored locally\nproHgs &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$raw_prophage_hg)\n) %&gt;%\n  dplyr::select(prophage_id = id, nHgs, hgs) %&gt;%\n  dplyr::mutate(\n    hgs = stringr::str_split(hgs, \";\")\n  )\n\nproHgL &lt;- purrr::transpose(proHgs) %&gt;%\n  purrr::set_names(nm = purrr::map(., \"prophage_id\"))"
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#prophage-data-processing-summary",
    "href": "scripts/analysis/prophage_cluster_summary.html#prophage-data-processing-summary",
    "title": "Summary report on prophage clustering",
    "section": "Prophage data processing summary",
    "text": "Prophage data processing summary\n\n\nCode\nphageClusters &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$files$clusters)\n)\n\nclusterList &lt;- dplyr::group_by(phageClusters, phage_grp) %&gt;% \n  dplyr::group_map(\n    .f = ~{\n      list(\n        phage_grp = .x$phage_grp[1],\n        members = .x$prophage_id,\n        group_size = nrow(.x)\n      )\n    },\n    .keep = TRUE\n  ) %&gt;% \n  purrr::set_names(nm = purrr::map(., \"phage_grp\"))"
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#clustering",
    "href": "scripts/analysis/prophage_cluster_summary.html#clustering",
    "title": "Summary report on prophage clustering",
    "section": "Clustering",
    "text": "Clustering\nNumber of clusters/prophage signatures: 436"
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#annotate-prophages-with-defense-systems",
    "href": "scripts/analysis/prophage_cluster_summary.html#annotate-prophages-with-defense-systems",
    "title": "Summary report on prophage clustering",
    "section": "Annotate prophages with defense systems",
    "text": "Annotate prophages with defense systems\n\n\nCode\ndefense_hgs &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$files$hg_broad_functions)\n) %&gt;% \n  dplyr::filter(\n    function_category %in% \n      c(\"toxin-antitoxin\", \"restriction modification\", \"methyltransferase\")\n  ) %&gt;%\n  dplyr::mutate(\n    function_category = dplyr::case_match(\n      function_category,\n      \"toxin-antitoxin\" ~ \"ta_system\",\n      \"restriction modification\" ~ \"rm_system\",\n      \"methyltransferase\" ~ \"rm_system\",\n      .default = function_category\n    )\n  ) %&gt;% \n  dplyr::left_join(\n    y = tidyr::unnest(proHgs, cols = hgs),\n    by = c(\"hg_id\" = \"hgs\")\n  ) %&gt;% \n  dplyr::summarise(\n    hgs = paste(sort(hg_id), collapse = \";\"),\n    .by = c(prophage_id, function_category)\n  ) %&gt;% \n  tidyr::pivot_wider(\n    names_from = function_category,\n    values_from = hgs\n  )\n\nphage_defense &lt;- dplyr::select(phageClusters, prophage_id, phage_grp, fragments, grp_size) %&gt;% \n  tidyr::separate_longer_delim(cols = fragments, delim = \";\") %&gt;% \n  dplyr::left_join(\n    y = defense_hgs, by = c(\"fragments\" = \"prophage_id\")\n  ) %&gt;% \n  dplyr::filter(!is.na(ta_system) | !is.na(rm_system)) %&gt;% \n  dplyr::distinct(prophage_id, phage_grp, ta_system, rm_system, grp_size) %&gt;% \n  dplyr::arrange(desc(grp_size))\n\nreadr::write_tsv(\n  x = phage_defense,\n  file = confs$analysis$prophages$files$phage_defense\n)"
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#prophage-overlap-between-species",
    "href": "scripts/analysis/prophage_cluster_summary.html#prophage-overlap-between-species",
    "title": "Summary report on prophage clustering",
    "section": "Prophage overlap between species",
    "text": "Prophage overlap between species\n\n\nCode\nn_genomes_phage &lt;- dplyr::distinct(phageClusters, genomeId, SpeciesName) %&gt;%\n  dplyr::count(SpeciesName, name = \"n_genomes_phages\", sort = TRUE)\n\nclustWiseCounts &lt;- dplyr::group_by(phageClusters, phage_grp, SpeciesName) %&gt;% \n  dplyr::summarise(n_genomes_clust = n(), .groups = \"drop\") %&gt;% \n  dplyr::add_count(phage_grp, name = \"n_species_phages\", sort = TRUE) %&gt;% \n  dplyr::left_join(\n    y = n_genomes_phage, by = \"SpeciesName\"\n  ) %&gt;% \n  dplyr::mutate(\n    SpeciesName = forcats::fct_relevel(SpeciesName, !!!speciesOrder$SpeciesName),\n    SpeciesName = forcats::fct_drop(SpeciesName),\n    phage_grp = forcats::as_factor(phage_grp),\n    cluster_per_species = n_genomes_clust / n_genomes_phages\n  )\n\n\nGeneralist and specialist prophages statistics:\n\n\nCode\ngeneralist &lt;- dplyr::filter(clustWiseCounts, n_species_phages &gt; 1) %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(phage_grp, SpeciesName), .fns = forcats::fct_drop\n    ),\n    category = \"generalist\"\n  )\n\nspecialist &lt;- dplyr::filter(clustWiseCounts, n_species_phages == 1) %&gt;% \n  dplyr::arrange(dplyr::desc(n_genomes_clust)) %&gt;% \n  dplyr::mutate(category = \"specialist\")\n\n\nGeneralist prophage signatures: 54\nSpecialist prophage signatures: 382\nDistribution of number of species in which prophage signatures are found:\n\nProphage target species number histogram\n\n\nCode\npt_hist &lt;- dplyr::distinct(clustWiseCounts, phage_grp, n_species_phages) %&gt;% \n  ggplot2::ggplot(\n    mapping = aes(x = n_species_phages)\n  ) +\n  ggplot2::geom_histogram(binwidth = 1, color = \"black\", fill = \"black\") +\n  ggbreak::scale_y_break(\n    breaks = c(40, 360),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  ggplot2::labs(\n    x = \"Prophage in multiple species\",\n    y = \"Count\"\n  ) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_bw(base_size = 24) +\n  theme(\n    panel.grid = element_blank(),\n    axis.ticks.y.right = element_blank(),\n    axis.text.y.right = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nSpecies wise generalist and specialist prophage signatures\n\n\nCode\n# sort(table(specialist$SpeciesName), decreasing = TRUE)\npt_species_count &lt;- dplyr::bind_rows(\n  list(\n    specialist = dplyr::count(specialist, SpeciesName),\n    generalist = dplyr::count(generalist, SpeciesName)\n  ),\n  .id = \"category\"\n) %&gt;% \n  dplyr::mutate(\n    category = forcats::fct_relevel(category, \"specialist\")\n  ) %&gt;% \n  ggplot2::ggplot(\n    mapping = aes(y = forcats::fct_rev(SpeciesName), x = n, fill = category)\n  ) +\n  ggplot2::labs(\n    x = \"Unique prophage signatures\", y = NULL\n  ) +\n  ggplot2::geom_col(position = \"stack\", color = \"black\") +\n  ggplot2::scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_fill_manual(\n    values = c(\"black\", \"white\"),\n    breaks = c(\"generalist\", \"specialist\")\n  ) +\n  theme_bw(base_size = 18) +\n  theme(\n    legend.position = \"bottom\",\n    axis.text.y = element_text(face = \"italic\"),\n    axis.ticks.y = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nNumber of generalist targeting two species (except carotovoricin)\n\n\nCode\nsp_vs_sp_grid &lt;- tidyr::expand_grid(\n  sp1 = speciesOrder$SpeciesName,\n  sp2 = speciesOrder$SpeciesName\n) %&gt;% \n  dplyr::filter(sp1 != sp2)\n\nphage_common_targets &lt;- split(\n  x = as.character(generalist$SpeciesName),\n  f = as.character(generalist$phage_grp)\n) %&gt;% \n  purrr::discard_at(at = \"phage_grp_1\") %&gt;% \n  purrr::map(\n    .f = function(x){\n      tidyr::expand_grid(sp1 = x, sp2 = x) %&gt;% \n        dplyr::filter(sp1 != sp2)\n    }\n  ) %&gt;% \n  purrr::list_rbind() %&gt;% \n  dplyr::count(sp1, sp2) %&gt;% \n  dplyr::right_join(y = sp_vs_sp_grid, by = c(\"sp1\", \"sp2\")) %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(sp1, sp2),\n      .fns = ~forcats::fct_relevel(.x, !!speciesOrder$SpeciesName)\n    )\n  ) %&gt;% \n  dplyr::filter(sp1 != sp2) %&gt;% \n  tidyr::replace_na(replace = list(n = 0))\n\n\npt_phage_overlap &lt;- ggplot2::ggplot(\n  data = phage_common_targets,\n  mapping = aes(x = sp1, y = forcats::fct_rev(sp2), size = n)\n) +\n  ggplot2::geom_point(color = \"black\", fill = \"black\", shape = 21) +\n  ggplot2::scale_size_continuous(\n    name = \"Shared prophage signatures\",\n    range = c(2, 10),\n    limits = c(1, NA),\n    breaks = c(1, 3, 5, 7, 11)\n  ) +\n  theme_bw(base_size = 18) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text = element_text(face = \"italic\"),\n    legend.position = \"bottom\",\n    axis.title = element_blank()\n  )\n\n\n\n\nWarning: Removed 320 rows containing missing values (`geom_point()`).\nRemoved 320 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nProphage signature overlap across two or more species\n\n\nCode\npt_dot &lt;- ggplot2::ggplot(data = generalist) + \n  ggplot2::geom_point(\n    mapping = aes(x = phage_grp, y = forcats::fct_rev(SpeciesName)),\n    size = 3\n  ) +\n  ggplot2::labs(\n    y = NULL, x = \"Prophage clusters\"\n  ) +\n  theme_bw(base_size = 16) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(face = \"italic\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\nGeneralist prophages target upset plot\n\n\nCode\ncm &lt;- ComplexHeatmap::make_comb_mat(\n  split(x = clustWiseCounts$phage_grp, f = clustWiseCounts$SpeciesName)\n)\n\nphage_upset &lt;- ComplexHeatmap::UpSet(\n  m = cm,\n  column_title = \"Prophage across species\",\n  row_names_gp = gpar(fontface = \"italic\"),\n  column_title_gp = gpar(fontface = \"bold\", fontsize = 16),\n  set_order = speciesOrder$SpeciesName,\n  right_annotation = upset_right_annotation(cm, add_numbers = TRUE)\n)\n\n\n\n\nquartz_off_screen \n                2"
  },
  {
    "objectID": "scripts/analysis/prophage_seq_similarity.html",
    "href": "scripts/analysis/prophage_seq_similarity.html",
    "title": "Prophage sequence similarity using ANI and MASH",
    "section": "",
    "text": "This script process ANI and MASH output for the filtered prophages and stores the distance matrices and clustering dendrograms."
  },
  {
    "objectID": "scripts/analysis/prophage_seq_similarity.html#initial-setup",
    "href": "scripts/analysis/prophage_seq_similarity.html#initial-setup",
    "title": "Prophage sequence similarity using ANI and MASH",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(ape))\nsuppressPackageStartupMessages(library(treeio))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(magrittr))\nsuppressPackageStartupMessages(library(corrplot))\n\n# summarize prophage ANI and MASH results\n# cluster prophages based on ANI distance\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/heatmap_utils.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\noutDir &lt;- confs$analysis$prophages$dir"
  },
  {
    "objectID": "scripts/analysis/prophage_seq_similarity.html#process-ani-and-mash-output-and-hierarchical-clustering-of-the-data",
    "href": "scripts/analysis/prophage_seq_similarity.html#process-ani-and-mash-output-and-hierarchical-clustering-of-the-data",
    "title": "Prophage sequence similarity using ANI and MASH",
    "section": "Process ANI and MASH output and hierarchical clustering of the data",
    "text": "Process ANI and MASH output and hierarchical clustering of the data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId \n)\n\nphages &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$filtered)\n) %&gt;% \n  dplyr::select(\n    prophage_id, fragments, nFragments, prophage_length, nHg, genomeId\n  )\n\nnodeOfInterest &lt;- dplyr::select(phages, prophage_id)\n\n\n\nprocess ANI data for phages and store ANI and ANI-distance matrices\n\n\nCode\naniDf &lt;- suppressMessages(readr::read_tsv(\n  file = confs$data$prophages$files$ani,\n  col_names = c(\"id1\", \"id2\", \"ani\", \"mapped\", \"total\")\n)) %&gt;%\n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(id1, id2),\n      .fns = ~ stringr::str_replace(string = .x, pattern = \".*/(.*).fna\", replacement = \"\\\\1\")\n    ),\n    dist = 1 - (ani / 100)\n  )\n\naniDist &lt;- dplyr::left_join(\n  x = nodeOfInterest,\n  y = tidyr::pivot_wider(\n    data = aniDf,\n    id_cols = \"id1\",\n    names_from = \"id2\",\n    values_from = \"dist\",\n    values_fill = 1\n  ),\n  by = c(\"prophage_id\" = \"id1\")\n) %&gt;%\n  dplyr::select(prophage_id, all_of(nodeOfInterest$prophage_id))\n\nreadr::write_tsv(\n  x = aniDist, file = confs$analysis$prophages$preprocessing$files$ani_dist\n)\n\naniDistMat &lt;- tibble::column_to_rownames(aniDist, var = \"prophage_id\") %&gt;%\n  as.matrix() %&gt;%\n  as.dist()\n\n## store UPGMA and NJ trees\n# plot(hclust(distMat))\naniUpgma &lt;- ape::as.phylo(hclust(d = aniDistMat, method = \"complete\")) %&gt;%\n  ape::ladderize() %&gt;%\n  ape::makeNodeLabel(method = \"number\", prefix = \"n\")\n\nape::write.tree(\n  phy = aniUpgma, tree.names = \"ani_hclust\",\n  file = confs$analysis$prophages$preprocessing$files$ani_hclust\n)\n\n# plot(ape::root(phy = treeUpgma, outgroup = sampleInfoList[[outGroup]]$Genome, edgelabel = TRUE))\n# nodelabels()\n\naniNj &lt;- ape::nj(aniDistMat) %&gt;%\n  ape::ladderize() %&gt;%\n  ape::makeNodeLabel(method = \"number\", prefix = \"n\")\n\n## set negative length edges =&gt; 0\naniNj$edge.length[aniNj$edge.length &lt; 0] &lt;- 0\n\nape::write.tree(\n  phy = aniNj, tree.names = \"ANI_NJ\",\n  file = confs$analysis$prophages$preprocessing$files$ani_nj\n)\n\n\n\n\nprocess MASH data and generate trees\n\n\nCode\nmashDf &lt;- suppressMessages(readr::read_tsv(\n  file = confs$data$prophages$files$mash,\n  col_names = c(\"id1\", \"id2\", \"dist\", \"pvalue\", \"mapped\")\n)) %&gt;%\n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(id1, id2),\n      .fns = ~ stringr::str_replace(\n        string = .x, pattern = \".*/(.*).fna\", replacement = \"\\\\1\"\n      )\n    )\n  )\n\n# mashDf %&gt;%\n#   dplyr::filter(id1 %in% !!nodeOfInterest$id, id2 %in% !!nodeOfInterest$id) %&gt;%\n#   dplyr::filter(id1 != id2) %&gt;%\n#   dplyr::arrange(dist, id1, id2) %&gt;%\n#   dplyr::left_join(\n#     y = dplyr::select(prophageDf, id1 = prophage_id, species1 = SpeciesName),\n#     by = \"id1\"\n#   ) %&gt;%\n#   dplyr::left_join(\n#     y = dplyr::select(prophageDf, id2 = prophage_id, species2 = SpeciesName),\n#     by = \"id2\"\n#   ) %&gt;%\n#   clipr::write_clip()\n\nmashDist &lt;- dplyr::left_join(\n  x = nodeOfInterest,\n  y = tidyr::pivot_wider(\n    data = mashDf,\n    id_cols = \"id1\",\n    names_from = \"id2\",\n    values_from = \"dist\",\n    values_fill = 1\n  ),\n  by = c(\"prophage_id\" = \"id1\")\n) %&gt;%\n  dplyr::select(prophage_id, all_of(nodeOfInterest$prophage_id))\n\n\nreadr::write_tsv(\n  x = mashDist, file = confs$analysis$prophages$preprocessing$files$mash_dist\n)\n\nmashDistMat &lt;- tibble::column_to_rownames(mashDist, var = \"prophage_id\") %&gt;%\n  as.matrix() %&gt;%\n  as.dist()\n\n## store UPGMA and NJ trees\n# plot(hclust(distMat))\nmashUpgma &lt;- ape::as.phylo(hclust(d = mashDistMat, method = \"complete\")) %&gt;%\n  ape::ladderize() %&gt;%\n  ape::makeNodeLabel(method = \"number\", prefix = \"n\")\n\nape::write.tree(\n  phy = mashUpgma, tree.names = \"mash_hclust\",\n  file = confs$analysis$prophages$preprocessing$files$mash_hclust\n)\n\n\nmashNj &lt;- ape::nj(mashDistMat) %&gt;%\n  ape::ladderize() %&gt;%\n  ape::makeNodeLabel(method = \"number\", prefix = \"n\")\n\n## set negative length edges =&gt; 0\nmashNj$edge.length[mashNj$edge.length &lt; 0] &lt;- 0\n\nape::write.tree(\n  phy = mashNj, tree.names = \"mash_nj\",\n  file = confs$analysis$prophages$preprocessing$files$mash_nj\n)"
  },
  {
    "objectID": "scripts/analysis/prophage_seq_similarity.html#correlate-mash-and-ani-trees",
    "href": "scripts/analysis/prophage_seq_similarity.html#correlate-mash-and-ani-trees",
    "title": "Prophage sequence similarity using ANI and MASH",
    "section": "correlate MASH and ANI trees",
    "text": "correlate MASH and ANI trees\n\n\nCode\n## cophenetic distance calculation for NJ and UPGMA tree\ncopheneticDist &lt;- tibble::tibble(\n  aniDist = as.vector(aniDistMat),\n  aniUpgma = as.vector(as.dist(cophenetic(aniUpgma))),\n  aniNj = as.vector(as.dist(cophenetic(aniNj))),\n  mashDist = as.vector(mashDistMat),\n  mashUpgma = as.vector(as.dist(cophenetic(mashUpgma))),\n  mashNj = as.vector(as.dist(cophenetic(mashNj)))\n)\n\nM &lt;- cor(copheneticDist)\n\ncorrplot::corrplot(\n  M,\n  type = \"lower\", tl.col = \"black\",\n  cl.ratio = 0.2, tl.srt = 45, col = COL2(\"BrBG\"), addCoef.col = \"white\"\n)"
  },
  {
    "objectID": "scripts/analysis/prophage_seq_similarity.html#visualize-distance-matrices-with-clustering",
    "href": "scripts/analysis/prophage_seq_similarity.html#visualize-distance-matrices-with-clustering",
    "title": "Prophage sequence similarity using ANI and MASH",
    "section": "Visualize distance matrices with clustering",
    "text": "Visualize distance matrices with clustering\n\nVisualize MASH UPGMA tree\n\n\nCode\ntreeTbl &lt;- treeio::as_tibble(mashUpgma) %&gt;%\n  dplyr::left_join(y = phages, by = c(\"label\" = \"prophage_id\")) %&gt;%\n  treeio::as.treedata()\n\npt_treeUpgma &lt;- ggtree::ggtree(\n  tr = treeTbl\n) +\n  ggtree::geom_nodelab(\n    mapping = aes(label = label),\n    node = \"internal\", size = 3, hjust = 1.3, color = \"red\"\n  ) +\n  ggtree::geom_tiplab(\n    size = 2, align = TRUE, linesize = 0.5\n  ) +\n  scale_x_continuous(expand = expansion(mult = c(0.05, 0.5))) +\n  ggnewscale::new_scale_color()\n\n# ggsave(\n#   plot = pt_treeUpgma, width = 8, height = 20, scale = 2,\n#   filename = paste(outDir, \"/prophages.MASH.UPGMA_tree.pdf\", sep = \"\")\n# )\n\n\n\n\n\n\n\n\n\n\n\nVisualize ANI distances\n\n\nCode\nht_ani &lt;- plot_species_ANI_heatmap(\n  mat = 100 * (1 - as.matrix(aniDistMat)),\n  name = \"ani\",\n  phy = aniUpgma, speciesInfo = NULL,\n  col = circlize::colorRamp2(\n    breaks = c(0, 50, 80, 90, 91, 92, 93, 93.5, 94, 95, 96, 97, 99),\n    colors = viridisLite::viridis(n = 13, option = \"B\")\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  )\n)\n\n# pdf(\n#   file = file.path(outDir, \"prophage_ANI_heatmap.pdf\"),\n#   width = 10, height = 10\n# )\n# ComplexHeatmap::draw(\n#   object = ht_ani,\n#   main_heatmap = \"ani\",\n#   row_dend_side = \"left\",\n#   heatmap_legend_side = \"bottom\"\n# )\n# dev.off()\n\n\n\n\n\n\n\n\n\nVisualize MASH distances\n\n\nCode\nht_mash &lt;- plot_species_ANI_heatmap(\n  mat = as.matrix(mashDistMat),\n  phy = mashUpgma, speciesInfo = NULL,\n  name = \"mash\",\n  col = circlize::colorRamp2(\n    breaks = c(0, 0.05, 0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),\n    # breaks = seq(0, 1, length.out = 13),\n    colors = viridisLite::viridis(n = 13, option = \"B\")\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  )\n)\n\n# pdf(\n#   file = file.path(outDir, \"prophage_MASH_heatmap.pdf\"),\n#   width = 10, height = 10\n# )\n# ComplexHeatmap::draw(\n#   object = ht_mash,\n#   main_heatmap = \"mash\",\n#   row_dend_side = \"left\",\n#   heatmap_legend_side = \"bottom\"\n# )\n# dev.off()"
  },
  {
    "objectID": "scripts/analysis/ani.clustering.html",
    "href": "scripts/analysis/ani.clustering.html",
    "title": "ANI comparison and visualization for genomes",
    "section": "",
    "text": "Average nucleotide identity (ANI) between all genomes calculated by fast-ani tool are processed and visualized in this script."
  },
  {
    "objectID": "scripts/analysis/ani.clustering.html#initial-setup",
    "href": "scripts/analysis/ani.clustering.html#initial-setup",
    "title": "ANI comparison and visualization for genomes",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(configr))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(ape))\nsuppressPackageStartupMessages(library(treeio))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(ComplexHeatmap))\n# suppressPackageStartupMessages(library(spiralize))\n# suppressPackageStartupMessages(library(dendextend))\nsuppressPackageStartupMessages(library(circlize))\n\n## generate UPGMA and NJ tree using ANI for pangenome\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/heatmap_utils.R\")\n\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\noutGroup &lt;- confs$analysis$phylogeny$outgroup\n\noutDir &lt;- confs$analysis$phylogeny$ani$dir\n\nif (!dir.exists(outDir)) dir.create(outDir)\n\npt_theme &lt;- theme_bw(base_size = 14) +\n  theme(\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    panel.grid = element_blank(),\n    plot.title = element_text(size = 15, face = \"bold\")\n  )"
  },
  {
    "objectID": "scripts/analysis/ani.clustering.html#import-data",
    "href": "scripts/analysis/ani.clustering.html#import-data",
    "title": "ANI comparison and visualization for genomes",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, Genome, genomeId\n)\n\ngenomeIds &lt;- dplyr::pull(sampleInfo, genomeId, name = sampleId)\n\nfnGenomes &lt;- dplyr::filter(\n  sampleInfo, virulence == \"virulent\", virulence_pcr == \"negative\"\n) %&gt;% \n  dplyr::pull(genomeId)\n\nmarkGenomes &lt;- list(\n  fn_pbr = list(genomes = fnGenomes, color = \"red\")\n)"
  },
  {
    "objectID": "scripts/analysis/ani.clustering.html#process-fast-ani-results",
    "href": "scripts/analysis/ani.clustering.html#process-fast-ani-results",
    "title": "ANI comparison and visualization for genomes",
    "section": "Process fast-ANI results",
    "text": "Process fast-ANI results\n\n\nCode\n## process ANI data for pangenome and store ANI and ANI-distance matrices\naniDf &lt;- suppressMessages(readr::read_tsv(\n  file = confs$analysis$ANI$files$fastani_out,\n  col_names = c(\"id1\", \"id2\", \"ani\", \"mapped\", \"total\")\n))\n\naniDf %&lt;&gt;% dplyr::mutate(\n  dplyr::across(\n    .cols = c(id1, id2),\n    .fns = ~ stringr::str_replace(string = .x, pattern = \".*/(.*).fna\", replacement = \"\\\\1\")\n  ),\n  dist = 1 - (ani / 100)\n) %&gt;%\n  dplyr::mutate(\n    g1 = genomeIds[id1],\n    g2 = genomeIds[id2]\n  ) %&gt;%\n  dplyr::filter(!is.na(g1) & !is.na(g2)) %&gt;%\n  dplyr::arrange(g1, g2)\n\naniDist &lt;- tidyr::pivot_wider(\n  data = aniDf,\n  id_cols = \"g1\",\n  names_from = \"g2\",\n  values_from = \"dist\"\n)\n\nreadr::write_tsv(\n  x = aniDist, file = confs$analysis$phylogeny$ani$files$ani_distance\n)\n\ndistMat &lt;- tibble::column_to_rownames(aniDist, var = \"g1\") %&gt;%\n  as.matrix() %&gt;%\n  as.dist()\n\naniMat &lt;- tidyr::pivot_wider(\n  data = aniDf,\n  id_cols = \"g1\",\n  names_from = \"g2\",\n  values_from = \"ani\"\n)\n\nreadr::write_tsv(\n  x = aniMat, file = confs$analysis$phylogeny$ani$files$ani_matrix\n)\n\naniMat &lt;- tibble::column_to_rownames(aniMat, var = \"g1\") %&gt;%\n  as.matrix()\n\naniMat &lt;- aniMat[, rownames(aniMat)]\n\nif (!all(rownames(as.matrix(distMat)) == rownames(aniMat))) {\n  stop(\"rownames did not match\")\n}"
  },
  {
    "objectID": "scripts/analysis/ani.clustering.html#clustering-genomes",
    "href": "scripts/analysis/ani.clustering.html#clustering-genomes",
    "title": "ANI comparison and visualization for genomes",
    "section": "Clustering genomes",
    "text": "Clustering genomes\n\nCluster genomes using UPGMA and NJ clustering\n\n\nCode\n# plot(hclust(distMat))\ntreeUpgma &lt;- ape::as.phylo(hclust(d = distMat, method = \"average\")) %&gt;%\n  ape::ladderize() %&gt;%\n  ape::makeNodeLabel(method = \"number\", prefix = \"n\")\n\nape::write.tree(\n  phy = treeUpgma, tree.names = \"ani_upgma\",\n  file = confs$analysis$phylogeny$ani_upgma$files$tree\n)\n\n# plot(ape::root(phy = treeUpgma, outgroup = sampleInfoList[[outGroup]]$Genome, edgelabel = TRUE))\n# nodelabels()\n\ntreeNj &lt;- ape::nj(distMat) %&gt;%\n  ape::ladderize() %&gt;%\n  ape::makeNodeLabel(method = \"number\", prefix = \"n\")\n\n## set negative length edges =&gt; 0\ntreeNj$edge.length[treeNj$edge.length &lt; 0] &lt;- 0\n\nrootedNj &lt;- ape::root(treeNj, outgroup = sampleInfoList[[outGroup]]$genomeId)\n\nape::write.tree(\n  phy = treeNj, tree.names = \"ANI_NJ\",\n  file = confs$analysis$phylogeny$ani_nj$files$tree\n)\n\n\n\n\nSave species order of the tree for later visualization\n\n\nCode\n## add data to tree\ntreeTbl &lt;- as_tibble(treeUpgma) %&gt;%\n  dplyr::full_join(y = sampleInfo, by = c(\"label\" = \"genomeId\")) %&gt;%\n  treeio::as.treedata() %&gt;%\n  treeio::root(outgroup = sampleInfoList[[outGroup]]$genomeId, edgelabel = TRUE)\n\n\nℹ invalid tbl_tree object. Missing column: parent.\nℹ invalid tbl_tree object. Missing column: parent.\nℹ invalid tbl_tree object. Missing column: parent.\nℹ invalid tbl_tree object. Missing column: parent.\n\n\n! # Invaild edge matrix for &lt;phylo&gt;. A &lt;tbl_df&gt; is returned.\n\n\nCode\npt_treeUpgma &lt;- ggtree::ggtree(\n  tr = treeTbl\n)\n\n## get species order to arrange the species key columns\nleafOrder &lt;- dplyr::arrange(.data = pt_treeUpgma$data, y) %&gt;%\n  dplyr::filter(isTip)\n\n\n! # Invaild edge matrix for &lt;phylo&gt;. A &lt;tbl_df&gt; is returned.\n! # Invaild edge matrix for &lt;phylo&gt;. A &lt;tbl_df&gt; is returned.\n\n\nCode\nspeciesOrder &lt;- dplyr::select(leafOrder, SpeciesName, y, type_material) %&gt;%\n  dplyr::group_by(SpeciesName) %&gt;%\n  dplyr::arrange(type_material, y, .by_group = TRUE) %&gt;%\n  dplyr::slice(1L) %&gt;%\n  dplyr::ungroup() %&gt;%\n  dplyr::arrange(desc(y)) %&gt;%\n  # dplyr::mutate(SpeciesName = forcats::as_factor(SpeciesName)) %&gt;%\n  dplyr::pull(SpeciesName)\n\n## add species order factor levels to SpeciesName column\nsampleInfo %&lt;&gt;% dplyr::mutate(\n  SpeciesName = forcats::fct_relevel(SpeciesName, !!!speciesOrder)\n)\n\nreadr::write_tsv(\n  x = tibble::tibble(SpeciesName = speciesOrder),\n  file = confs$analysis$phylogeny$ani_upgma$files$species_order\n)"
  },
  {
    "objectID": "scripts/analysis/ani.clustering.html#generate-ani-heatmaps",
    "href": "scripts/analysis/ani.clustering.html#generate-ani-heatmaps",
    "title": "ANI comparison and visualization for genomes",
    "section": "Generate ANI heatmaps",
    "text": "Generate ANI heatmaps\n\nANI heatmap for all genomes\n\n\nCode\ncolorAni &lt;- list(\n  breaks = c(85, 90, 93, 94, 94.5, 95, 95.5, 96, 96.5, 97, 99),\n  colors = RColorBrewer::brewer.pal(n = 11, name = \"RdBu\")\n  # breaks = c(85, 90, 92, 93, 93.5, 94, 94.5, 95, 95.5, 96, 96.5, 97, 99),\n  # colors = viridisLite::viridis(n = 13, option = \"B\")\n)\n\nhtList &lt;- plot_species_ANI_heatmap(\n  mat = aniMat, phy = treeUpgma, speciesInfo = sampleInfo,\n  col = circlize::colorRamp2(\n    breaks = colorAni$breaks, colors = colorAni$colors\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  name = \"ani\",\n  markGenomes = markGenomes\n)\n\nhtList@ht_list$species_key@matrix_param$width &lt;- unit(10, \"cm\")\nhtList@ht_list$ani@matrix_param$width &lt;- unit(18, \"cm\")\n\npng(filename = file.path(outDir, \"ANI_heatmap.png\"), width = 5000, height = 3000, res = 350)\nComplexHeatmap::draw(\n  object = htList,\n  main_heatmap = \"ani\",\n  row_dend_side = \"left\",\n  merge_legend = TRUE,\n  heatmap_legend_side = \"bottom\"\n)\ndev.off()\n\n\nquartz_off_screen \n                2 \n\n\n\n\nCode\nht_species &lt;- htList@ht_list$species_key\nht_species@row_dend_param$width &lt;- unit(15, \"cm\")\nht_species@matrix_param$width &lt;- unit(15, \"cm\")\n\nComplexHeatmap::draw(\n  object = ht_species,\n  row_dend_side = \"left\",\n  merge_legend = TRUE,\n  heatmap_legend_side = \"bottom\"\n)\n\n\n\n\n\nSpecies tree\n\n\n\n\n\n\n\n\n\nANI heatmap for all species\n\n\n\n\n\n\nANI heatmap for P. brasiliense species clade\n\n\nCode\nnodeOfInterest &lt;- dplyr::filter(leafOrder, SpeciesName == \"P. brasiliense\") %&gt;%\n  dplyr::pull(label)\n\nclade &lt;- ape::getMRCA(phy = treeUpgma, tip = nodeOfInterest)\nsubTree &lt;- ape::extract.clade(phy = treeUpgma, node = clade)\n# nodelab(treeUpgma, clade)\n\n# subTree &lt;- treeio::tree_subset(tree = treeTbl, node = clade, levels_back = 0)\n# ape::as.hclust.phylo(treeio::as.phylo(subTree))\n\nsubAni &lt;- aniMat[subTree$tip.label, subTree$tip.label]\nlowerTr &lt;- subAni[lower.tri(subAni, diag = FALSE)]\n\nhtList2 &lt;- plot_species_ANI_heatmap(\n  mat = subAni, phy = subTree,\n  col = circlize::colorRamp2(\n    breaks = colorAni$breaks, colors = colorAni$colors\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  name = \"ani\"\n)\n\npng(\n  filename = file.path(outDir, \"ANI_PBrasiliense.heatmap.png\"),\n  width = 3000, height = 2500, res = 350\n)\nComplexHeatmap::draw(\n  object = htList2,\n  main_heatmap = \"ani\",\n  row_dend_side = \"left\",\n  merge_legend = TRUE,\n  heatmap_legend_side = \"bottom\"\n)\ndev.off()\n\n\nquartz_off_screen \n                2 \n\n\n\n\n\n\n\nP. brasiliense clade ANI\n\n\n\n\n\nDensity distribution of P. brasiliense genome ANI scores\nIn P. brasiliense genome ANI comparison, 1.78% pairs have ANI &lt; 95% and 9.82% pairs with ANI &lt; 96%.\n\n\nCode\n(\n  ptHist_pbrAni &lt;- ggplot(data = tibble::tibble(ani = lowerTr)) +\n  geom_histogram(\n    mapping = aes(x = ani), bins = 60,\n    color = \"black\", fill = \"black\"\n    ) +\n  geom_vline(xintercept = 96, color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  scale_x_continuous(expand = expansion(add = 0)) +\n  scale_y_continuous(expand = expansion(add = c(0, NULL))) +\n  labs(x = \"ANI\", y = \"Count\") +\n  theme_bw(base_size = 24) + \n  theme(panel.grid = element_blank())\n)\n\n\n\n\n\nP. brasiliense ANI score distribution\n\n\n\n\n\n\n\nANI heatmap for inhouse strains\n\n\nCode\ninhouseNodes &lt;- dplyr::filter(sampleInfo, source %in% c(\"NAK\", \"NVWA\"))\n\nsubTree2 &lt;- ape::keep.tip(phy = treeUpgma, tip = inhouseNodes$genomeId)\nsubAni2 &lt;- aniMat[subTree2$tip.label, subTree2$tip.label] %&gt;%\n  tibble::as_tibble(rownames = \"g1\") %&gt;%\n  tidyr::pivot_longer(\n    cols = -g1,\n    names_to = \"g2\", values_to = \"ANI\"\n  )\n\ninhouseTreeTbl &lt;- as_tibble(subTree2) %&gt;%\n  dplyr::full_join(y = inhouseNodes, by = c(\"label\" = \"genomeId\")) %&gt;%\n  treeio::as.treedata()\n\npt_inhouseTree &lt;- ggtree::ggtree(\n  tr = inhouseTreeTbl\n) +\n  ggtree::geom_tippoint(\n    mapping = aes(subset = c(SpeciesName == \"P. brasiliense\")),\n    color = \"blue\"\n  ) +\n  # ggtree::geom_tiplab(\n  #   mapping = aes(label = label),\n  #   size = 3, align = TRUE, linesize = 0.5\n  # ) +\n  scale_x_continuous(expand = expansion(mult = c(0.05, 0.1))) +\n  ggnewscale::new_scale_color() +\n  ## virulence phenotype\n  ggtreeExtra::geom_fruit(\n    mapping = aes(y = id, x = \"virulence\", color = virulence),\n    geom = \"geom_point\", shape = 17, size = 2,\n    pwidth = 0.01, offset = 0.1\n  ) +\n  scale_color_manual(\n    values = c(\"virulent\" = \"red\", \"avirulent\" = \"green\"),\n    na.value = alpha(\"white\", 0)\n  ) +\n  ggnewscale::new_scale_color() +\n  ## virulence PCR result\n  ggtreeExtra::geom_fruit(\n    mapping = aes(y = id, x = \"vir_pcr\", color = virulence_pcr),\n    geom = \"geom_point\",\n    pwidth = 0.01, offset = 0.1\n  ) +\n  scale_color_manual(\n    values = c(\"positive\" = \"red\", \"negative\" = \"green\"),\n    na.value = alpha(\"white\", 0)\n  )\n\nspeciesKyeDf &lt;- get_species_key_data(\n  genomes = inhouseNodes$genomeId, speciesInfo = sampleInfo, type = \"long\"\n)\n\npt_spKey &lt;- ggplot2::ggplot(\n  data = speciesKyeDf,\n  mapping = aes(x = SpeciesName, y = genomeId), color = \"black\", fill = \"black\"\n) +\n  geom_tile() +\n  theme_bw() +\n  theme(\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_text(size = 14, angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5, vjust = 0)\n  )\n\npt_ani &lt;- dplyr::mutate(\n  subAni2,\n  g1 = forcats::fct_relevel(g1, ggtree::get_taxa_name(pt_inhouseTree)),\n  g2 = forcats::fct_relevel(g2, ggtree::get_taxa_name(pt_inhouseTree))\n) %&gt;%\n  ggplot2::ggplot(mapping = aes(x = g1, y = g2)) +\n  geom_tile(mapping = aes(fill = ANI)) +\n  # scale_fill_viridis_c(name = \"% identity\", option = \"B\") +\n  scale_fill_stepsn(\n    breaks = colorAni$breaks,\n    values = scales::rescale(x = colorAni$breaks),\n    colours = colorAni$colors,\n    limits = c(85, 100) \n  ) +\n  theme_bw() +\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    plot.title = element_text(hjust = 0.5, vjust = 0),\n    panel.grid = element_blank()\n  )\n\n## arrange plots one by one\npt_all &lt;- pt_spKey %&gt;%\n  aplot::insert_left(pt_inhouseTree, width = 0.5) %&gt;%\n  aplot::insert_right(pt_ani, width = 2)\n\n\nggsave(\n  plot = pt_all, width = 14, height = 8,\n  filename = file.path(outDir, \"ANI_inhouse.heatmap.pdf\")\n)\n\npt_aniTree &lt;-  pt_spKey %&gt;%\n  aplot::insert_left(pt_inhouseTree, width = 1)\n\n\n\n\n\n\n\nCurrent collection ANI"
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html",
    "href": "scripts/notebooks/pangenome_analysis.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html#setup",
    "href": "scripts/notebooks/pangenome_analysis.html#setup",
    "title": "",
    "section": "Setup",
    "text": "Setup\n#!/usr/bin/env bash\n\nshopt -s expand_aliases\nsource ~/.bash_aliases\n\n# set -e\n# set -u\nset -o pipefail\n\n# source scripts/utils/setup_analysis.sh 'pectobacterium.v2'\nsource scripts/utils/setup_analysis.sh $@\n\nif [ -z ${pan_db+x} ];\nthen\n    echo \"\\$pan_db is unset\"\n    error_exit 1\nfi\n\nsource $TOOLS_PATH/miniconda3/etc/profile.d/conda.sh\nconda activate pantools_master\nexport PANTOOLS=\"$PANTOOLS_4_1\"\n\n######################################################################"
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html#analysis",
    "href": "scripts/notebooks/pangenome_analysis.html#analysis",
    "title": "",
    "section": "Analysis",
    "text": "Analysis\n\nGenerate various trees with default layout\n## UPGMA tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./analysis/pangenome_v2/phylogeny/ani/ANI_UPGMA.pangenome.newick \\\n--name \"ani_upgma\" --config project_config.yaml --save_leaf_order\n\n## Neighbor joining tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./analysis/pangenome_v2/phylogeny/ani/ANI_NJ.pangenome.newick \\\n--name \"ani_nj\" --config project_config.yaml --save_leaf_order\n\n## gene distance NJ tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/gene_classification.100.0/gene_distance.tree \\\n--name \"gene_nj\" --config project_config.yaml \n\n## kmer distance UPGMA tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/kmer_classification.100.0/kmer.upgma.newick \\\n--name \"kmer_upgma\" --config project_config.yaml --save_leaf_order\n\n## kmer distance NJ tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/kmer_classification.100.0/kmer.nj.newick \\\n--name \"kmer_nj\" --config project_config.yaml --save_leaf_order\n\n## core-SNP ML tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/core_snp_tree/informative.fasta.treefile \\\n--name \"core_snp_ml\" --config project_config.yaml --save_leaf_order --bootstrap\n\n## process homology groups\nRscript scripts/analysis/homology_group_process.R \n\n\nGO enrichment for homology groups of interest\n## go_enrichment for assay_FN enriched homology groups\nprocess_start \"go_enrichment for assay_FN enriched homology groups\"\n$PANTOOLS go_enrichment -H analysis/04_pangenome_pecto_v2/pheno_association/specific_hgs.assay_FN.txt \\\n--include=429,439,369,149,29,97,155,366,373,178,181,159,345,371,180,316,414,360,166,243,147,152,173,170,416,433,157,417,191,390,136,419,142,410,146,317,145,194,426,240,340,367,357,364,359,372,358,342,370,196,24,353,52,134,179,187,188,195,192,401,402,413,154,214,153,144,165,176,140,168,156,13,148,163,164,162,418,172,297,302,63,190,415,169,171,167,174,189,193,411,397,398,405,409,412,403,408,399,404,407,175,400,406,158,161,138,60,337,242,368,74,427,308,438,299,391,182,185,236,177,42,43,263,307,379,356,380,141,341,64,352,111,115,114,108,109,99,137 ${pan_db} \nerror_exit $?\n######################################################################\n\n\nUse subset of genomes to determine pangenome structure\n## Pangenome structure for species with more than 20 genomes\nfor sp in `awk -F \"\\t\" '{ if (NR != 1 && $2 &gt;= 20) {print $1} }' $PANGENOME_DIR/analysis_configs/species_wise_genomes.tab`\ndo\n    genomes=`grep \"^${sp}\\b\" $PANGENOME_DIR/analysis_configs/species_wise_genomes.tab | cut -f3`\n    \n    process_start \"pangenome_structure for genome of species ${sp}: $genomes\"\n    $PANTOOLS pangenome_structure -t 20 --include ${genomes} ${pan_db}\n    error_exit $?\n\n    Rscript ${pan_db}/pangenome_size/gene/pangenome_growth.R\n    Rscript ${pan_db}/pangenome_size/gene/gains_losses_median_or_average.R\n    Rscript ${pan_db}/pangenome_size/gene/gains_losses_median_and_average.R\n    # Rscript ${pan_db}/pangenome_size/gene/heaps_law.R\n\n    ## move results to a folder\n    psDir=${pan_db}/pangenome_size/gene.${sp}\n    [ -d ${psDir} ] && rm -r ${psDir}\n    mv ${pan_db}/pangenome_size/gene ${psDir}\ndone\n\n## update the path in heaps_law.R script\ncd ${pan_db}/pangenome_size\nfor i in gene.*\ndo\n    sed -i.bak \"s/pangenome_size\\/gene/pangenome_size\\/gene.$i/g\" $i/heaps_law.R\ndone\ncd $PROJECT_DIR\n######################################################################"
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html#visualize-homology-groups-of-interest",
    "href": "scripts/notebooks/pangenome_analysis.html#visualize-homology-groups-of-interest",
    "title": "",
    "section": "Visualize homology groups of interest",
    "text": "Visualize homology groups of interest\n\nviral DNA integration related biological processes\nanalysisName &lt;- \"virulence_GO\"\n\ngoIds &lt;- c(\n  \"GO:0046718\", \"GO:0044826\", \"GO:0019069\", \"GO:0044659\", \"GO:0075713\",\n  \"GO:0044660\", \"GO:0019076\", \"GO:0019058\"\n)\n\n\nsecretion systems in Pectobacterium spp.\nanalysisName &lt;- \"secretion_sys\"\n\ngoIds &lt;- c(\n  \"GO:0030253\", \"GO:0015628\", \"GO:0030254\", \"GO:0030255\", \"GO:0046819\",\n  \"GO:0033103\", \"GO:0044315\"\n)\n\n\nHomology groups for lipopolysaccharide biosynthetic process\nanalysisName &lt;- \"lps_syn\"\n\ngoIds &lt;- c(\"GO:0009103\", \"GO:0009244\")"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html",
    "href": "scripts/notebooks/preprocessing.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#data-download-from-ncbi-using-eutils",
    "href": "scripts/notebooks/preprocessing.html#data-download-from-ncbi-using-eutils",
    "title": "",
    "section": "Data download from NCBI using EUtils",
    "text": "Data download from NCBI using EUtils\n## number of records available in NCBI\nesearch -db assembly -query \"pectobacterium [ORGN]\" -email \"lakhansing.pardeshi@wur.nl\"\n\n## download the Assembly DocumentSummary file\nesearch -db assembly -query \"pectobacterium [ORGN]\" -email \"lakhansing.pardeshi@wur.nl\" | \\\nefetch -format docsum &gt; data/reference_data/assembly_docsum.xml\n\n## download associated BioSample DocumentSummary file\nesearch -db assembly -query \"pectobacterium [ORGN]\" -email \"lakhansing.pardeshi@wur.nl\" | \\\nelink -target biosample  | \\\nefetch -format docsum &gt; data/reference_data/biosample_docsum.xml\n\n\n## get all FPT paths for NCBI assemblies\nesearch -db assembly -query \"pectobacterium [ORGN]\" | \\\nefetch -format docsum -email \"lakhansing.pardeshi@wur.nl\" | \\\nxtract -pattern DocumentSummary \\\n-tab \",\" -element AssemblyAccession AssemblyName FtpPath_RefSeq FtpPath_GenBank | \\\nawk '\n    BEGIN { FS=\",\"};\n    {\n    if($4==\"\") file=$3; else file=$3;\n    gsub(/ +/, \"_\", $0);\n    printf \"%s/%s_%s_genomic.fna.gz\\n\", file, $1, $2 &gt; \"data/reference_data/ncbi_assembly_ftp.txt\";\n    printf \"%s_%s\\n\", $1, $2 &gt; \"data/reference_data/ncbi_assembly_ids.txt\";\n    }\n'\n\n## NCBI prokaryotes ANI file\nwget --timestamping https://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/ANI_report_prokaryotes.txt -P data/other/\n\n\ncat data/reference_data/local_assembly_ids.txt data/reference_data/ncbi_assembly_ids.txt \\\n&gt; data/reference_data/pre_qc_assembly_ids.txt\n\nmkdir data/reference_data/batches\nsplit -a 2 -d -n r/8 data/reference_data/pre_qc_assembly_ids.txt data/reference_data/batches/temp_ids_batch."
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#check-if-there-are-any-new-assemblies-released-on-ncbi",
    "href": "scripts/notebooks/preprocessing.html#check-if-there-are-any-new-assemblies-released-on-ncbi",
    "title": "",
    "section": "Check if there are any new assemblies released on NCBI",
    "text": "Check if there are any new assemblies released on NCBI\n## check and extract new assembly IDs\nfor sampleId in `cat data/reference_data/pre_qc_assembly_ids.txt`\ndo\n    if ! find data/genomes/ -name ${sampleId}* | grep -q \".\"\n    then\n        echo $sampleId\n    fi\ndone &gt; data/reference_data/temp_assembly_ids.txt\n\n\n## download and unzip the FASTA files\nfor sampleId in `cat data/reference_data/temp_assembly_ids.txt`\ndo\n    grep \"/$sampleId/\" data/reference_data/ncbi_assembly_ftp.txt\ndone | \\\nxargs -I {} wget --timestamping {} -P data/genomes/ncbi/\n\ngzip -d data/genomes/ncbi/*.gz"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#prokka-annotation-for-bacterial-genomes",
    "href": "scripts/notebooks/preprocessing.html#prokka-annotation-for-bacterial-genomes",
    "title": "",
    "section": "Prokka annotation for bacterial genomes",
    "text": "Prokka annotation for bacterial genomes\nnohup \\\nls data/genomes/?(NCBI|WUR|NVWA|NAK)/*.?(fa|fna|fasta) | \\\nparallel --gnu --keep-order --jobs 1 --halt now,fail=1 \\\n--results logs/prokka/{/.} --joblog logs/prokka/parallel.log \\\nscripts/preprocessing/prokka_annotation.sh {} \\\n&gt;logs/prokka/nohup_batch00.out 2&gt;&1 &\nProcessing in parallel is failing without any specific error. Hence the data will be processed in serial mode. Further debugging is required to understand the parallel processing failure. For now, running GNU parallel with --jobs 1 setting in serial mode.\n\nRemove the FASTA sequence at the end of prokka gff files\nfor i in `cat data/reference_data/pre_qc_assembly_ids.txt`\ndo\nsed -n '1,/##FASTA/ {/##FASTA/!p}' data/prokka_annotation/${i}/${i}.gff &gt; \\\ndata/prokka_annotation/${i}/${i}.gff3\ndone\n\n\nFASTA file indexing\nprintf '' &gt; analysis/QC/assembly_chr_size.txt\nprintf '' &gt; data/reference_data/pre_qc_genomes_fa.list\nconda activate omics_py37\n\nfor i in `cat data/reference_data/pre_qc_assembly_ids.txt`\ndo\n    samtools faidx data/prokka_annotation/${i}/${i}.fna\n    sort -r -n -k 2,2 data/prokka_annotation/${i}/${i}.fna.fai | \\\n    awk  -v i=${i} '{print i, \"\\t\", $1, \"\\t\", $2}' &gt;&gt; analysis/QC/assembly_chr_size.txt\n    ls data/prokka_annotation/${i}/${i}.fna &gt;&gt; data/reference_data/pre_qc_genomes_fa.list\n\n    faToTwoBit data/prokka_annotation/${i}/${i}.fna data/prokka_annotation/${i}/${i}.2bit\n\ndone"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#busco-protein-and-genome-assembly-evaluation",
    "href": "scripts/notebooks/preprocessing.html#busco-protein-and-genome-assembly-evaluation",
    "title": "",
    "section": "BUSCO protein and genome assembly evaluation",
    "text": "BUSCO protein and genome assembly evaluation\n## !GNU parallel on single server\nnohup \\\ncat data/reference_data/temp_assembly_ids.txt | \\\nparallel --jobs 1 --workdir $PWD --halt now,fail=1 --keep-order \\\n--results logs/busco/{} --joblog logs/busco/parallel.log \\\n$PWD/scripts/preprocessing/qc_busco.sh {} \\\n&gt;logs/busco/nohup03.out 2&gt;&1 &\nThis is failing with parallel, most likely because of the number of open files exceeding the ulimit. Need to debug further. For now, running GNU parallel with --jobs 1 setting is serial mode."
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#quast-assembly-evaluation",
    "href": "scripts/notebooks/preprocessing.html#quast-assembly-evaluation",
    "title": "",
    "section": "QUAST assembly evaluation",
    "text": "QUAST assembly evaluation\nnohup \\\ncat data/reference_data/temp_assembly_ids.txt | \\\nparallel --jobs 6 --workdir $PWD --halt now,fail=1 \\\n--keep-order --results logs/quast/{} \\\n--joblog logs/quast/parallel.log \\\n./scripts/preprocessing/qc_quast.sh {} \\\n&gt;&gt;logs/quast/nohup.out 2&gt;&1 &"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#interproscan-functional-annotation",
    "href": "scripts/notebooks/preprocessing.html#interproscan-functional-annotation",
    "title": "",
    "section": "InterProScan functional annotation",
    "text": "InterProScan functional annotation\n## GNU parallel on single server\nnohup \\\ncat data/reference_data/temp_assembly_ids.txt | \\\nparallel --jobs 6 --workdir $PWD --halt now,fail=1 \\\n--keep-order --results logs/interproscan/{} \\\n--joblog logs/interproscan/parallel_batch06.log \\\n./scripts/preprocessing/interproscan_annotation.sh {} \\\n&gt;&gt;logs/interproscan/nohup_batch07.out 2&gt;&1 &\n\n\n## GNU parallel: submit jobs to another server\nhead -n 10 data/reference_data/sample_subsets/genebank_ass.txt | \\\nenv_parallel --jobs 4 --workdir $PWD --halt now,fail=1 \\\n--keep-order --results logs/interproscan/{} \\\n--joblog logs/interproscan/parallel.log \\\n--sshlogin 4/waterman.bioinformatics.nl --cleanup \\\n--env error_exit --env process_start --env TOOLS_PATH --env LUSTRE_HOME \\\n./scripts/preprocessing/interproscan_annotation.sh {}"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#eggnog-annotation",
    "href": "scripts/notebooks/preprocessing.html#eggnog-annotation",
    "title": "",
    "section": "eggNOG annotation",
    "text": "eggNOG annotation\nconda activate eggnog\n\n## download eggNOG data\ndownload_eggnog_data.py -M -F -H -d 1 --dbname root -f -y\ndownload_eggnog_data.py -D -H -d 2759 --dbname eukaryota -q -y\ndownload_eggnog_data.py -D -H -d 2 --dbname bacteria -q -y\ndownload_eggnog_data.py -D -H -d 10239 --dbname viruses -q -y\ndownload_eggnog_data.py -D -H -d 4751 --dbname fungi -q -y\ndownload_eggnog_data.py -D -H -d 2157 --dbname archea -q -y\n\nmmseqs createindex \"$EGGNOG_DATA_DIR\"/mmseqs/mmseqs.db /local_scratch/parde001/tmp\n\n## create mmseq database for bacteria, archea and viruses\ncreate_dbs.py -m mmseqs --dbname bact_arch_vir --taxids 2,2157,10239 -y\n\n## annotate for eggNOG clusters\nfor i in `cat data/reference_data/assembly_ids.txt`\ndo\n    file_aa=\"data/prokka_annotation/${i}/${i}.faa\"\n    \n    emapper.py --cpu 20 -m mmseqs --dbmem --go_evidence all  \\\n    -i ${file_aa} -o ${i} --output_dir data/eggnog \\\n    --scratch_dir /local_scratch/parde001/ --temp_dir /local_scratch/parde001/tmp\n\n    error_exit $?\ndone"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#multiqc",
    "href": "scripts/notebooks/preprocessing.html#multiqc",
    "title": "",
    "section": "MultiQC",
    "text": "MultiQC\n## QUAST MultiQC\nnohup \\\nmultiqc -f --filename quast_multiqc --interactive --title \"QUAST report\" \\\n--outdir analysis/multiqc/ --module quast data/quast/ \\\n&gt;&gt;nohup.out 2&gt;&1 &\n\n## BUSCO protein MultiQC\nnohup \\\nmultiqc -f --filename busco_prot_multiqc --interactive --title \"BUSCO report\" \\\n--outdir analysis/multiqc/ --module busco data/busco.prot/ \\\n&gt;&gt;nohup.out 2&gt;&1 &\n\n## BUSCO genome MultiQC\nnohup \\\nmultiqc -f --filename busco_geno_multiqc --interactive --title \"BUSCO report\" \\\n--outdir analysis/multiqc/ --module busco data/busco.geno/ \\\n&gt;&gt;nohup.out 2&gt;&1 &"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#fastani",
    "href": "scripts/notebooks/preprocessing.html#fastani",
    "title": "",
    "section": "fastANI",
    "text": "fastANI\nprocess_start \"ANI on all genomes\"\nnohup bash scripts/preprocessing/ANI_processing.sh \\\ndata/reference_data/pre_qc_genomes_fa.list \\\nanalysis/02_fastANI/ANI_results &gt;logs/fastANI.log 2&gt;&1 &\nerror_exit $?"
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#defense-finder",
    "href": "scripts/notebooks/preprocessing.html#defense-finder",
    "title": "",
    "section": "Defense-finder",
    "text": "Defense-finder\nconda activate defensefinder\n\nfor i in `cat data/reference_data/assembly_ids.txt`\ndo\n    file_aa=\"data/prokka_annotation/${i}/${i}.faa\"\n    out_dir=\"data/defense_finder/${i}\"\n    mkdir -p ${out_dir}\n\n    process_start \"defense-finder: ${i}\"\n\n    defense-finder run --workers 20 -o ${out_dir} \\\n    --models-dir $TOOLS_PATH/defense-finder-models ${file_aa}\n\n    error_exit $?\ndone"
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html",
    "href": "scripts/notebooks/pangenome_construction.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#setup",
    "href": "scripts/notebooks/pangenome_construction.html#setup",
    "title": "",
    "section": "Setup",
    "text": "Setup\n#!/usr/bin/env bash\n\nshopt -s expand_aliases\nsource ~/.bash_aliases\n\n# set -e\n# set -u\nset -o pipefail\n\n# source scripts/utils/setup_analysis.sh 'pectobacterium.v2'\nsource scripts/utils/setup_analysis.sh $@\n\nif [ -z ${pan_db+x} ];\nthen\n    echo \"\\$pan_db is unset\"\n    error_exit 1\nfi\n\nsource $TOOLS_PATH/miniconda3/etc/profile.d/conda.sh\nconda activate pantools_master\nexport PANTOOLS=\"$PANTOOLS_4_1\"\n#export PANTOOLS=\"$PANTOOLS_DEV\"\n######################################################################"
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#construct-pangenome",
    "href": "scripts/notebooks/pangenome_construction.html#construct-pangenome",
    "title": "",
    "section": "Construct pangenome",
    "text": "Construct pangenome\nTMPDIR=\"$LOCAL_DIR_PATH/tmp\"\n[ ! -d ${TMPDIR} ] && mkdir -p ${TMPDIR}\n[ -d ${TMPDIR}/pantools ] && rm -rd ${TMPDIR}/pantools\n[ ! -d ${TMPDIR}/pantools ] && mkdir -p ${TMPDIR}/pantools\n\nprocess_start build_pangenome_parallel\n$PANTOOLS build_pangenome --threads 40 --scratch-directory ${TMPDIR}/pantools \\\n--num-db-writer-threads 10 --cache-size 25000000 \\\n${pan_db} $PANGENOME_DIR/genomes_fa.list\nerror_exit $?\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.raw\n\n\n## add annotations\nexport PANTOOLS=\"$PANTOOLS_DEV\"\nprocess_start add_annotations\n$PANTOOLS add_annotations --connect ${pan_db} $PANGENOME_DIR/genomes_gff3.list\nerror_exit $?\nexport PANTOOLS=\"$PANTOOLS_4_1\"\n\n## add phenotypes\nprocess_start add_phenotypes\n$PANTOOLS remove_phenotype ${pan_db}\n$PANTOOLS add_phenotypes ${pan_db} $PANGENOME_DIR/genomes_metadata.csv\nerror_exit $?"
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#add-interproscan-and-cog-annotations",
    "href": "scripts/notebooks/pangenome_construction.html#add-interproscan-and-cog-annotations",
    "title": "",
    "section": "Add InterProScan and COG annotations",
    "text": "Add InterProScan and COG annotations\n## InterProScan\nprocess_start add_InterProScan_annotations\n$PANTOOLS add_functions ${pan_db} $PANGENOME_DIR/functional_annotations.txt\nerror_exit $?\n\n## COG\nprocess_start add_COG_annotations \n$PANTOOLS add_functions ${pan_db} $PANGENOME_DIR/deggnog_annotations.txt\nerror_exit $?\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.fn\n######################################################################"
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#grouping",
    "href": "scripts/notebooks/pangenome_construction.html#grouping",
    "title": "",
    "section": "Grouping",
    "text": "Grouping\ncp -rp $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.backup_fn ${pan_db}\n## BUSCO\nprocess_start busco_protein\n$PANTOOLS busco_protein -t 20 --busco10 enterobacterales_odb10 ${pan_db}\nerror_exit $?\n\noptimal_grouping using subset of genomes or type strains\noptimal_grouping at the Pangenome level is time consuming. An alternative approch using subset of genomes or only type strains was tried and the results were compared with the pangenome scale optimal_grouping.\n## generate random subsets to run `optimal_grouping`\nRscript scripts/b_construction/grouping_subsets_build.R\nThis script will generate a two column TSV file where first column is a set identifier and second column include comma separated genome identifers.\ntypeStrain  374,96,385,386,379,388,116,375,377,347,250,335,338,265,256,32,269,387,266\nrand_001    451,375,343,346,220,403,251,228,431,248,116,440,383,322,306,351,430,15,14,314\nrand_002    451,375,374,224,32,360,252,226,442,248,116,266,386,385,306,387,205,15,265,92\nrand_003    451,375,374,334,279,391,103,445,442,248,116,266,386,27,305,351,393,15,265,21\nrand_004    451,375,374,88,96,193,251,235,431,248,116,440,386,124,335,387,294,15,423,123\n.\n.\n.\nAn example to run optimal grouping on subset of genomes in the pangenome.\n## type strains\nbash ./scripts/b_construction/grouping_subsets_process.sh \"typeStrain\" \"374,96,385,386,379,388,116,375,377,347,250,335,338,265,256,32,269,387,266\"\nUse GNU parallel to run optimal grouping on all random sets.\n## run `optimal_grouping` on these random subsets\nnohup \\\n# sed -n '1,6!p' analysis/03_pangenome_pecto_v2/subset_optimal_group/subsets_conf.tab | \\\ncat analysis/03_pangenome_pecto_v2/subset_optimal_group/subsets_conf.tab | \\\nparallel --colsep '\\t' --jobs 10  --keep-order --workdir $PWD --halt soon,fail=1 \\\n--load 100% --results logs/pantools/sub_opt_group/{1} \\\n--joblog logs/pantools/sub_opt_group/sub_opt_group.log \\\nbash ./scripts/b_construction/grouping_subsets_process.sh {1} {2} \\\n&gt;&gt;logs/pantools/sub_opt_group/nohup.out 2&gt;&1 &\nSummarize the results by plotting in R\n## summarize the results\nRscript scripts/b_construction/grouping_subsets_analyze.R\n\n\nGrouping at the pangenome level\n## grouping with relaxation 4 setting\nprocess_start group_v4\nnice $PANTOOLS group -t 30 --relaxation 4 ${pan_db}\nerror_exit $?\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.grp\n\n## optimized grouping\nprocess_start optimal_grouping\nnice $PANTOOLS optimal_grouping -t 30 ${pan_db} ${pan_db}/busco/enterobacterales_odb10\nerror_exit $?\n\n\nRscript ${pan_db}/optimal_grouping/optimal_grouping.R\n$PANTOOLS grouping_overview ${pan_db}\n\n## fix a grouping setting\n$PANTOOLS change_grouping -v 4 ${pan_db}\n$PANTOOLS grouping_overview ${pan_db}\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.opt_grp\n######################################################################"
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#pangenome-exploration",
    "href": "scripts/notebooks/pangenome_construction.html#pangenome-exploration",
    "title": "",
    "section": "Pangenome exploration",
    "text": "Pangenome exploration\n## extract the metrics from pangenome\nprocess_start extract_pangenome_metrics\n$PANTOOLS metrics ${pan_db}\nerror_exit $?\n\ngene classification\n\ncore-unique variation w.r.t. cutoffs\n## Core unique thresholds\nprocess_start core_unique_thresholds\n$PANTOOLS core_unique_thresholds ${pan_db}\nerror_exit $?\nRscript ${pan_db}/core_unique_thresholds/core_unique_thresholds.R\n\n\ncore and unique genes\n## gene classification: core and unique\nprocess_start gene_classification_core_unique\n$PANTOOLS gene_classification ${pan_db} \nerror_exit $?\n\n## Gene distance tree\nRscript ${pan_db}/gene_classification/gene_distance_tree.R\n\nmv ${pan_db}/gene_classification ${pan_db}/gene_classification.100.0\n\n\nsoft core (95%) and cloud (5%) genes\n## gene classification: soft core and cloud\nprocess_start gene_classification_softcore_cloud\n$PANTOOLS gene_classification --core-threshold 95 --unique-threshold 5 ${pan_db} \nerror_exit $?\n\n## Gene distance tree\nRscript ${pan_db}/gene_classification/gene_distance_tree.R\nmv ${pan_db}/gene_classification ${pan_db}/gene_classification.95.5\n\n\n\nExtract information for all homology groups\n## homology group information\nsed -i.bak -r -n '/^#/! p' ${pan_db}/gene_classification.100.0/all_homology_groups.csv\nprocess_start \"extracting homology group information\"\n$PANTOOLS group_info -H ${pan_db}/gene_classification.100.0/all_homology_groups.csv ${pan_db}\nerror_exit $?\n\n\nk-mer classification\n\ncore and unique kmers\n## K-mer classification: soft core and cloud\nprocess_start kmer_classification_core_unique\n$PANTOOLS k_mer_classification ${pan_db}\nerror_exit $?\n\nRscript ${pan_db}/kmer_classification/genome_kmer_distance_tree.R\nmv ${pan_db}/kmer_classification ${pan_db}/kmer_classification.100.0\n\n\nsoft core (95%) and cloud (5%) kmers\n## K-mer classification: soft core and cloud\nprocess_start kmer_classification_softcore_cloud\n$PANTOOLS k_mer_classification --core-threshold 95 --unique-threshold 5 ${pan_db}\nerror_exit $?\n\nRscript ${pan_db}/kmer_classification/genome_kmer_distance_tree.R\nmv ${pan_db}/kmer_classification ${pan_db}/kmer_classification.95.5\n\n\n\nPangenome structure\n\nUse all genomes to determine pangenome structure\n## Pangenome structure: genes\nprocess_start pangenome_structure_gene\n$PANTOOLS pangenome_structure -t 20 ${pan_db}\nerror_exit $?\n\nRscript ${pan_db}/pangenome_size/gene/pangenome_growth.R\nRscript ${pan_db}/pangenome_size/gene/gains_losses_median_or_average.R\nRscript ${pan_db}/pangenome_size/gene/gains_losses_median_and_average.R\nRscript ${pan_db}/pangenome_size/gene/heaps_law.R\n\nmv ${pan_db}/pangenome_size/gene ${pan_db}/pangenome_size/gene.pangenome\n\n## Pangenome structure: kmer\nprocess_start pangenome_structure_kmer\n$PANTOOLS pangenome_structure -t 20 --kmer ${pan_db}\nerror_exit $?\n\nRscript ${pan_db}/pangenome_size/kmer/pangenome_growth.R\n######################################################################\n\n\n\nFunctional classification\n\ncore and unique functional classification\n## functional_classification: core and unique\nprocess_start functional_classification_core_unique\n$PANTOOLS functional_classification ${pan_db}\nerror_exit $?\n\nmv ${pan_db}/function/functional_classification ${pan_db}/function/functional_classification.100.0\n\n\nsoftcore (95%) and cloud (5%) functional classification\n## functional_classification: softcore and cloud\nprocess_start functional_classification_softcore_cloud\n$PANTOOLS functional_classification --core-threshold 95 --unique-threshold 5 ${pan_db}\nerror_exit $?\n\nmv ${pan_db}/function/functional_classification ${pan_db}/function/functional_classification.95.5\n\n\nfunction overview\n## function_overview\nprocess_start function_overview\n$PANTOOLS function_overview ${pan_db} \nerror_exit $?\n\nRscript ${pan_db}/cog_per_class.R\n## GO enrichment for core, accessory and unique homology groups\nfor grp in core accessory unique\ndo\n    process_start GO_enrichment:$grp\n    $PANTOOLS go_enrichment -H ${pan_db}/gene_classification.100.0/${grp}_groups.csv  ${pan_db}\n    error_exit $?\n    mv ${pan_db}/function/go_enrichment ${pan_db}/function/go_enrichment.100.0.${grp} \ndone\n\n## GO enrichment for soft-core, accessory and cloud homology groups\nfor grp in core accessory unique\ndo\n    process_start GO_enrichment:$grp\n    $PANTOOLS go_enrichment -H ${pan_db}/gene_classification.95.5/${grp}_groups.csv  ${pan_db}\n    error_exit $?\n    mv ${pan_db}/function/go_enrichment ${pan_db}/function/go_enrichment.95.5.${grp} \ndone\n\n#######################################################################\n\n\n\nMSA for all homology groups\n## MSA for homology groups\nprocess_start \"msa for homology groups\"\n$PANTOOLS msa -t 12 --method per-group --mode nucleotide ${pan_db}\nerror_exit $?\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.msa"
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#phylogeny-analysis",
    "href": "scripts/notebooks/pangenome_construction.html#phylogeny-analysis",
    "title": "",
    "section": "Phylogeny analysis",
    "text": "Phylogeny analysis\n\n## SNP tree using core gene SNPs\nprocess_start core_phylogeny\ncp -rp ${pan_db}/gene_classification.100.0 ${pan_db}/gene_classification\n$PANTOOLS core_phylogeny -t 20  --clustering-mode ML ${pan_db}\nerror_exit $?\nrm -r ${pan_db}/gene_classification\n\n## running_job: leunissen\nmkdir ${pan_db}/core_snp_tree/ML_tree \nnohup nice iqtree -T 40 -s data/pangenomes/pectobacterium.v2/backup/pectobacterium.v2.DB.msa/core_snp_tree/informative.fasta -redo -B 1000 \\\n--prefix data/pangenomes/pectobacterium.v2/backup/pectobacterium.v2.DB.msa/core_snp_tree/ML_tree/informative.fasta \\\n&gt;&gt; logs/v2_pecto/core_tree.log 2&gt;&1 &\n\nnohup nice iqtree -T 40 -s informative.fasta -B 1000 --prefix ML_tree/informative.fasta \\\n&gt;&gt; core_tree.log 2&gt;&1 &\n\n## run IQ-tree with a specific model\nnohup iqtree -T 30 -s ${pan_db}/core_snp_tree/informative.fasta -redo -B 1000 \\\n-m GTR+F+ASC --prefix ${pan_db}/core_snp_tree/informative.fasta.GTR_F_ASC \\\n&gt; logs/v2_pecto/iqtree_GTR_F_ASC.log 2&gt;&1 &\n\n######################################################################"
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#build-pangenome-org.db-object",
    "href": "scripts/notebooks/pangenome_construction.html#build-pangenome-org.db-object",
    "title": "",
    "section": "Build pangenome org.db object",
    "text": "Build pangenome org.db object\nExtract pangenome data from Neo4j database using Python script.\npython3 scripts/b_construction/neo4j_extract_go.py\nCreate org.db AnnotationHub like object for the pangenome for easier exploratory analysis in R.\nRscript scripts/build/pangenome_org_db.R"
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata.viz.html",
    "href": "scripts/analysis/pangenome_metadata.viz.html",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "",
    "text": "Here, various exploratory analysis figures are generated for P. brasiliense population metadata as well as genome assembly metadata."
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata.viz.html#initial-setup",
    "href": "scripts/analysis/pangenome_metadata.viz.html#initial-setup",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(configr))\nsuppressPackageStartupMessages(library(ggpubr))\nsuppressPackageStartupMessages(library(ggdist))\nsuppressPackageStartupMessages(library(ggpattern))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(skimr))\nsuppressPackageStartupMessages(library(DT))\n\n## pangenome data summary and comparison\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\noutDir &lt;- confs$analysis$summary$dir\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]"
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata.viz.html#import-data",
    "href": "scripts/analysis/pangenome_metadata.viz.html#import-data",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Import data",
    "text": "Import data\n\n\nCode\npanMetrix &lt;- suppressMessages(\n  readr::read_csv(panConf$db$metrics$files$per_genome)\n) %&gt;% \n  dplyr::rename_all(\n    .funs = ~ stringr::str_replace_all(\n      ., c(\"\\\\s+\" = \"_\", \"%\" = \"per\", \"(\\\\(|\\\\))\" = \"\")\n    )\n  ) %&gt;%\n  dplyr::select(\n    Genome, Gene_count, mRNA_count, rRNA_count, tRNA_count,\n    Singletons, Homology_groups, GC_per = GC_content_per\n  ) %&gt;% \n  dplyr::mutate(Genome = as.character(Genome))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nCode\npanMeta &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus) %&gt;% \n  dplyr::left_join(y = panMetrix, by = \"Genome\") %&gt;% \n  dplyr::mutate(\n    pbr = dplyr::if_else(\n      SpeciesName == \"P. brasiliense\", SpeciesName, \"other\"\n    ),\n    geo_loc_country = dplyr::if_else(\n      geo_loc_country == \"Netherlands\", geo_loc_country, \"other\", missing = \"other\"\n    ),\n    virType = dplyr::case_when(\n      virulence == \"virulent\" & virulence_pcr == \"positive\" ~ \"TP\",\n      virulence == \"virulent\" & virulence_pcr == \"negative\" ~ \"FN\",\n      virulence == \"avirulent\" & virulence_pcr == \"positive\" ~ \"FP\",\n      virulence == \"avirulent\" & virulence_pcr == \"negative\" ~ \"TN\",\n      TRUE ~ \"unknown\"\n    ),\n    pbr = forcats::fct_relevel(pbr, \"other\", \"P. brasiliense\"),\n    geo_loc_country = forcats::fct_relevel(geo_loc_country, \"Netherlands\"),\n    virType = forcats::fct_relevel(virType, \"TP\", \"FN\", \"TN\", \"FP\", \"unknown\")\n  )"
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata.viz.html#explore-p.-brasiliense-population-metadata",
    "href": "scripts/analysis/pangenome_metadata.viz.html#explore-p.-brasiliense-population-metadata",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Explore P. brasiliense population metadata",
    "text": "Explore P. brasiliense population metadata\n\nP. brasiliense collection in the Netherlands\n\n\nCode\n(\n  pt_pbrTimeline &lt;- dplyr::filter(\n    panMeta, geo_loc_country == \"Netherlands\", !is.na(collection_year)\n  ) %&gt;% \n    ggplot2::ggplot() +\n    geom_histogram(\n      mapping = aes(x = collection_year, fill = forcats::fct_rev(pbr)),\n      binwidth = 2, color = \"black\"\n    ) +\n    geom_vline(xintercept = 2015, color = \"blue\", linewidth = 1, linetype = \"dashed\") +\n    scale_fill_manual(\n      values = c(\"P. brasiliense\" = \"black\", \"other\" = \"grey90\")\n    ) +\n    # labs(\n    #   title = \"P. brasiliense collection after 2015 in the Netherlands\"\n    # ) +\n    scale_x_continuous(expand = expansion(add = 0)) +\n    scale_y_continuous(expand = expansion(add = c(0, 5))) +\n    theme_bw(base_size = 20) +\n    theme(\n      legend.position = c(0.02, 0.9),\n      legend.justification = c(0, 1),\n      legend.key.size = unit(1, \"cm\"),\n      legend.text = element_text(size = 20),\n      legend.title = element_blank(),\n      axis.title = element_blank(),\n      plot.margin = margin(1, 1, 1, 1, \"cm\"),\n      panel.grid = element_blank()\n    )\n)\n\n\n\n\n\nP. brasiliense collection after 2015 in the Netherlands\n\n\n\n\n\n\nAppearance of new P. brasiliense virulent isolates in the Netherlands\n\n\nCode\n(\n  pt_fnPbr &lt;- dplyr::filter(\n    panMeta, geo_loc_country == \"Netherlands\", pbr == \"P. brasiliense\"\n  ) %&gt;% \n    ggplot2::ggplot() +\n    ggpattern::geom_histogram_pattern(\n      mapping = aes(x = collection_year, fill = virType, pattern_density = virType),\n      binwidth = 1,\n      pattern = \"stripe\", pattern_fill = \"black\",\n      # pattern_density = 0.6,\n      color = \"black\", pattern_spacing = 0.02, pattern_colour = \"black\"\n    ) +\n    scale_fill_manual(\n      values = c(\"TP\" = \"red\", \"FP\" = alpha(\"green\", 1),\n                 \"TN\" = \"green\", \"FN\" = alpha(\"red\", 1), \"unknown\" = \"grey\")\n    ) +\n    scale_pattern_density_manual(\n      values = c(\"TP\" = 0, \"FP\" = 0.5, \"TN\" = 0,\n                 \"FN\" = 0.5, \"unknown\" = 0)\n    ) +\n    # labs(\n    #   title = \"FN-Pbr emergence in the Netherlands\"\n    # ) +\n    scale_x_continuous(expand = expansion(add = 0)) +\n    scale_y_continuous(expand = expansion(add = c(0, 2))) +\n    theme_bw(base_size = 20) +\n    theme(\n      legend.position = c(0.01, 0.9),\n      legend.justification = c(0, 1),\n      legend.key.size = unit(1, \"cm\"),\n      legend.text = element_text(size = 20),\n      legend.title = element_blank(),\n      axis.title = element_blank(),\n      panel.grid = element_blank()\n    )\n)\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nFN-Pbr emergence in the Netherlands\n\n\n\n\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`)."
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata.viz.html#explore-p.-brasiliense-genome-metdata",
    "href": "scripts/analysis/pangenome_metadata.viz.html#explore-p.-brasiliense-genome-metdata",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Explore P. brasiliense genome metdata",
    "text": "Explore P. brasiliense genome metdata\n\nPrepare plotting data\n\n\nCode\nplotDf &lt;- dplyr::select(\n  panMeta, Genome, source, sampleId, SpeciesName, geo_loc_country, virulence,\n  virulence_pcr, length, GC_per, N50, L50,\n  Gene_count, mRNA_count, tRNA_count, rRNA_count,\n  Homology_groups, Singletons\n) %&gt;%\n  dplyr::filter(SpeciesName == \"P. brasiliense\") %&gt;% \n  tidyr::pivot_longer(\n    cols = -c(Genome, sampleId, source, SpeciesName, geo_loc_country,\n              virulence, virulence_pcr),\n    names_to = \"field\",\n    values_to = \"value\"\n  ) %&gt;%\n  dplyr::mutate(\n    field = forcats::fct_relevel(\n      field, \"length\", \"Gene_count\", \"mRNA_count\", \"tRNA_count\", \"rRNA_count\"\n    )\n  )\n\n\n\n\nDo P. brasiliense from the Netherlands have more genes?\nHere, we compare the mRNA count of P. brasiliense genomes between the isolates from the Netherlands and rest of the world. A good quality genome can have more mRNA and to control for this, we also compare the N50 values between the same groups.\n\n\nCode\n(\n  pt_loc &lt;- plotDf %&gt;% \n    # dplyr::filter(field %in% c(\"length\")) %&gt;%\n    # dplyr::filter(field %in% c(\"mRNA_count\", \"length\", \"N50\", \"N90\", \"L50\", \"L90\")) %&gt;%\n    dplyr::filter(field %in% c(\"mRNA_count\", \"N50\")) %&gt;%\n    # dplyr::filter(field %in% c(\"mRNA_count\", \"tRNA_count\", \"rRNA_count\", \"N50\")) %&gt;%\n    ggplot2::ggplot(\n      mapping = aes(x = forcats::fct_rev(geo_loc_country), y = value)\n    ) +\n    geom_boxplot(width = .5, outlier.shape = NA, alpha = 0, linewidth = 1) +\n    ggbeeswarm::geom_quasirandom(size = 3) +\n    ggpubr::stat_compare_means(label.y.npc = \"top\", vjust = -1) +\n    scale_y_continuous(\n      labels = scales::label_comma(scale_cut = c(Mb = 1000000, Gb = 1000000000)),\n      expand = expansion(mult = c(0.1))\n    ) +\n    facet_wrap(\n      facets = ~field, nrow = 1, scales = \"free_y\",\n      labeller = ggplot2::labeller(\n        field = c(\"mRNA_count\" = \"Gene count\", \"length\" = \"Genome size\", \"N50\" = \"N50\")\n      )\n    ) +\n    # labs(\n    #   title = \"Pbr isolates from the Netherlands have more protein coding genes\"\n    # ) +\n    theme_bw(base_size = 20) +\n    theme(\n      axis.title = element_blank(),\n      axis.text.x = element_text(angle = 45, hjust = 1),\n      legend.position = \"bottom\",\n      panel.grid = element_blank()\n    )\n)\n\n\n\n\n\nPbr isolates from the Netherlands have more protein coding genes\n\n\n\n\n\n\nDo virulent P. brasiliense isolates have more mRNAs?\n\n\nCode\n(\n  pt_vir &lt;- dplyr::filter(plotDf, virulence %in% c(\"virulent\", \"avirulent\")) %&gt;% \n    dplyr::filter(field %in% c(\"mRNA_count\", \"length\", \"N50\")) %&gt;%\n    ggplot2::ggplot(mapping = aes(x = virulence, y = value))  +\n    ggplot2::geom_boxplot(width = .5, outlier.shape = NA, alpha = 0, linewidth = 1) +\n    ggbeeswarm::geom_quasirandom(\n      mapping = aes(color = virulence),\n      size = 3\n    ) +\n    ggpubr::stat_compare_means(label.y.npc = \"top\", vjust = -1) +\n    ggplot2::scale_x_discrete(\n      labels = c(\"virulent\" = \"BL causing\",\"avirulent\" = \"BL non-causing\")\n    ) +\n    ggplot2::scale_color_manual(\n      name = \"Blackleg phenotype\",\n      values = c(\"red\", \"black\"),\n      breaks = c(\"virulent\", \"avirulent\"),\n      label = c(\"BL-causing\", \"BL non-causing\"),\n      guide = guide_legend(override.aes = list(size = 6))\n    ) +\n    ggplot2::scale_y_continuous(\n      labels = scales::label_comma(scale_cut = c(Mb = 1000000, Gb = 1000000000)),\n      expand = expansion(mult = c(0.1))\n    ) +\n    ggplot2::facet_wrap(\n      facets = ~field, nrow = 1, scales = \"free_y\",\n      labeller = ggplot2::labeller(\n        field = c(\"mRNA_count\" = \"Gene count\", \"length\" = \"Genome size\", \"N50\" = \"N50\")\n      )\n    ) +\n    ggplot2::theme_bw(base_size = 22) +\n    ggplot2::theme(\n      axis.title = element_blank(),\n      # axis.text.x = element_text(angle = 45, hjust = 1),\n      axis.text.x = element_blank(),\n      legend.position = \"bottom\",\n      panel.grid = element_blank()\n    )\n)\n\n\n\n\n\nVirulent Pbr isolates have more protein coding genes than avirulent"
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html",
    "href": "scripts/analysis/prophage_summary.html",
    "title": "Summary statistics for prophages",
    "section": "",
    "text": "This script summarizes the consolidated prophages in the pangenome. The figures and statistics generated in this analysis include all prophages i.e. redundant prophages (from identical genomes assemblies). For the summary of unique prophages, please refer to the script scripts/analysis/prophage_representatives_summary.qmd."
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#initial-setup",
    "href": "scripts/analysis/prophage_summary.html#initial-setup",
    "title": "Summary statistics for prophages",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(skimr))\nsuppressPackageStartupMessages(library(ggdist))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(waffle))\nsuppressPackageStartupMessages(library(hrbrthemes))\nsuppressPackageStartupMessages(library(org.Pectobacterium.spp.pan.eg.db))\nsuppressPackageStartupMessages(library(DT))\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/homology_groups.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\noutDir &lt;- confs$analysis$prophages$summary$dir\n\npanOrgDb &lt;- org.Pectobacterium.spp.pan.eg.db\nprophageLenCutoff &lt;- confs$analysis$prophages$cutoff_length\ntreeMethod &lt;- \"kmer_nj\" # ani_upgma, kmer_nj"
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#import-data",
    "href": "scripts/analysis/prophage_summary.html#import-data",
    "title": "Summary statistics for prophages",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId\n)\n\n# read prophage HGs stored locally\nproHgs &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$raw_prophage_hg)\n) %&gt;%\n  dplyr::select(prophage_id = id, nHgs, hgs) %&gt;%\n  dplyr::mutate(\n    hgs = stringr::str_split(hgs, \";\")\n  )\n\nphagesRaw &lt;- suppressMessages(readr::read_tsv(confs$data$prophages$files$data)) %&gt;%\n  dplyr::select(prophage_id, sampleId, taxonomy, completeness, checkv_quality)\n\nrawTree &lt;- import_tree(\n  file = confs$analysis$phylogeny[[treeMethod]]$files$tree,\n  phylo = TRUE\n)\n\n\nWarning in max(vapply(x, length, numeric(1))): no non-missing arguments to max;\nreturning -Inf\n\n\nCode\npt_tree &lt;- ggtree::ggtree(rawTree)\ntreeTipOrder &lt;- ggtree::get_taxa_name(pt_tree)\n\n\n\nImport processed prophage data\n\n\nCode\nmergedPhages &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$consolidated)\n)\n\nfragmented &lt;- dplyr::filter(mergedPhages, nFragments &gt; 1)\nremovedPro &lt;- dplyr::filter(mergedPhages, filtered != 0 | nFragments &gt; 1)\n\nphages &lt;- dplyr::filter(mergedPhages, filtered == 0, nFragments == 1) %&gt;%\n  dplyr::left_join(y = phagesRaw, by = \"prophage_id\") %&gt;%\n  dplyr::left_join(proHgs, by = \"prophage_id\") %&gt;%\n  dplyr::relocate(sampleId, taxonomy, completeness, checkv_quality, .after = genomeId)\n\nphageHgDf &lt;- tibble::tibble(hgId = unlist(phages$hgs) %&gt;% unique())\n\n# save filtered prophages\nreadr::write_tsv(\n  dplyr::select(phages, -hgs, -nHgs),\n  file = confs$analysis$prophages$preprocessing$files$filtered\n)"
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#prophage-summary-for-deciding-filtering",
    "href": "scripts/analysis/prophage_summary.html#prophage-summary-for-deciding-filtering",
    "title": "Summary statistics for prophages",
    "section": "Prophage summary for deciding filtering",
    "text": "Prophage summary for deciding filtering\n\n\nCode\nglimpse(phages)\n\n\nRows: 1,319\nColumns: 24\n$ prophage_id          &lt;chr&gt; \"g_349.vir_1\", \"g_349.vir_2\", \"g_349.vir_4\", \"g_1…\n$ filtered             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ fragments            &lt;chr&gt; \"g_349.vir_1\", \"g_349.vir_2\", \"g_349.vir_4\", \"g_1…\n$ nFragments           &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ genomeId             &lt;chr&gt; \"g_349\", \"g_349\", \"g_349\", \"g_133\", \"g_133\", \"g_1…\n$ sampleId             &lt;chr&gt; \"GCA_900005045.1_Polaris_6\", \"GCA_900005045.1_Pol…\n$ taxonomy             &lt;chr&gt; \"Viruses;Duplodnaviria;Heunggongvirae;Uroviricota…\n$ completeness         &lt;dbl&gt; 44.02, 6.41, 15.72, 56.88, 26.39, 44.54, 100.00, …\n$ checkv_quality       &lt;chr&gt; \"Low-quality\", \"Low-quality\", \"Low-quality\", \"Med…\n$ prophage_length      &lt;dbl&gt; 16331, 9531, 16223, 27562, 15612, 16526, 61557, 2…\n$ fragmentAlnPos       &lt;chr&gt; \"1:21\", \"1:13\", NA, \"1:31\", \"9:26\", \"1:20\", NA, N…\n$ nHg                  &lt;dbl&gt; 21, 14, 16, 31, 22, 20, 77, 48, 25, 20, 61, 21, 9…\n$ parent               &lt;chr&gt; \"g_218.vir_3\", \"g_338.vir_2\", NA, \"g_81.vir_1\", \"…\n$ parentGenome         &lt;chr&gt; \"g_218\", \"g_338\", NA, \"g_81\", \"g_107\", \"g_126\", N…\n$ nHgParent            &lt;dbl&gt; 24, 24, NA, 76, 30, 20, NA, NA, NA, 22, NA, 21, 1…\n$ nSharedHgs           &lt;dbl&gt; 21, 13, NA, 30, 21, 20, NA, NA, NA, 20, NA, 21, 8…\n$ nSyntenicSharedHgs   &lt;dbl&gt; 21, 13, NA, 30, 18, 20, NA, NA, NA, 20, NA, 21, 8…\n$ jaccardIndex         &lt;dbl&gt; 0.8750000, 0.5200000, NA, 0.3896104, 0.5806452, 1…\n$ contentDissimilarity &lt;dbl&gt; 0.06250000, 0.26488095, NA, 0.31876061, 0.2909090…\n$ perSharedParent      &lt;dbl&gt; 0.8750000, 0.5416667, NA, 0.3947368, 0.6000000, 1…\n$ perSharedChild       &lt;dbl&gt; 1.0000000, 0.9285714, NA, 0.9677419, 0.8181818, 1…\n$ relation             &lt;chr&gt; \"high_quality\", \"medium_quality\", NA, \"low_qualit…\n$ nHgs                 &lt;dbl&gt; 21, 14, 16, 31, 22, 20, 77, 48, 25, 20, 61, 21, 9…\n$ hgs                  &lt;list&gt; &lt;\"hg_22426799\", \"hg_22426817\", \"hg_22427604\", \"h…\n\n\nProphages identified by geNomad pipeline: 1649\nProphages with at least 1 homology group: 1519\nTotal homology groups of raw prophages: 4844\nConsolidated prophages: 1436\nFragmented prophages: 62\nTotal fragments in fragmented prophages: 145\nProphages after filtering fragmented prophages and length smaller than 5000bp: 1319\nTotal homology groups of the filtered prophage set: 4798\n\n\nCode\ncompletenessDf &lt;- dplyr::select(\n  phages, prophage_id, genomeId, prophage_length, completeness\n) %&gt;%\n  dplyr::mutate(\n    comp_category = dplyr::case_when(\n      completeness == 100 ~ \"complete\",\n      completeness &gt;= 90 ~ \"gt_90\",\n      completeness &gt;= 50 ~ \"betn_50_90\",\n      completeness &lt; 50 ~ \"lt_50\"\n    ),\n    comp_category = forcats::fct_relevel(\n      .f = comp_category, \"complete\", \"gt_90\", \"betn_50_90\", \"lt_50\"\n    )\n  ) %&gt;%\n  dplyr::arrange(comp_category)\n\nshortestCompletePro &lt;- dplyr::filter(completenessDf, completeness &gt;= 90) %&gt;%\n  dplyr::arrange(prophage_length) %&gt;%\n  dplyr::slice(1L)\n\npt_sizeHist &lt;- ggplot2::ggplot(\n  data = completenessDf,\n  mapping = aes(x = prophage_length)\n) +\n  ggplot2::geom_histogram(mapping = aes(fill = comp_category), bins = 40) +\n  scale_fill_manual(\n    name = \"CheckV completeness\",\n    values = c(\n      \"complete\" = \"#4daf4a\", \"gt_90\" = \"#b2df8a\",\n      \"betn_50_90\" = \"#ff7f00\", \"lt_50\" = \"grey50\"\n    ),\n    labels = c(\n      \"complete\" = \"100%\", \"gt_90\" = \"&gt;= 90%\",\n      \"betn_50_90\" = \"[50%, 90%)\", \"lt_50\" = \"&lt; 50%\"\n    )\n  ) +\n  scale_x_continuous(\n    labels = scales::label_number(scale_cut = c(0, kb = 10^3, mb = 10^6)),\n    breaks = scales::breaks_extended(6),\n    limits = c(0, NA), expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0.01, 0.01))) +\n  labs(x = \"Prophage length\", y = \"Count\") +\n  theme_bw(base_size = 20) +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = c(0.95, 0.95),\n    legend.text = element_text(size = 20),\n    legend.title = element_text(size = 20, face = \"bold\"),\n    legend.justification = c(1, 1),\n    plot.margin = unit(c(1, 1, 1, 1), \"cm\")\n  )\n\n\npt_sizeDens &lt;- ggplot2::ggplot(\n  data = completenessDf,\n  mapping = aes(x = prophage_length, color = comp_category, group = NA)\n) +\n  ggdist::geom_dots(layout = \"weave\", smooth = \"bounded\", scale = 1, shape = 19) +\n  scale_color_manual(\n    name = \"CheckV completeness\",\n    values = c(\n      \"complete\" = \"#4daf4a\", \"gt_90\" = \"#b2df8a\",\n      \"betn_50_90\" = \"#ff7f00\", \"lt_50\" = \"grey50\"\n    ),\n    labels = c(\n      \"complete\" = \"100%\", \"gt_90\" = \"&gt;= 90%\",\n      \"betn_50_90\" = \"[50%, 90%)\", \"lt_50\" = \"&lt; 50%\"\n    )\n  ) +\n  scale_x_continuous(\n    labels = scales::label_number(scale_cut = c(0, kb = 10^3, mb = 10^6)),\n    breaks = scales::breaks_extended(6),\n    limits = c(0, NA), expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0.01, 0.01))) +\n  labs(x = \"Prophage length\", y = \"density\") +\n  theme_bw(base_size = 16) +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = c(0.95, 0.95),\n    legend.justification = c(1, 1)\n  )\n\nggsave(\n  filename = paste(outDir, \"/prophage_size_density.pdf\", sep = \"\"),\n  plot = pt_sizeHist, width = 8, height = 5\n)\n\n\nWarning: Removed 4 rows containing missing values (`geom_bar()`).\n\n\nCode\npt_sizeDens\n\n\n\n\n\nProphage length distribution"
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#prophage-summary",
    "href": "scripts/analysis/prophage_summary.html#prophage-summary",
    "title": "Summary statistics for prophages",
    "section": "Prophage summary",
    "text": "Prophage summary\n\nProphage types\n\n\nCode\ntable(phages$taxonomy)\n\n\n\n                                                                              Unclassified \n                                                                                         1 \n                           Viruses;Duplodnaviria;Heunggongvirae;Uroviricota;Caudoviricetes \n                                                                                      1307 \n     Viruses;Monodnaviria;Loebvirae;Hofneiviricota;Faserviricetes;Tubulavirales;Inoviridae \n                                                                                         8 \nViruses;Monodnaviria;Sangervirae;Phixviricota;Malgrandaviricetes;Petitvirales;Microviridae \n                                                                                         2 \n                Viruses;Riboviria;Orthornavirae;Pisuviricota;Stelpaviricetes;Patatavirales \n                                                                                         1 \n\n\n\n\nCode\npt_proTax &lt;- dplyr::select(phages, taxonomy) %&gt;%\n  dplyr::mutate(\n    taxonomy = stringr::str_replace(taxonomy, \".*;\", \"\")\n  ) %&gt;%\n  ggplot2::ggplot() +\n  ggplot2::geom_bar(mapping = aes(y = taxonomy), color = \"black\", fill = \"black\") +\n  ggplot2::labs(x = \"Count\", y = \"Taxonomy\") +\n  ggbreak::scale_x_break(breaks = c(10, 1290)) +\n  theme_bw(base_size = 24) +\n  theme(\n    panel.grid = element_blank(),\n    axis.title.y = element_blank()\n  )\n\nggsave(\n  filename = paste(outDir, \"/prophage_taxonomy.pdf\", sep = \"\"),\n  plot = pt_proTax, width = 6, height = 3\n)\n\npt_proTax\n\n\n\n\n\nProphage taxonomy\n\n\n\n\n\n\nProphage summary per genome\n\n\nCode\n# completeness stats\nproCompletenessStats &lt;- dplyr::select(completenessDf, genomeId, comp_category) %&gt;%\n  dplyr::count(genomeId, comp_category, name = \"n\") %&gt;%\n  tidyr::pivot_wider(\n    id_cols = genomeId,\n    names_from = comp_category,\n    values_from = n,\n    values_fill = 0\n  ) %&gt;%\n  dplyr::select(genomeId, complete, gt_90, betn_50_90, lt_50)\n\n# fragmented or filtered prophages stats\nfragmentStats &lt;- dplyr::select(removedPro, prophage_id, genomeId, nFragments, filtered) %&gt;%\n  dplyr::mutate(\n    removed = dplyr::case_when(\n      filtered == 1 ~ \"filtered\",\n      nFragments &gt; 1 ~ \"fragmented\"\n    )\n  ) %&gt;%\n  dplyr::count(genomeId, removed, name = \"n\") %&gt;%\n  tidyr::pivot_wider(\n    id_cols = genomeId,\n    names_from = removed,\n    values_from = n,\n    values_fill = 0\n  ) %&gt;%\n  dplyr::mutate(\n    removed = filtered + fragmented\n  )\n\n\nperGenomePhageInfo &lt;- dplyr::group_by(phages, genomeId) %&gt;%\n  dplyr::summarise(\n    phage_count = n(),\n    longest_phage = max(prophage_length),\n    smallest_phage = min(prophage_length),\n    total_phage_len = sum(prophage_length),\n    longest_nHg = max(nHg),\n    smallest_nHg = min(nHg),\n    phage_nHgs = sum(nHg),\n    hgs = list(unlist(hgs)),\n    nHgsUnique = length(unique(unlist(hgs))),\n    .groups = \"drop\"\n  ) %&gt;%\n  dplyr::arrange(desc(phage_count)) %&gt;%\n  dplyr::full_join(\n    y = dplyr::select(\n      sampleInfo, sampleId, genomeId, geo_loc_country,\n      nodepath.kmer_nj, SpeciesName\n    ),\n    by = \"genomeId\"\n  ) %&gt;%\n  dplyr::left_join(y = proCompletenessStats, by = \"genomeId\") %&gt;%\n  dplyr::left_join(y = fragmentStats, by = \"genomeId\") %&gt;%\n  tidyr::replace_na(\n    replace = list(phage_nHgs = 0, nHgsUnique = 0, phage_count = 0)\n  ) %&gt;%\n  dplyr::relocate(\n    sampleId, SpeciesName, geo_loc_country, nodepath.kmer_nj,\n    .after = genomeId\n  ) %&gt;%\n  dplyr::arrange(nodepath.kmer_nj)\n\nperGenomePhageInfo &lt;- dplyr::full_join(\n  x = tibble(genomeId = treeTipOrder),\n  y = perGenomePhageInfo, by = \"genomeId\"\n)\n\nreadr::write_tsv(\n  x = dplyr::select(perGenomePhageInfo, -hgs),\n  file = confs$analysis$prophages$summary$files$prophage_stats_genome\n)\n\n\n\n\nProphage gene distribution in core, accessory and unique groups\n\n\nCode\n# dplyr::select(perGenomePhageInfo, SpeciesName, hgs) %&gt;%\n#   tidyr::unnest(cols = hgs) %&gt;%\n#   dplyr::distinct()\n\npanVirSummary &lt;- dplyr::summarise(\n  perGenomePhageInfo,\n  n_genomes = n(),\n  n_vir_sp = sum(phage_count),\n  max_vir_per_g = max(phage_count),\n  min_vir_per_g = min(phage_count),\n  mean_vir_per_g = mean(phage_count),\n  mean_vir_hgs = mean(phage_nHgs),\n  median_vir_hgs = median(phage_nHgs),\n  total_vir_hgs = sum(phage_nHgs),\n  unique_vir_hgs = length(unique(unlist(hgs))),\n  hgs = list(unique(unlist(hgs)))\n) %&gt;%\n  dplyr::mutate(SpeciesName = \"Pangenome\", .before = n_genomes)\n\nspVirSummary &lt;- dplyr::group_by(perGenomePhageInfo, SpeciesName) %&gt;%\n  dplyr::summarise(\n    n_genomes = n(),\n    n_vir_sp = sum(phage_count),\n    max_vir_per_g = max(phage_count),\n    min_vir_per_g = min(phage_count),\n    mean_vir_per_g = mean(phage_count),\n    total_vir_hgs = sum(phage_nHgs),\n    unique_vir_hgs = length(unique(unlist(hgs))),\n    hgs = list(unique(unlist(hgs))),\n    .groups = \"drop\"\n  ) %&gt;%\n  dplyr::bind_rows(panVirSummary) %&gt;%\n  dplyr::arrange(desc(n_genomes))\n\n\n\n\nCode\n## binary matrix for homology_group PAV\nhgBinaryMat &lt;- homology_groups_mat(pandb = panOrgDb, type = \"pav\")\n\n\n'select()' returned 1:many mapping between keys and columns\n\n\nCode\nsppGrpStats &lt;- NULL\n\n## get species wise core, accessory, unique group stats and GO\nfor (sp in c(unique(sampleInfo$SpeciesName), \"Pangenome\")) {\n  atPangenomeScale &lt;- sp == \"Pangenome\"\n  \n  if (atPangenomeScale) {\n    spGenomes &lt;- sampleInfo$genomeId\n  } else {\n    spGenomes &lt;- dplyr::filter(sampleInfo, SpeciesName == .env$sp) %&gt;%\n      dplyr::pull(genomeId)\n  }\n  \n  # prophage homology groups: handle special case when HGs for Pangenome are needed\n  spPhagesHgs &lt;- dplyr::filter(\n    perGenomePhageInfo, SpeciesName == !!sp | atPangenomeScale\n  ) %&gt;%\n    dplyr::select(hgId = hgs) %&gt;%\n    tidyr::unnest(cols = c(hgId)) %&gt;%\n    dplyr::distinct() %&gt;%\n    dplyr::mutate(\n      prophageHgs = \"prophage\",\n      SpeciesName = .env$sp\n    )\n  \n  # pangenome homology groups\n  spHgTypes &lt;- matrixStats::colSums2(\n    x = hgBinaryMat, useNames = T,\n    rows = which(rownames(hgBinaryMat) %in% spGenomes)\n  ) %&gt;%\n    tibble::enframe(name = \"hgId\", value = \"nGenomes\") %&gt;%\n    dplyr::filter(nGenomes != 0) %&gt;%\n    dplyr::mutate(\n      class = dplyr::case_when(\n        nGenomes == 1 ~ \"unique\",\n        nGenomes == !!length(spGenomes) ~ \"core\",\n        nGenomes &lt; !!length(spGenomes) & nGenomes &gt; 1 ~ \"accessory\"\n      )\n    ) %&gt;%\n    dplyr::left_join(y = spPhagesHgs, by = \"hgId\") %&gt;%\n    tidyr::replace_na(list(prophageHgs = \"non-prophage\", SpeciesName = sp))\n  \n  # if only one genome for species, all HGs should be assigned to \"core\"\n  if (length(spGenomes) == 1) {\n    spHgTypes$class &lt;- \"core\"\n  }\n  \n  phageHgDf &lt;- dplyr::filter(spHgTypes, prophageHgs == \"prophage\") %&gt;%\n    dplyr::select(hgId, !!sp := class) %&gt;%\n    dplyr::full_join(phageHgDf, by = \"hgId\")\n  \n  ## group stats\n  proHgSpStats &lt;- dplyr::count(spHgTypes, class, prophageHgs, name = \"phage_nHgs\") %&gt;%\n    dplyr::filter(prophageHgs == \"prophage\") %&gt;%\n    dplyr::left_join(\n      y = as.data.frame(table(spHgTypes$class), responseName = \"nHgs\"),\n      by = c(\"class\" = \"Var1\")\n    ) %&gt;%\n    dplyr::select(-prophageHgs) %&gt;%\n    dplyr::bind_rows(\n      dplyr::summarise(\n        .,\n        dplyr::across(.cols = -class, .fns = sum),\n        dplyr::across(.cols = class, .fns = ~\"total\")\n      )\n    ) %&gt;%\n    dplyr::mutate(\n      SpeciesName = .env$sp,\n      phageRatio = round(phage_nHgs / nHgs, digits = 3)\n    ) %&gt;%\n    dplyr::select(SpeciesName, class, nHgs, phage_nHgs, phageRatio)\n  \n  sppGrpStats &lt;- dplyr::bind_rows(sppGrpStats, proHgSpStats)\n}\n\n\nspec1 &lt;- tidyr::build_wider_spec(\n  data = sppGrpStats,\n  names_from = class,\n  values_from = c(nHgs, phage_nHgs, phageRatio),\n  names_glue = \"{.value}.{class}\"\n) %&gt;%\n  dplyr::mutate(\n    .name = dplyr::if_else(\n      .value == \"nHgs\", true = class, false = .name\n    )\n  )\n\nphageSpeciesStats &lt;- tidyr::pivot_wider_spec(data = sppGrpStats, spec = spec1) %&gt;%\n  dplyr::left_join(\n    y = spVirSummary, by = \"SpeciesName\"\n  ) %&gt;%\n  dplyr::select(-hgs) %&gt;%\n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(mean_vir_per_g),\n      .fns = ~ round(x = .x, digits = 3)\n    )\n  )\n\nstopifnot(\n  all(phageSpeciesStats$phage_nHgs.total == phageSpeciesStats$unique_vir_hgs)\n)\n\nphageSpeciesStats %&lt;&gt;% dplyr::select(\n  SpeciesName, n_genomes, n_vir_sp, mean_vir_per_g, core, accessory, unique, total,\n  ends_with(c(\".total\", \".core\", \".accessory\", \".unique\"))\n) %&gt;%\n  dplyr::arrange(desc(n_genomes))\n\nphageSpeciesStats %&gt;%\n  readr::write_tsv(\n    file = confs$analysis$prophages$summary$files$prophage_stats_species\n  )\n\n\n\nTable\n\n\n?(caption)\n\n\n\n\n\n\n\n\n\n\n\nFigure\nVisualize the proportion of prophage homology groups in pangenome and various HG categories.\n\n\nCode\ndf_panPhage &lt;- dplyr::filter(sppGrpStats, SpeciesName == \"Pangenome\") %&gt;%\n  dplyr::mutate(\n    class = forcats::fct_relevel(class, \"total\", \"core\", \"accessory\", \"unique\"),\n    nonPhage_ratio = 1 - phageRatio,\n    nonPhage_nHgs = nHgs - phage_nHgs\n  ) %&gt;%\n  dplyr::rename(phage_ratio = phageRatio, total_hgs = nHgs) %&gt;%\n  tidyr::pivot_longer(\n    cols = c(starts_with(\"phage_\"), starts_with(\"nonPhage\")),\n    names_to = c(\"hg_from\", \".value\"),\n    names_sep = \"_\"\n  ) %&gt;%\n  dplyr::mutate(\n    nHgs_h = nHgs / 38,\n    group = dplyr::if_else(\n      hg_from == \"nonPhage\", class, hg_from\n    )\n  )\n\n# lables for facets\nphageHgLables &lt;- dplyr::filter(sppGrpStats, SpeciesName == \"Pangenome\") %&gt;%\n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(phage_nHgs, nHgs), .fns = ~ prettyNum(.x, big.mark = \",\")\n    ),\n    label = paste(\n      class, \" (\", phageRatio * 100, \"%)\", \"\\n\", phage_nHgs, \"/\", nHgs,\n      sep = \"\"\n    )\n  ) %&gt;%\n  dplyr::pull(var = label, name = class)\n\n# waffle plot\npt_phage_hgs &lt;- ggplot2::ggplot(\n  data = df_panPhage,\n  mapping = aes(values = nHgs_h, fill = group)\n) +\n  waffle::geom_waffle(\n    color = \"white\", flip = TRUE,\n    make_proportional = TRUE, n_rows = 10, size = 0.25,\n    height = 1, width = 1\n  ) +\n  ggplot2::labs(\n    title = \"Prophage homology groups in pangenome\"\n  ) +\n  facet_wrap(\n    facets = ~class, nrow = 1, strip.position = \"bottom\",\n    labeller = as_labeller(phageHgLables)\n  ) +\n  scale_fill_manual(\n    name = NULL,\n    values = c(\n      \"phage\" = \"black\", \"core\" = confs$colors$core, \"total\" = \"grey\",\n      \"accessory\" = confs$colors$accessory, \"unique\" = confs$colors$unique\n    ),\n    breaks = c(\"phage\"),\n    labels = c(\"phage\" = \"Prophage\")\n  ) +\n  coord_equal() +\n  expand_limits(x = c(0, 0), y = c(0, 0)) +\n  waffle::theme_enhance_waffle() +\n  theme_minimal(base_size = 18) +\n  theme(\n    panel.spacing.x = unit(0, \"npc\"),\n    # strip.text.x = element_text(hjust = 0.5, size = 16),\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    legend.position = \"bottom\",\n    panel.grid = element_blank()\n  )\n\n\n\n\n\n\n\nProphage HGs in pangenome\n\n\n\n\n\n\n\nProphage homology groups with annotation table for exploration\n\n\nCode\nhgCog &lt;- suppressMessages(\n  AnnotationDbi::select(\n    x = panOrgDb, keys = phageHgDf$hgId,\n    columns = c(\"GID\", \"COG_id\", \"COG_description\")\n  )\n) %&gt;%\n  dplyr::filter(COG_id != \"None\") %&gt;%\n  dplyr::distinct() %&gt;%\n  dplyr::group_by(GID) %&gt;%\n  dplyr::reframe(\n    dplyr::across(\n      .cols = starts_with(\"COG_\"),\n      .fns = ~ paste(.x, collapse = \";\")\n    )\n  )\n\nhgPfam &lt;- suppressMessages(\n  AnnotationDbi::select(\n    x = panOrgDb, keys = phageHgDf$hgId,\n    columns = c(\"GID\", \"pfam_id\", \"pfam_description\")\n  )\n) %&gt;%\n  dplyr::filter(!is.na(pfam_id)) %&gt;%\n  dplyr::distinct() %&gt;%\n  dplyr::group_by(GID) %&gt;%\n  dplyr::reframe(\n    dplyr::across(\n      .cols = starts_with(\"pfam_\"),\n      .fns = ~ paste(.x, collapse = \";\")\n    )\n  )\n\nphageHgDf &lt;- dplyr::left_join(\n  phageHgDf, hgCog,\n  by = c(\"hgId\" = \"GID\")\n) %&gt;%\n  dplyr::left_join(hgPfam, by = c(\"hgId\" = \"GID\")) %&gt;%\n  dplyr::select(\n    hgId, starts_with(\"COG\"), starts_with(\"pfam\"),\n    Pangenome, phageSpeciesStats$SpeciesName\n  )\n\nreadr::write_tsv(\n  x = phageHgDf,\n  file = confs$analysis$prophages$summary$files$prophage_hg_info\n)"
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#prophage-contribution-to-the-genome-size-in-blackleg-causing-and-blackleg-non-causing-isolates",
    "href": "scripts/analysis/prophage_summary.html#prophage-contribution-to-the-genome-size-in-blackleg-causing-and-blackleg-non-causing-isolates",
    "title": "Summary statistics for prophages",
    "section": "Prophage contribution to the genome size in blackleg-causing and blackleg-non-causing isolates",
    "text": "Prophage contribution to the genome size in blackleg-causing and blackleg-non-causing isolates\n\n\nCode\nperGenomePhageInfo &lt;- dplyr::left_join(\n  x = perGenomePhageInfo,\n  y = dplyr::select(sampleInfo, genomeId, virulence, virulence_pcr, length, N50),\n  by = \"genomeId\"\n)\n\nplotDf &lt;- dplyr::select(\n  perGenomePhageInfo, genomeId, sampleId, SpeciesName, geo_loc_country, virulence,\n  virulence_pcr, length, N50, total_phage_len\n) %&gt;%\n  tidyr::pivot_longer(\n    cols = -c(\n      genomeId, sampleId, SpeciesName, geo_loc_country,\n      virulence, virulence_pcr\n    ),\n    names_to = \"field\",\n    values_to = \"value\"\n  ) %&gt;%\n  dplyr::mutate(\n    field = forcats::fct_relevel(\n      field, \"length\", \"total_phage_len\", \"N50\"\n    )\n  )\n\n\npt_proLen &lt;- dplyr::filter(plotDf, virulence %in% c(\"virulent\", \"avirulent\")) %&gt;%\n  dplyr::filter(field %in% c(\"length\", \"total_phage_len\", \"N50\")) %&gt;%\n  ggplot(mapping = aes(x = virulence, y = value)) +\n  geom_boxplot(width = .5, outlier.shape = NA, alpha = 0, linewidth = 1) +\n  ggbeeswarm::geom_quasirandom(mapping = aes(color = virulence), size = 3) +\n  ggpubr::stat_compare_means(label.y.npc = \"top\", vjust = -1) +\n  ggplot2::scale_x_discrete(\n    labels = c(\"virulent\" = \"BL causing\",\"avirulent\" = \"BL non-causing\")\n  ) +\n  ggplot2::scale_y_continuous(\n    labels = scales::label_comma(\n      scale_cut = c(Kb = 1000, Mb = 1000000, Gb = 1000000000)\n    ),\n    expand = expansion(mult = c(0.1))\n  ) + \n  ggplot2::scale_color_manual(\n    name = \"Blackleg phenotype\",\n    values = c(\"red\", \"black\"),\n    breaks = c(\"virulent\", \"avirulent\"),\n    label = c(\"BL-causing\", \"BL non-causing\"),\n    guide = guide_legend(override.aes = list(size = 6))\n  ) +\n  facet_wrap(\n    facets = ~field, nrow = 1, scales = \"free_y\",\n    labeller = ggplot2::labeller(\n      field = c(\n        \"total_phage_len\" = \"Prophage length\",\n        \"length\" = \"Genome size\", \"N50\" = \"N50\"\n      )\n    )\n  ) +\n  theme_bw(base_size = 20) +\n  theme(\n    axis.title = element_blank(),\n    axis.text.x = element_blank(),\n    legend.position = \"bottom\",\n    panel.grid = element_blank()\n  )\n\n\n\n\nWarning: Removed 3 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 3 rows containing non-finite values (`stat_compare_means()`).\n\n\nWarning: Removed 3 rows containing missing values (`position_quasirandom()`).\n\n\nWarning: Removed 3 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 3 rows containing non-finite values (`stat_compare_means()`).\n\n\nWarning: Removed 3 rows containing missing values (`position_quasirandom()`)."
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html",
    "href": "scripts/analysis/prophage_clustering.html",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "",
    "text": "This script cluster prophages using syntenic Jaccard index distance."
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#initial-setup",
    "href": "scripts/analysis/prophage_clustering.html#initial-setup",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(magrittr))\nsuppressPackageStartupMessages(library(igraph))\nsuppressPackageStartupMessages(library(apcluster))\nsuppressPackageStartupMessages(library(dendextend))\nsuppressPackageStartupMessages(library(ComplexHeatmap))\nsuppressPackageStartupMessages(library(ape))\nsuppressPackageStartupMessages(library(logger))\nsuppressPackageStartupMessages(library(configr))\n\n# cluster prophages to get representative phages\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/homology_groups.R\")\nsource(\"scripts/utils/heatmap_utils.R\")\nsource(\"scripts/utils/compare_hg_sets.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\nprophageLenCutoff &lt;- confs$analysis$prophages$cutoff_length\n\noutDir &lt;- confs$analysis$prophages$preprocessing$dir\n\ncolorList &lt;- list(\n  jaccard = list(\n    breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.97, 1),\n    colors = viridisLite::viridis(n = 13, option = \"magma\")\n  ),\n  mash = list(\n    breaks = c(0, 0.03, 0.05, 0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1),\n    colors = viridisLite::viridis(n = 13, option = \"magma\")\n  )\n)"
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#import-data",
    "href": "scripts/analysis/prophage_clustering.html#import-data",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId\n)\n\nphagesRaw &lt;- suppressMessages(readr::read_tsv(confs$data$prophages$files$data)) %&gt;% \n  dplyr::select(prophage_id, taxonomy, completeness, checkv_quality, genomeId)\n\nphagesConsolidated &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$consolidated)\n)\n\nmergedPhages &lt;- dplyr::filter(phagesConsolidated, filtered != 1)\n\n# get aditional information for fragmented prophages\nfragmented &lt;- dplyr::filter(mergedPhages, nFragments &gt; 1) %&gt;% \n  dplyr::filter(jaccardIndex &gt;= 0.5 & perSharedChild &gt;= 0.8) %&gt;% \n  dplyr::select(prophage_id, fragments, nFragments, prophage_length, nHg, parent) %&gt;% \n  dplyr::mutate(fragments = stringr::str_split(fragments, \";\")) %&gt;% \n  tidyr::unnest(fragments) %&gt;% \n  dplyr::left_join(\n    y = phagesRaw, by = c(\"fragments\" = \"prophage_id\")\n  ) %&gt;% \n  dplyr::group_by(prophage_id, nFragments, prophage_length, nHg, parent) %&gt;% \n  dplyr::summarize(\n    fragments = paste(fragments, collapse = \";\"),\n    taxonomy = paste(unique(taxonomy), collapse = \"&\"),\n    completeness = sum(completeness),\n    checkv_quality = paste(\"merged:\", checkv_quality, collapse = \",\", sep = \" \"),\n    genomeId = unique(genomeId),\n    .groups = \"drop\"\n  ) %&gt;% \n  dplyr::mutate(\n    completeness = pmin(98, completeness)\n  )\n\nunfragPhages &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$filtered)\n) %&gt;%\n  dplyr::select(\n    prophage_id, prophage_length, nHg, genomeId, completeness,\n    checkv_quality, taxonomy\n  ) \n\nsimDf &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$pair_comparison)\n)\n\n# read prophage HGs stored locally\nproHgs &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$raw_prophage_hg)\n) %&gt;%\n  dplyr::select(prophage_id = id, hgs) %&gt;%\n  dplyr::mutate(\n    hgs = stringr::str_split(hgs, \";\")\n  )\n\nmashMat &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$mash_dist)\n) %&gt;%\n  tibble::column_to_rownames(var = \"prophage_id\") %&gt;%\n  as.matrix()\n\nmashMat &lt;- mashMat[unfragPhages$prophage_id, unfragPhages$prophage_id]\n\nmashUpgma &lt;- ape::read.tree(confs$analysis$prophages$preprocessing$files$mash_hclust)"
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#process-syntenic-jaccard-similarity-and-mash-distance-data",
    "href": "scripts/analysis/prophage_clustering.html#process-syntenic-jaccard-similarity-and-mash-distance-data",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Process syntenic Jaccard similarity and MASH distance data",
    "text": "Process syntenic Jaccard similarity and MASH distance data\n\n\nCode\n# process data\nphageCmpDf &lt;- dplyr::bind_rows(\n  simDf,\n  dplyr::rename(simDf, p2 = phage1, p1 = phage2) %&gt;%\n    dplyr::rename(phage1 = p1, phage2 = p2)\n)\n\nallPhageJaccardMat &lt;- tidyr::pivot_wider(\n  phageCmpDf,\n  id_cols = phage1,\n  names_from = phage2,\n  values_from = jaccardIndex\n) %&gt;%\n  tibble::column_to_rownames(var = \"phage1\") %&gt;%\n  as.matrix()\n\njaccardMat &lt;- allPhageJaccardMat[unfragPhages$prophage_id, unfragPhages$prophage_id]\n\nif (all(is.na(diag(jaccardMat)))) {\n  diag(jaccardMat) &lt;- 1\n}\n\nif (!isSymmetric(jaccardMat)) {\n  stop(\"pairwise Jaccard index matrix is not symmetric\")\n}\n\n# convert to distance matrix\njacDistMat &lt;- max(jaccardMat) - jaccardMat\n\nquantile(jaccardMat, c(0, 0.25, 0.5, 0.75, seq(0.9, 0.99, by = 0.01), 0.995, 1))\n\n\n    0%    25%    50%    75%    90%    91%    92%    93%    94%    95%    96% \n0.0000 0.0000 0.0000 0.0000 0.2647 0.6296 0.6800 0.7200 0.7391 0.7500 0.7826 \n   97%    98%    99%  99.5%   100% \n0.8000 0.8261 0.9000 0.9524 1.0000"
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#hierarchical-clustering-of-jaccard-similarity",
    "href": "scripts/analysis/prophage_clustering.html#hierarchical-clustering-of-jaccard-similarity",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Hierarchical clustering of Jaccard similarity",
    "text": "Hierarchical clustering of Jaccard similarity\n\n\n\n\n\n\nImportant\n\n\n\nTo remove the noise while clustering, exclude all the prophages that show syntenic Jaccard index 0.5 or lower against other prophages.\n\n\nCode\nbreakPoint &lt;- 0.5\ntempJcMat &lt;- jaccardMat\ndiag(tempJcMat) &lt;- NA\nmaxJc &lt;- matrixStats::rowMaxs(tempJcMat, na.rm = TRUE, useNames = TRUE)\n\nnoisyNodes &lt;- which(maxJc &lt;= breakPoint)\ntrimmedNodes &lt;- which(maxJc &gt; breakPoint)\ntrimmedJaccardMat &lt;- jaccardMat[unname(trimmedNodes), unname(trimmedNodes)]\n\n\n\n\nA heatmap showing the syntenic Jaccard index between the singleton nodes identified above and the remaining nodes that will be used for clustering.\n\n\nCode\nht_noise &lt;- Heatmap(\n  matrix = jaccardMat[unname(noisyNodes), unname(trimmedNodes)],\n  name = \"noisy_jaccard\",\n  column_title = \"selected nodes for clustering\",\n  row_title = \"excluded singleton prophages\",\n  col = circlize::colorRamp2(\n    breaks = colorList$mash$breaks, colors = colorList$mash$colors\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  use_raster = TRUE, raster_quality = 3,\n  show_row_names = FALSE, show_column_names = FALSE\n)\n\nComplexHeatmap::draw(\n  ht_noise,\n  column_title = \"Syntenic Jaccard index\",\n  column_title_gp = gpar(fontsize = 16, fontface = \"bold\"),\n  heatmap_legend_side = \"bottom\"\n)\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNoisy nodes identified above will be excluded from the hierarchical clustering of the prophages based on syntenic Jaccard index. Later, these noisy nodes will be added as singletons to the clusters identified by hclust.\n\n\n\n\nCode\nphageHc &lt;- hclust(\n  as.dist(jacDistMat[unname(trimmedNodes), unname(trimmedNodes)]),\n  method = \"complete\"\n)\n# plot(phageHc, hang = -1)\n\n# hclust(as.dist(jacDistMat), method = \"ward.D2\") %&gt;%\n#   as.dendrogram() %&gt;%\n#   dendextend::ladderize() %&gt;%\n#   plot(horiz = TRUE)\n\nphageDend &lt;- as.dendrogram(phageHc) %&gt;%\n  dendextend::ladderize()\n\nphageDend %&gt;%\n  dendextend::get_nodes_attr(\"height\") %&gt;%\n  hist()\n\n\n\n\n\nCode\n# dendextend::cutree(as.dendrogram(blacl), h = 0.8) %&gt;% table()\n\nphagePhylo &lt;- ape::as.phylo(phageDend)\n\n\n\n\nCode\nrev(phageDend) %&gt;%\n  plot(\n    horiz = TRUE,\n    main = \"Hierarchical clustering of syntenic Jaccard distance\"\n  )"
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#visualize-the-clusters-with-data",
    "href": "scripts/analysis/prophage_clustering.html#visualize-the-clusters-with-data",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Visualize the clusters with data",
    "text": "Visualize the clusters with data\n\nSyntenic Jaccard distance\n\n\nCode\nht_jaccard &lt;- plot_species_ANI_heatmap(\n  mat = jaccardMat[phagePhylo$tip.label, phagePhylo$tip.label],\n  phy = phagePhylo,\n  name = \"jaccard\",\n  column_title = \"Syntenic Jaccard index\",\n  col = circlize::colorRamp2(\n    breaks = colorList$jaccard$breaks, colors = colorList$jaccard$colors\n  ),\n  show_column_dend = TRUE, column_dend_height = unit(3, \"cm\"),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  use_raster = TRUE, raster_quality = 2\n)\n\n\n\n\n\n\n\n\n\nAdd MASH distance heatmap\n\n\nCode\nht_mash &lt;- plot_species_ANI_heatmap(\n  mat = mashMat[phagePhylo$tip.label, phagePhylo$tip.label],\n  phy = phagePhylo,\n  name = \"mash\",\n  column_title = \"MASH distance\",\n  show_column_dend = FALSE,\n  col = circlize::colorRamp2(\n    breaks = colorList$mash$breaks, colors = colorList$mash$colors\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  use_raster = TRUE, raster_quality = 3\n)\n\nhtList &lt;- ht_jaccard + ht_mash\n\n\n\n\nquartz_off_screen \n                2"
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#cut-tree-to-generate-clusters",
    "href": "scripts/analysis/prophage_clustering.html#cut-tree-to-generate-clusters",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Cut tree to generate clusters",
    "text": "Cut tree to generate clusters\n\n\n\n\n\n\nImportant\n\n\n\nHere, the noisy nodes will be added as singletons to the prophage clusters.\n\n\n\n\nCode\ntreeCut &lt;- dendextend::cutree(tree = phageDend, h = 0.66)\n\nphageGroups &lt;- tibble::enframe(\n  treeCut,\n  name = \"prophage_id\", value = \"phage_grp\"\n) %&gt;%\n  dplyr::bind_rows(\n    tibble::tibble(\n      prophage_id = names(noisyNodes),\n      phage_grp = (1:length(noisyNodes)) + length(unique(treeCut))\n    )\n  ) %&gt;%\n  dplyr::mutate(\n    phage_grp = paste(\"phage_grp_\", phage_grp, sep = \"\")\n  ) %&gt;%\n  dplyr::left_join(unfragPhages, by = \"prophage_id\")\n\n\nFinally, add the rnrow(fragmented)` fragmented prophages which could be mapped to a prophage in the pool with high quality (syntenic-Jaccard index &gt;= 0.5 & perSharedChild &gt;= 0.8) to the respective clusters of their best matching parent prophage.\n\n\nCode\nfragmentsToAdd &lt;- dplyr::left_join(\n  x = fragmented,\n  y = dplyr::select(phageGroups, prophage_id, phage_grp),\n  by = c(\"parent\" = \"prophage_id\")\n) %&gt;% \n  dplyr::select(-parent)\n\nphageGroups &lt;- dplyr::bind_rows(phageGroups, fragmentsToAdd) %&gt;% \n  tidyr::replace_na(list(nFragments = 1)) %&gt;% \n  dplyr::mutate(\n    fragments = dplyr::if_else(is.na(fragments), prophage_id, fragments)\n  ) %&gt;% \n  dplyr::select(prophage_id, phage_grp, fragments, nFragments, everything())\n\n\nCluster representatives are determined based on the mean Jaccard index of cluster members against all members. The cluster member with highest mean Jaccard index against the cluster members is selected as a cluster representative.\nCluster representatives are determined using the following criteria:\n\nCompleteness of the prophages in the cluster determined by checkV (higher -&gt; better)\nmean Jaccard index of the prophage against cluster members\n\nProphages in the cluster are ranked based on these two criteria and the best prophage is selected as the cluster representative.\n\n\nCode\n# get cluster roots\nclusterRoots &lt;- split(x = phageGroups$prophage_id, f = phageGroups$phage_grp) %&gt;%\n  # .[c(\"phage_grp_114\", \"phage_grp_12\", \"phage_grp_131\", \"phage_grp_132\", \"phage_grp_173\", \"phage_grp_174\")] %&gt;%\n  purrr::map_dfr(\n    .f = function(x) {\n      # root -&gt; highest mean Jaccard index across group\n      if (length(x) == 1) {\n        rm &lt;- setNames(object = 1, nm = x)\n      } else {\n        subJc &lt;- allPhageJaccardMat[x, x]\n        diag(subJc) &lt;- NA\n        \n        rm &lt;- matrixStats::rowMeans2(subJc, na.rm = TRUE, useNames = TRUE) %&gt;%\n          sort(decreasing = TRUE) %&gt;%\n          round(digits = 3)\n      }\n      \n      return(\n        tibble::tibble(\n          prophage_id = names(rm),\n          mean_grp_sim = rm,\n          grp_size = length(x),\n        )\n      )\n    }\n  )\n\n\nCombine the clusters with cluster roots.\n\n\nCode\nrootedClusters &lt;- dplyr::left_join(\n  phageGroups, clusterRoots,\n  by = \"prophage_id\"\n) %&gt;%\n  dplyr::group_by(phage_grp) %&gt;%\n  dplyr::arrange(\n    dplyr::desc(completeness),\n    dplyr::desc(prophage_length),\n    dplyr::desc(mean_grp_sim),\n    .by_group = TRUE\n  ) %&gt;%\n  dplyr::mutate(is_root = 1:n()) %&gt;%\n  dplyr::ungroup() %&gt;%\n  dplyr::mutate(\n    is_root = dplyr::if_else(is_root == 1, 1, 0)\n  )\n\nrepresentatives &lt;- dplyr::filter(rootedClusters, is_root == 1) %&gt;% \n  dplyr::left_join(y = proHgs, by = \"prophage_id\")\n\nrootedClusters %&lt;&gt;% dplyr::left_join(\n  y = dplyr::select(representatives, phage_grp, root_id = prophage_id),\n  by = \"phage_grp\"\n)\n\n\n\nClustering statistics\nTotal prophage clusters: 436\nTotal homology groups in prophage representatives: 4493\n\n\nCode\nphageClusters &lt;- dplyr::arrange(\n  rootedClusters,\n  dplyr::desc(grp_size), phage_grp, desc(completeness), desc(mean_grp_sim)\n) %&gt;%\n  dplyr::left_join(\n    y = dplyr::select(\n      sampleInfo, genomeId, sampleId, SpeciesName, nodepath.kmer_upgma,\n      geo_loc_country, host, isolation_source, env_broad_scale, collection_year\n    ),\n    by = \"genomeId\"\n  )\n\nreadr::write_tsv(\n  phageClusters,\n  file = confs$analysis$prophages$files$clusters\n)\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat is the variation in genome ANI of the phages in the same group?\n\n\nIf the clustering is good, the representatives prophages should not have high syntenic Jaccard index against other representative prophages.\n\n\nCode\nrepJacMat &lt;- jaccardMat[representatives$prophage_id, representatives$prophage_id]\n\ndiag(repJacMat) &lt;- NA\n\nmatrixStats::rowMaxs(repJacMat, useNames = TRUE, na.rm = TRUE) %&gt;%\n  sort(decreasing = TRUE) %&gt;%\n  head()\n\n\ng_142.vir_2 g_327.vir_6 g_233.vir_4 g_150.vir_2   g_3.vir_3   g_4.vir_3 \n     0.5333      0.5333      0.5167      0.5167      0.5091      0.5091 \n\n\n\n\nDraw figures again with representatives\n\n\nCode\nrepDend &lt;- hclust(\n  as.dist(\n    jacDistMat[representatives$prophage_id, representatives$prophage_id]\n  ),\n  method = \"complete\"\n) %&gt;% \n  as.dendrogram() %&gt;% \n  dendextend::ladderize()\n\nht_jaccardRep &lt;- plot_species_ANI_heatmap(\n  mat = jaccardMat[representatives$prophage_id, representatives$prophage_id],\n  phy = repDend,\n  name = \"jaccard\",\n  column_title = \"Syntenic Jaccard index for representative prophages\",\n  col = circlize::colorRamp2(\n    breaks = colorList$jaccard$breaks, colors = colorList$jaccard$colors\n  ),\n  use_raster = TRUE, raster_quality = 2,\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  )\n)\n\nht_mashRep &lt;- plot_species_ANI_heatmap(\n  mat = mashMat[representatives$prophage_id, representatives$prophage_id],\n  phy = repDend,\n  name = \"mash\",\n  column_title = \"MASH distance\",\n  col = circlize::colorRamp2(\n    breaks = colorList$mash$breaks, colors = colorList$mash$colors\n  ),\n  use_raster = TRUE, raster_quality = 2,\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  )\n)\n\nhtListRep &lt;- ht_jaccardRep + ht_mashRep\n\n\n\n\n\n\n\n\n\nVisualize the final dendrogram\nAll the 436 representatives which includes noisy nodes (n = 318) and cluster representatives (n = 118) obtained by clustering 1001 prophages, are visualized in this dendrogram. The later 118 nodes are colored in red.\n\n\nCode\nrev(repDend) %&gt;% \n  dendextend::set(\n    what = \"by_labels_branches_col\",\n    value = setdiff(representatives$prophage_id, names(noisyNodes))\n  ) %&gt;% \n  dendextend::set(\"labels_cex\", 0.5) %&gt;% \n  plot(\n    horiz = TRUE,\n    main = \"Cluster representatives dendrogram\"\n  )"
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html",
    "href": "scripts/notebooks/prophage_analysis.html",
    "title": "",
    "section": "",
    "text": "Code\n# Prophage analysis in Pectobacterium* pangenome"
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#workflow",
    "href": "scripts/notebooks/prophage_analysis.html#workflow",
    "title": "",
    "section": "Workflow",
    "text": "Workflow"
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#detect-prophages-in-pangenome",
    "href": "scripts/notebooks/prophage_analysis.html#detect-prophages-in-pangenome",
    "title": "",
    "section": "Detect prophages in pangenome",
    "text": "Detect prophages in pangenome\n\ngenomad prophage detection\n# run genomad and checkv pipeline\nnohup \\\ncat data/reference_data/assembly_ids.txt | \\\nparallel --jobs 6 --workdir $PWD --halt now,fail=1 \\\n--keep-order --results logs/genomad/{} \\\n--joblog logs/genomad/parallel.log \\\nscripts/preprocessing/genomad_prophage_annotation.sh {} \\\n&gt;&gt;logs/genomad/nohup.out 2&gt;&1 &\n\n# count of prophage detected in each genome\nfor i in `cat data/reference_data/assembly_ids.txt`\ndo\n  printf \"$i\\t\"\n  tail -n +2 data/prophage_genomad/$i/${i}_summary/${i}_virus_summary.tsv | wc -l\ndone | sort -nr -k2\nCheck the checkV contamination.tsv file to see if there is any other contamination than the expected host,viral, viral,host and host,viral,host ones.\nfor cn in `find -name '*contamination.tsv'`\ndo\ncat $cn | awk '$9 != \"NA\" && NR != 1 && $9 != \"host,viral\" && $9 != \"viral,host\" && $9 != \"host,viral,host\"'\ndone\n\n\nPost processing of prophages\nProcess genomad output and separate prophages into independent FASTA files. Each prophage is assigned a unique identifier with format g_{genome}.vir_{#count}. Prophages are saved in independent FASTA files for downstream analysis, for e.g. ANI clustering of prophages.\n# post processing of prophage data\nRscript scripts/preprocessing/genomad_checkv_merge.R\n\n# save prophages independently\nbash scripts/preprocessing/prophage_genomes_extract.sh\nExtract homology groups for prophages from the pangenome org.db object.\nRscript scripts/analysis/prophage_homology_groups.R\nRun ANI on prophage genomes to identify the representative prophages in the pangenome.\nconda activate pantools_v4_3\n\n# list prophage FASTA files\nls data/prophage_genomad/phage_seqs/*.fna  &gt; data/prophage_genomad/prophage_fasta.list\n\n# run fastANI\nfastANI --ql data/prophage_genomad/prophage_fasta.list \\\n--rl data/prophage_genomad/prophage_fasta.list \\\n--threads 30 --matrix --visualize --fragLen 500 \\\n-o data/prophage_genomad/prophage_ANI\n\n# use mash for distance estimation\nmkdir data/prophage_genomad/mash\n\nmash sketch -p 30 -s 15000 -k 17 -o data/prophage_genomad/mash/prophages_ref \\\n-l data/prophage_genomad/prophage_fasta.list &gt;logs/prophage/mash.log 2&gt;&1\n\nmash info data/prophage_genomad/mash/prophages_ref.msh &gt; \\\ndata/prophage_genomad/mash/prophage_sketch_info.txt\n\nmash dist -p 30 data/prophage_genomad/mash/prophages_ref.msh \\\ndata/prophage_genomad/mash/prophages_ref.msh &gt; \\\ndata/prophage_genomad/mash/prophage_distance.tab\n\n\nQC\nIdentify the fragmented prophages resulting because of the genome assembly that can be merged into a complete prophage. Prepare a consolidated list of prophages which will be used for the subsequent analysis.\nRscript scripts/analysis/prophage_merge.R\nSummarize the consolidated prophage list to generate various statistics and generate summary plots. Prophages that are fragmented or smaller than the length cutoff are removed and the filtered list of prophages is saved for downstream analysis.\nRscript scripts/analysis/prophage_summary.R\nProcess prophage MASH and ANI results and visualize MASH similarity matrix for the filtered prophages.\nRscript scripts/analysis/prophage_seq_similarity.qmd"
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#cluster-prophages",
    "href": "scripts/notebooks/prophage_analysis.html#cluster-prophages",
    "title": "",
    "section": "Cluster prophages",
    "text": "Cluster prophages\nUse shared homology groups between two prophages to establish the child-parent relationship between the prophages in pangenome. First, all vs all syntenic Jaccard similarity is calculated between the prophages. This information is later used to cluster the prophages using two different approaches.\nRscript scripts/analysis/prophage_pairwise_similarity.R\n\nApproach 1\nA heuristic DAG construcion is extracted from the output of the script scripts/analysis/prophage_merge.R. This output includes a best matching parent prophage for each prophage. This is further processed to build a DAG and visualize the clusters.\nPost processing of the child-parent relationships to add additional metadata and save a DAG in tabular format:\nRscript scripts/analysis/prophage_DAG_postprocess.R\nVisualize the clusters of prophages as directed acyclic graphs:\nknitr::knit(\"scripts/analysis/prophage_DAG_viz.qmd\")\n\n\nApproach 2\nWe first tried to use the Affinity propagation (AP) clustering to group the prophages into clusters and have a set of cluster representatives. However, we encountered some clusters generated by the AP clustering where the cluster members did not even share a homology group. Therefore, we decided not to use AP clustering.\nknitr::knit(\"scripts/analysis/prophage_AP_clustering.qmd\")\nCluster the all-vs-all syntenic Jaccard distance matrix using “complete” linkage hierarchical clustering and cut the cluster using carotovoricin cluster as a reference.\nknitr::knit(\"scripts/analysis/prophage_clustering.qmd\")\n\n\nSummarize prophage clusters\nSummarize the representative prophages in the pangenome.\nRscript scripts/analysis/prophage_representative_summary.qmd\nVisualize the representative prophages across pangenome. Use MASH distance to cluster prophages and ANI distance to cluster the genomes in the pangenome.\nRscript scripts/analysis/prophage_pangenome_viz.qmd\nVisualize homology group sets for selected prophages as PAV heatmap across the pangenome. Replace the code block in scripts/analysis/homology_group_viz.R script with the following.\nanalysisName &lt;- \"vir_lineage_prophages\"\n\noutDir &lt;- file.path(confs$analysis$prophages$dir)\noutPrefix &lt;- file.path(outDir, analysisName)\n\nsetIds &lt;- c(\n  \"g_189.vir_2\", \"g_400.vir_2\", \"g_399.vir_2\", \"g_448.vir_2\", \"g_189.vir_1\", \n  \"g_3.vir_4\", \"g_438.vir_3\", \"g_350.vir_1\",\n  \"g_172.vir_2\", \"g_393.vir_1\"\n)\nFinally, run the script to generate the plot.\nRscript scripts/analysis/homology_group_viz.R"
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#individual-prophage-cluster-analysis",
    "href": "scripts/notebooks/prophage_analysis.html#individual-prophage-cluster-analysis",
    "title": "",
    "section": "Individual prophage cluster analysis",
    "text": "Individual prophage cluster analysis\nScript scripts/analysis/clustersmap_data_prophages.R is used to combine the prophages, homology groups and phylogeny to generate input for clustermap.js visualization tool and generate a report. Below, some configuration is provided for individual prophage clusters.\n\nphage_grp_46: highly conserved in all but 5 genomes from n23 clade\ngrpToView &lt;- \"phage_grp_46\"\nsubSample &lt;- TRUE\ncutHeight &lt;- 0.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\"  # completeness, host, hg_pav, cluster_mash\n\n\nphage_grp_45: prophage present in all BL-causing isolates\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22429319,hg_22429327 \\\n--genomes \"g_406\"\ngrpToView &lt;- \"grp_45_mosaicsm\"\nsubSample &lt;- TRUE \ncutHeight &lt;- 0.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 7000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\" # host, hg_pav, cluster_mash\n\n# a vector of prophage identifiers that will be included in clustermap plot\nappendPhages &lt;- c()\n\n# whether to keep custom regions at the bottom or consider during phylogeny\n# based ordering\nregions_phy_ordered &lt;- FALSE\n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_406_reg = list(\n    chr = \"NAK641_contig_10_consensus\", start = 671040, end = 674984, genomeId = \"g_406\"\n  )\n)\n\n\n# optionally, a custom region list can be provided to generate the plot\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = c(\"g_302.vir_1\", \"g_399.vir_1\", \"g_400.vir_2\")\n)\n\n\nphage_grp_71\ngrpToView &lt;- \"phage_grp_71\"\nsubSample &lt;- FALSE\naddFlankingRegions &lt;- TRUE \nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"hg_pav\"  # completeness, host, hg_pav, cluster_mash\n\n\nphage_grp_107\ngrpToView &lt;- \"phage_grp_107\"\nsubSample &lt;- TRUE\ncutHeight &lt;- 0.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\"  # completeness, host, hg_pav, cluster_mash\n\n\nBL-causing clade specific signatures\ngrpToView &lt;- \"Pbr_FN_specific\"\nsubSample &lt;- FALSE\ncutHeight &lt;- 0.5\naddFlankingRegions &lt;- FALSE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"default\"  # completeness, host, hg_pav, cluster_mash, default\n\n\n# optionally, a custom region list can be provided to generate the plot\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = c(\"g_302.vir_1\", \"g_400.vir_2\", \"g_409.vir_1\", \"g_302.vir_2\")\n)\n\n\nphage_grp_36\ngrpToView &lt;- \"phage_grp_36\"\nsubSample &lt;- FALSE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\" # completeness, host, hg_pav, cluster_mash\n\n\nphage_grp_50\ngrpToView &lt;- \"phage_grp_50\"\nsubSample &lt;- FALSE\naddFlankingRegions &lt;- TRUE \nflankingRegion &lt;- 10000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"cluster_mash\"  # completeness, host, hg_pav, cluster_mash\n\n\nphage_grp_21\ngrpToView &lt;- \"phage_grp_21\"\nsubSample &lt;- FALSE\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"cluster_mash\"  # completeness, host, hg_pav, cluster_mash\n\n\nT3SS missing from 4 P. brasiliense genomes\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22430875,hg_22430876 --genomes g_187,g_368,g_182,g_185,g_236,g_177\ngrpToView &lt;- \"t3ss_regions\"\nsubSample &lt;- FALSE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 6000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\"  # completeness, host, hg_pav, cluster_mash\n\n# a vector of prophage identifiers that will be included in clustermap plot\nappendPhages &lt;- c()\n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_177_reg  = list(genomeId = \"g_177\", chr = \"NZ_JACGEP010000027.1\", start = 56850, end = 59337),\n  g_182_reg = list(genomeId = \"g_182\", chr = \"NZ_JACGZZ010000068.1\", start = 116773, end = 119260),\n  g_185_reg = list(genomeId = \"g_185\", chr = \"NZ_JACGEN010000027.1\", start = 117747, end = 120234),\n  g_236_reg = list(genomeId = \"g_236\", chr = \"NZ_JACDSF010000026.1\", start = 2275, end = 4762),\n  g_187_reg = list(genomeId = \"g_187\", chr = \"NZ_CP059963.1\", start = 2603432, end = 2605919),\n  g_368_reg = list(genomeId = \"g_368\", chr = \"NZ_JUJT01000001.1\", start = 566617, end = 569104)\n)\n\n# whether to keep custom regions at the bottom or consider during phylogeny\n# based ordering\nregions_phy_ordered &lt;- TRUE"
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#carotovoricin-ctv-cluster-or-phage_grp_1-data-analysis",
    "href": "scripts/notebooks/prophage_analysis.html#carotovoricin-ctv-cluster-or-phage_grp_1-data-analysis",
    "title": "",
    "section": "Carotovoricin (CTV) cluster or phage_grp_1 data analysis",
    "text": "Carotovoricin (CTV) cluster or phage_grp_1 data analysis\n\nCTV across pangenome\ngrpToView &lt;- \"phage_grp_1\"\nsubSample &lt;- TRUE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\"  # completeness, host, hg_pav, cluster_mash\n\n\nCTV in type strains\nInclude P. atrosepticum (g_385), P. betavasculorum (g_386) and P. cacticida (g_451) genomes that lack CTV cluster.\ngrpToView &lt;- \"ctv_typeStrains\"\nsubSample &lt;- FALSE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 6000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\"  # completeness, host, hg_pav, cluster_mash\n\n# a vector of prophage identifiers that will be included in clustermap plot\nappendPhages &lt;- c()\n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_385_reg = list(\n    chr = \"NZ_JQHK01000003.1\", start = 203963, end = 207120, genomeId = \"g_385\"\n  ),\n  g_386_reg = list(\n    chr = \"NZ_JQHM01000001.1\", start = 553213, end = 555615, genomeId = \"g_386\"\n  ),\n  g_451_reg = list(\n    chr = \"Contig_2_668.636\", start = 191452, end = 191490, genomeId = \"g_451\"\n  )\n)\n\n# whether to keep custom regions at the bottom or consider during phylogeny\n# based ordering\nregions_phy_ordered &lt;- TRUE\n\n\n\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = c(\n    \"g_345.vir_1\", \"g_446.vir_4\", \"g_66.vir_3\", \"g_222.vir_2\", \"g_365.vir_3\",\n    \"g_442.vir_1\", \"g_8.vir_2\", \"g_38.vir_2\", \"g_273.vir_2\", \"g_259.vir_4\",\n    \"g_305.vir_1\", \"g_378.vir_6\", \"g_428.vir_1\", \"g_248.vir_1\", \"g_449.vir_1\",\n    \"g_54.vir_1\", \"g_116.vir_3\", \"g_423.vir_3\", \"g_375.vir_2\", \"g_381.vir_2\"\n  )\n)\n\n\nCarotovoricin cluster missing from genomes\ngrpToView &lt;- \"ctv_deletion\"\nsubSample &lt;- TRUE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\"  # completeness, host, hg_pav, cluster_mash\n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_177_reg = list(\n    chr = \"NZ_JACGEP010000002.1\", start = 102351, end = 102361, genomeId = \"g_177\"\n  ),\n  g_182_reg = list(\n    chr = \"NZ_JACGZZ010000050.1\", start = 81625, end = 81635, genomeId = \"g_182\"\n  ),\n  g_185_reg = list(\n    chr = \"NZ_JACGEN010000006.1\", start = 81657, end = 81667, genomeId = \"g_185\"\n  ),\n  g_236_reg = list(\n    chr = \"NZ_JACDSF010000027.1\", start = 89639, end = 89649, genomeId = \"g_236\"\n  ),\n  g_385_reg = list(\n    chr = \"NZ_JQHK01000003.1\", start = 203963, end = 207120, genomeId = \"g_385\"\n  ),\n  g_386_reg = list(\n    chr = \"NZ_JQHM01000001.1\", start = 553213, end = 555615, genomeId = \"g_386\"\n  ),\n  g_451_reg = list(\n    chr = \"Contig_2_668.636\", start = 191452, end = 191490, genomeId = \"g_451\"\n  )\n)\n\n\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = c(\n    \"g_345.vir_1\", \"g_66.vir_3\", \"g_8.vir_2\", \"g_381.vir_2\"\n  )\n)\n\n\ncarotovoricin cluster absent in some P. brasiliense isolates\nybiB: hg_22427603\ntolC_2: hg_22427641\nP. brasiliense lacking CTV cluster: g_149, g_177, g_182, g_185, g_236\ngrpToView &lt;- \"ctv_pbr\"\nsubSample &lt;- TRUE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"cluster_mash\"  # completeness, host, hg_pav, cluster_mash\n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_177_reg = list(\n    chr = \"NZ_JACGEP010000002.1\", start = 102351, end = 102361, genomeId = \"g_177\"\n  ),\n  g_182_reg = list(\n    chr = \"NZ_JACGZZ010000050.1\", start = 81625, end = 81635, genomeId = \"g_182\"\n  ),\n  g_185_reg = list(\n    chr = \"NZ_JACGEN010000006.1\", start = 81657, end = 81667, genomeId = \"g_185\"\n  ),\n  g_236_reg = list(\n    chr = \"NZ_JACDSF010000027.1\", start = 89639, end = 89649, genomeId = \"g_236\"\n  )\n)\n\n\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = dplyr::filter(\n    regionClusters,\n    SpeciesName == \"P. brasiliense\", nFragments == 1, phage_grp == \"phage_grp_1\",\n    !prophage_id %in% c(\"g_408.vir_3\", \"g_403.vir_3\", \"g_399.vir_3\")\n  ) %&gt;%\n    dplyr::pull(prophage_id)\n)\nProphage clusters found in the ctv-lacking Pbr: phage_grp_30, phage_grp_6, phage_grp_29\n\n\nCTV in P. versatile\ngrpToView &lt;- \"ctv_pvs\"\nsubSample &lt;- TRUE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = dplyr::filter(\n    regionClusters,\n    SpeciesName == \"P. versatile\", nFragments == 1, phage_grp == \"phage_grp_1\"\n  ) %&gt;%\n    dplyr::pull(prophage_id)\n)\n\n\nCTV cluster in P. versatile collected from France\ngrpToView &lt;- \"ctv_pvs_fr\"\nsubSample &lt;- TRUE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = dplyr::filter(\n    regionClusters,\n    SpeciesName == \"P. versatile\", nFragments == 1, phage_grp == \"phage_grp_1\",\n    geo_loc_country == \"France\"\n  ) %&gt;%\n    dplyr::pull(prophage_id)\n)"
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#carotovoricin-tail-fiber-variation-region-msa",
    "href": "scripts/notebooks/prophage_analysis.html#carotovoricin-tail-fiber-variation-region-msa",
    "title": "",
    "section": "Carotovoricin tail fiber variation region MSA",
    "text": "Carotovoricin tail fiber variation region MSA\nExtract the region between the two homology groups, hg_22427604 and hg_22427603 for the carotovoricin cluster. Additionally, generate GFF3 files with the homology group, COG, PFAM and other metadata information to visualize.\n# Rscript scripts/analysis/clustermap_get_regions.R\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427604,hg_22427603 \\\n--genomes \"g_302,g_364,g_337,g_439,g_403,g_399,g_408,g_175,g_138,g_368,g_345,\\\ng_366,g_308,g_191,g_173,g_155,g_166,g_299,g_438,g_263,g_43,g_391\" \\\n--out ctv_pbr.variable_regions.tab \\\n--dir analysis/pangenome_v2/prophages/cluster_viz/ctv_pbr\n\n# create CTV regions GFF3 files for one species representative each\nRscript scripts/utils/HGs_gff_from_regions.R \\\n--regions analysis/pangenome_v2/carotovoricin/tail_region/hg_regions.tab\nExtract DNA sequence for these 3’ tail fiber regions.\nmkdir analysis/pangenome_v2/prophages/cluster_viz/ctv_pbr/region_fasta\n\ntail -n +2 analysis/pangenome_v2/prophages/cluster_viz/ctv_pbr/ctv_pbr.variable_regions.tab |\n  cut -f 1,3-5 |\n  while read name sampleId pos strand; do\n    rc=\"\"\n    if [ ${strand} == \"-\" ]; then\n        rc=\"--reverse-complement\"\n    fi\n    outFa=\"analysis/pangenome_v2/prophages/cluster_viz/ctv_pbr/region_fasta/${name}.fasta\"\n\n    seq=\"&gt;${name} ${pos}(${strand})\\n\"\n    seq+=`samtools faidx ${rc} data/prokka_annotation/${sampleId}/${sampleId}.fna $pos | tail -n +2`\n    printf \"${seq}\\n\" &gt; ${outFa}\n    printf \"${seq}\\n\"\n  done &gt;analysis/pangenome_v2/prophages/cluster_viz/ctv_pbr/ctv_pbr.variable_regions.fasta\nMauve aligns sequences provided in fasta and genbank format. However, the sequence annotation is shown only if the alignment input was in genbank format. Therefore, we need to combine the homology group annotation in gff3 format with the fasta sequences to generate a genbank formatted files. To do this, Emboss tool seqret was used.\nconda activate omics_py37\n\ncd analysis/pangenome_v2/prophages/cluster_viz/ctv_pbr/region_fasta\n\nfor vir in `cut -f 1 ../ctv_pbr.variable_regions.tab | tail -n +2`\ndo\n  seqret -sequence ${vir}.fasta -feature -fformat gff3 \\\n  -fopenfile ${vir}.gff3 -osformat genbank -osextension gbk \\\n  -osname_outseq ${vir} -ofdirectory_outseq gbk_file -auto \ndone\n\nsed -i.bak -r -e 's/(^\\s+CDS\\s+(complement\\()?)[^:]+:([[:digit:]]+\\.\\.[[:digit:]]+\\)?).*/\\1\\3/' \\\n  -e 's/\\/note=\"\\*([^:]+): /\\/\\1=\"/' *.gbk \nAlign and visualize sequences using Mauve.\nmauve_out=\"ctv_pbr\"\n\n/Applications/Mauve.app/Contents/MacOS/progressiveMauve \\\n--output=\"${mauve_out}.mauve.xmfa\" \\\n--backbone-output=\"${mauve_out}.mauve.backbone\" \\\n--output-guide-tree=\"${mauve_out}.mauve.guide_tree.newick\" \\\nregion_fasta/g_302.vir_3.gbk region_fasta/g_364.vir_2.gbk \\\nregion_fasta/g_337.vir_1.gbk region_fasta/g_439.vir_2.gbk \\\nregion_fasta/g_403.vir_3.gbk region_fasta/g_399.vir_3.gbk \\\nregion_fasta/g_175.vir_3.gbk region_fasta/g_408.vir_3.gbk \\\nregion_fasta/g_138.vir_2.gbk \\\nregion_fasta/g_368.vir_3.gbk region_fasta/g_345.vir_1.gbk \\\nregion_fasta/g_366.vir_3.gbk region_fasta/g_308.vir_2.gbk \\\nregion_fasta/g_191.vir_1.gbk region_fasta/g_173.vir_2.gbk \\\nregion_fasta/g_155.vir_1.gbk region_fasta/g_166.vir_2.gbk \\\nregion_fasta/g_299.vir_1.gbk region_fasta/g_438.vir_2.gbk \\\nregion_fasta/g_263.vir_2.gbk region_fasta/g_43.vir_1.gbk \\\nregion_fasta/g_391.vir_3.gbk  &gt; \"${mauve_out}\".log 2&gt;&1\n\nmauve_out=\"ctv_pbr.ein\"\n\n/Applications/Mauve.app/Contents/MacOS/progressiveMauve \\\n--output=\"${mauve_out}.mauve.xmfa\" \\\n--backbone-output=\"${mauve_out}.mauve.backbone\" \\\n--output-guide-tree=\"${mauve_out}.mauve.guide_tree.newick\" \\\nregion_fasta/g_345.vir_1.gbk region_fasta/g_366.vir_3.gbk \\\nregion_fasta/g_308.vir_2.gbk region_fasta/g_191.vir_1.gbk \\\nregion_fasta/g_173.vir_2.gbk region_fasta/g_155.vir_1.gbk \\\nregion_fasta/g_166.vir_2.gbk  &gt; \"${mauve_out}\".log 2&gt;&1\n\n\nmauve_out=\"ctv_pbr.rep\"\n\n/Applications/Mauve.app/Contents/MacOS/progressiveMauve \\\n--output=\"${mauve_out}.mauve.xmfa\" \\\n--backbone-output=\"${mauve_out}.mauve.backbone\" \\\n--output-guide-tree=\"${mauve_out}.mauve.guide_tree.newick\" \\\nregion_fasta/g_302.vir_3.gbk region_fasta/g_337.vir_1.gbk \\\nregion_fasta/g_175.vir_3.gbk region_fasta/g_173.vir_2.gbk \\\nregion_fasta/g_299.vir_1.gbk region_fasta/g_438.vir_2.gbk \\\nregion_fasta/g_391.vir_3.gbk  &gt; \"${mauve_out}\".log 2&gt;&1\nPerform MSA using MAFFT\nconda activate pantools_v4_3\ncd analysis/pangenome_v2/prophages/cluster_viz/ctv_pbr/\n\nmafft --globalpair --quiet --maxiterate 1000 --treeout ctv_pbr.variable_regions.fasta\nSmash++ pairwise sequence comparison\nconda activate omics_py37\n\ncd analysis/pangenome_v2/prophages/cluster_viz/ctv_pbr/region_fasta\n\nfunction smashpp_compare\n{\n  smashpp -r $1 -t $2\n  smashpp viz -o $(basename $1 .fasta)$(basename $2 .fasta)\".svg\" \"${1}.${2}.pos\"\n}\n\nexport -f smashpp_compare\n\nsmashpp_compare g_345.vir_1.fasta g_345.vir_1.fasta \nsmashpp_compare g_345.vir_1.fasta g_366.vir_3.fasta \nsmashpp_compare g_345.vir_1.fasta g_302.vir_3.fasta\nsmashpp_compare g_345.vir_1.fasta g_403.vir_3.fasta\nsmashpp_compare g_345.vir_1.fasta g_173.vir_2.fasta\nsmashpp_compare g_345.vir_1.fasta g_138.vir_2.fasta\nsmashpp_compare g_345.vir_1.fasta g_263.vir_2.fasta\nsmashpp_compare g_345.vir_1.fasta g_155.vir_1.fasta\nLeft inverted repeat for Ein: CTCCCGCAAACCTCGGTTTTGGGGAC (CTCCCGCAAACCTCGGTTT)\nLeft inverted repeat for Ein(rev-com): GTCCCCAAAACCGAGGTTTGCGGGAG (AAACCGAGGTTTGCGGGAG, AAACCGAGGTTTGCG)\nRight inverted repeat for Ein: TTCTCGCAAACCTCGGTTTTGGAGAA\nRight inverted repeat for Ein(rev): AAGAGGTTTTGGCTCCAAACGCTCTT\nRight inverted repeat for Ein(rev-com): TTCTCCAAAACCGAGGTTTGCGAGAA (AAACCGAGGTTTGCGAGAA, AAACCGAGGTTTGCG)\nRight inverted repeat for Ein(comp): AAGAGCGTTTGGAGCCAAAACCTCTT"
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#inter-species-horizontal-gene-transfer-of-ctv",
    "href": "scripts/notebooks/prophage_analysis.html#inter-species-horizontal-gene-transfer-of-ctv",
    "title": "",
    "section": "Inter-species horizontal gene transfer of CTV",
    "text": "Inter-species horizontal gene transfer of CTV\nClustermap visualization for some manually selected candidates. Change the code blocks in the script scripts/analysis/clustersmap_data_prophages.R and run.\ngrpToView &lt;- \"ctv_hgt\"\nsubSample &lt;- FALSE \ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"hg_pav\" # completeness, host, hg_pav, cluster_mash\n\n\n# optionally, a custom region list can be provided to generate the plot\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = c(\n    \"g_145.vir_1\", \"g_194.vir_1\", \"g_429.vir_1\", \"g_442.vir_1\", \"g_421.vir_1\", \n    \"g_150.vir_4\", \"g_447.vir_1\", \"g_434.vir_4\",\n    \"g_221.vir_3\", \"g_53.vir_3\", \"g_106.vir_2\", \"g_57.vir_1\", \"g_125.vir_1\"\n  )\n)\nRun script scripts/utils/HG_range_coordinates.R to extract genomic coordinates for CTV region in selected genomes.\nComplete CTV region along with 3 flanking genes:\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427643,hg_22427599 \\\n--inner_region --dir analysis/pangenome_v2/carotovoricin/ctv_region\n\n# create GFF3 files for CTV regions of interest\nRscript scripts/utils/HGs_gff_from_regions.R \\\n--regions analysis/pangenome_v2/carotovoricin/ctv_region/hg_regions.tab \\\n--genomes g_145,g_194,g_429,g_442,g_421,g_150,g_447,g_434,g_53,g_106,g_57,g_221,g_125\n\n# create CTV regions GFF3 files for one species representative each\nRscript scripts/utils/HGs_gff_from_regions.R \\\n--regions analysis/pangenome_v2/carotovoricin/ctv_region/hg_regions.tab \\\n--genomes g_183,g_423,g_277,g_375,g_116,g_449,g_446,g_378,g_296,g_428,g_259,g_66,g_337,g_442,g_305,g_381,g_8,g_273,g_38\nCTV conserved loci:\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427640,hg_22427604 \\\n--dir analysis/pangenome_v2/carotovoricin/ctv_conserved\nCTV variable loci:\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427604,hg_22427603 \\\n--inner_region --dir analysis/pangenome_v2/carotovoricin/ctv_tail --haplotypes\nCTV tape measure protein gene:\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427622,hg_22427616 \\\n--haplotypes --inner_region --overlapping \\\n--dir analysis/pangenome_v2/carotovoricin/tape_measure\nRun scripts/analysis/ctv_hgt.qmd script to perform HGT analysis.\n\nDNA sequence comparison\n\nExtract DNA sequence for the regions\n# file_regions=\"analysis/pangenome_v2/carotovoricin/ctv_tail/hg_regions.tab\"\n# file_regions=\"analysis/pangenome_v2/carotovoricin/ctv_conserved/hg_regions.tab\"\n# file_regions=\"analysis/pangenome_v2/carotovoricin/ctv_tail/selected_haplotypes.tab\"\n# file_regions=\"analysis/pangenome_v2/carotovoricin/ctv_tail/selected_haplotypes_flanking.tab\"\n# file_regions=\"analysis/pangenome_v2/carotovoricin/ctv_conserved/selected_conserved.tab\"\n# file_regions=\"analysis/pangenome_v2/carotovoricin/upstream_core/selected_upstream.tab\"\n\ndir_path=$(dirname \"${file_regions}\")\nout_fasta=\"${file_regions%.*}\".fasta\n\ntail -n +2 ${file_regions} |\n  cut -f 1,3-5 |\n  while read name sampleId pos strand; do\n    rc=\"\"\n    if [ ${strand} == \"-\" ]; then\n        rc=\"--reverse-complement\"\n    fi\n    outFa=\"${dir_path}/fasta/${name}.fasta\"\n\n    seq=\"&gt;${name}\\n\"\n    seq+=`samtools faidx ${rc} data/prokka_annotation/${sampleId}/${sampleId}.fna $pos | tail -n +2`\n\n    # printf \"${seq}\\n\" &gt; ${outFa}\n    printf \"${seq}\\n\"\n  done &gt; ${out_fasta}\n\n\nCalculate the distance using mash\ncd analysis/pangenome_v2/carotovoricin/ctv_tail\nmash dist -p 8 -k 12 -s 2000 -i -S 124 hg_regions.fasta hg_regions.fasta &gt; mash_dist.tab\n\ncd analysis/pangenome_v2/carotovoricin/ctv_conserved\nmash dist -p 8 -k 12 -s 2000 -i -S 124 hg_regions.fasta hg_regions.fasta &gt; mash_dist.tab\n\ncd analysis/pangenome_v2/carotovoricin/tape_measure\nmash dist -p 8 -k 12 -s 2000 -i -S 124 hg_regions.fasta hg_regions.fasta &gt; mash_dist.tab\n\ngrep -e 'g_(53|106|57|221|125).*g_(53|106|57|221|125)' ctv_*/ctv_dist.tab\ngrep -e 'g_(150|447|434).*g_(150|447|434)' ctv_*/ctv_dist.tab\ngrep -e 'g_(53|106|57).*g_(53|106|57)' ctv_*/ctv_dist.tab\n\n\nCalculate Jaccard distance matrix using sourmash\nMASH distance is low for haplotype pairs where one is subset of the other, eg, A-B-C-D and A-B. Therefore, another tool was tried to calculate the Jaccard index between sequences.\n# file_fa=\"ctv_conserved/hg_regions.fasta\"\n# file_fa=\"ctv_tail/hg_regions.fasta\"\n\nfile_sig=\"${file_fa%.*}\".sig.zip\nfile_dist=\"${file_fa%.*}\".sourmash.csv\n\n# # sketch: scaled=5\n# sourmash sketch dna -f -p k=7,k=9,k=11,scaled=5,abund,seed=124 --singleton \\\n# -o ${file_sig} ${file_fa}\n\n# sketch: num=2000\nsourmash sketch dna -f -p k=7,k=9,k=11,k=13,num=2000,abund,seed=124 --singleton \\\n-o ${file_sig} ${file_fa}\n\nsourmash compare --ignore-abundance --distance-matrix -p 12 -k 13 --dna \\\n--csv ${file_dist} ${file_sig} \n\n\nCalculate Jaccard distance using dashing\n# dir_fa=\"ctv_conserved/fasta\"\n# dir_fa=\"ctv_tail/fasta\"\n\nfile_dist=\"${dir_fa%/*}/\"distance.dashing.txt\n\ndashing cmp -k 11 --seed 124 --nthreads 12 --full-mash-dist  \\\n-O ${file_dist} ${dir_fa}/*.fasta\n\n\n\nTail fiber haplotype examples\nExtract sequences for some example tail fiber loci haplotypes that are present in multiple Pectobacterium species.\n# tail fiber locus\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427604,hg_22427603 \\\n--genomes \"g_279,g_425,g_149,g_377,g_100,g_106,g_331,g_249,g_125,\\\ng_221,g_53,g_395,g_108,g_444,g_160\" \\\n--dir analysis/pangenome_v2/carotovoricin/ctv_tail \\\n--out \"selected_haplotypes_flanking.tab\"\n\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427604,hg_22427603 \\\n--genomes \"g_279,g_425,g_149,g_377,g_100,g_106,g_331,g_249,g_125,\\\ng_221,g_53,g_395,g_108,g_444,g_160\" \\\n--inner_region --dir analysis/pangenome_v2/carotovoricin/ctv_tail \\\n--out \"selected_haplotypes.tab\" \n\n# conserved CTV locus\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427640,hg_22427604 \\\n--genomes \"g_279,g_425,g_149,g_377,g_100,g_106,g_331,g_249,g_125,\\\ng_221,g_53,g_395,g_108,g_444,g_160\" \\\n--dir analysis/pangenome_v2/carotovoricin/ctv_conserved \\\n--out \"selected_conserved.tab\"\n\n# upstream core\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427642,hg_22427641 \\\n--genomes \"g_279,g_425,g_149,g_377,g_100,g_106,g_331,g_249,g_125,\\\ng_221,g_53,g_395,g_108,g_444,g_160\" \\\n--dir analysis/pangenome_v2/carotovoricin/upstream_core \\\n--out \"selected_upstream.tab\"\nDNA sequence comparison of these regions\n\nPerform MSA using MAFFT\nnohup mafft --reorder --allowshift --unalignlevel 0.2 --leavegappyregion \\\n--maxiterate 0 --globalpair ctv_tail/selected_haplotypes.fasta \\\n&gt; ctv_tail/selected_haplotypes.msa.fasta 2&gt;nohup.out &\n\nnohup mafft --reorder --allowshift --unalignlevel 0.2 --leavegappyregion \\\n--maxiterate 0 --globalpair ctv_conserved/selected_conserved.fasta \\\n&gt; ctv_conserved/selected_conserved.msa.fasta 2&gt;nohup.out &\n\nnohup mafft --reorder --allowshift --unalignlevel 0.2 --leavegappyregion \\\n--maxiterate 0 --globalpair upstream_core/selected_upstream.fasta \\\n&gt; upstream_core/selected_upstream.msa.fasta 2&gt;nohup.out &\nGenerate a maximum-likelihood phylogenetic tree for MSAs\ncd cd analysis/pangenome_v2/carotovoricin/\n\nnohup nice iqtree2 -T 40 -s ctv_tail/selected_haplotypes.msa.fasta -B 1000 \\\n--prefix ctv_tail/iqtree/selected_haplotypes.msa.fasta &gt;&gt; iqtree_tree.log 2&gt;&1 &\n\nnohup nice iqtree2 -T 40 -s ctv_conserved/selected_conserved.msa.fasta -B 1000 \\\n--prefix ctv_conserved/iqtree/selected_conserved.msa.fasta &gt;&gt; iqtree_tree.log 2&gt;&1 &\n\nnohup nice iqtree2 -T 40 -s upstream_core/selected_upstream.msa.fasta -B 1000 \\\n--prefix upstream_core/iqtree/selected_upstream.msa.fasta &gt;&gt; iqtree_tree.log 2&gt;&1 &\n\n\n\nUse Mauve to detect the structural variation and consevation\nMauve aligns sequences provided in fasta and genbank format. However, the sequence annotation is shown only if the alignment input was in genbank format. Therefore, we need to combine the homology group annotation in gff3 format with the fasta sequences to generate a genbank formatted files. To do this, Emboss tool seqret was used.\nconda activate omics_py37\n\nfor vir in `cut -f 1 hg_regions.tab | tail -n +2`\ndo\n  seqret -sequence ${vir}.fasta -feature -fformat gff3 \\\n  -fopenfile ${vir}.gff3 -osformat genbank -osextension gbk \\\n  -osname_outseq ${vir} -ofdirectory_outseq gbk_file -auto \ndone\nCorrect GenBank file as per Mauve requirement\nsed -i.bak -r -e 's/(^\\s+CDS\\s+(complement\\()?)[^:]+:([[:digit:]]+\\.\\.[[:digit:]]+\\)?).*/\\1\\3/' \\\n  -e 's/\\/note=\"\\*([^:]+): /\\/\\1=\"/' *.gbk\nAlign and visualize sequences using Mauve.\nmauve_out=\"ctv_hgt.defaults\"\n\nprogressiveMauve --output=\"${mauve_out}.mauve.xmfa\" \\\n--backbone-output=\"${mauve_out}.mauve.backbone\" \\\n--output-guide-tree=\"${mauve_out}.mauve.guide_tree.newick\" \\\n*.gbk  &gt; \"${mauve_out}\".mauve.log 2&gt;&1\n\n# mauve with custom settings\nmauve_out=\"ctv_hgt.opt\"\n\nprogressiveMauve --output=\"${mauve_out}.mauve.xmfa\" \\\n--seed-weight 10 \\\n--backbone-output=\"${mauve_out}.mauve.backbone\" \\\n--output-guide-tree=\"${mauve_out}.mauve.guide_tree.newick\" \\\n*.gbk  &gt; \"${mauve_out}\".mauve.log 2&gt;&1\n\n# --seed-weight 5 \\\n\n\nVisualize tail fiber locus HG sets on the pangenome\nR script scripts/analysis/HG_tandem_match.viz.qmd to plot tail fiber locus HGs for a set of genomes from different species.\nhgSets &lt;- list(\n  s1 = c(\"hg_22427604\", \"hg_22426828\"),\n  s2 = c(\"hg_22427604\", \"hg_22426818\"),\n  s3 = c(\"hg_22427604\", \"hg_22426820\", \"hg_22426802\", \"hg_22426815\")\n)\n\noutDir &lt;- paste(confs$analysis$prophages$dir, \"/cluster_viz/ctv_hgt\", sep = \"\")"
  }
]