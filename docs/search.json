[
  {
    "objectID": "scripts/analysis/prophage_clustering.html",
    "href": "scripts/analysis/prophage_clustering.html",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "",
    "text": "This script cluster prophages using syntenic Jaccard index distance.",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#initial-setup",
    "href": "scripts/analysis/prophage_clustering.html#initial-setup",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(magrittr))\nsuppressPackageStartupMessages(library(igraph))\nsuppressPackageStartupMessages(library(apcluster))\nsuppressPackageStartupMessages(library(dendextend))\nsuppressPackageStartupMessages(library(ComplexHeatmap))\nsuppressPackageStartupMessages(library(ape))\nsuppressPackageStartupMessages(library(logger))\nsuppressPackageStartupMessages(library(configr))\n\n# cluster prophages to get representative phages\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/homology_groups.R\")\nsource(\"scripts/utils/heatmap_utils.R\")\nsource(\"scripts/utils/compare_hg_sets.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\nprophageLenCutoff &lt;- confs$analysis$prophages$cutoff_length\n\noutDir &lt;- confs$analysis$prophages$preprocessing$dir\n\ncolorList &lt;- list(\n  jaccard = list(\n    breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.97, 1),\n    colors = viridisLite::viridis(n = 13, option = \"magma\")\n  ),\n  mash = list(\n    breaks = c(0, 0.03, 0.05, 0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1),\n    colors = viridisLite::viridis(n = 13, option = \"magma\")\n  )\n)",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#import-data",
    "href": "scripts/analysis/prophage_clustering.html#import-data",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId\n)\n\nprophagePool &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$prophage_pool)\n) %&gt;% \n  dplyr::select(\n    prophage_id, fragments, nFragments, parent, prophage_length, nHg, genomeId,\n    completeness, checkv_quality, taxonomy \n  )\n\nfragmentedPhages &lt;- dplyr::filter(prophagePool, nFragments &gt; 1)\nunfragPhages &lt;- dplyr::filter(prophagePool, nFragments == 1) %&gt;% \n  dplyr::select(-parent)\n\n\nsimDf &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$pair_comparison)\n)\n\nmashMat &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$mash_dist)\n) %&gt;%\n  tibble::column_to_rownames(var = \"prophage_id\") %&gt;%\n  as.matrix()\n\nmashMat &lt;- mashMat[unfragPhages$prophage_id, unfragPhages$prophage_id]\n\nmashUpgma &lt;- ape::read.tree(confs$analysis$prophages$preprocessing$files$mash_hclust)\n\n\nImport HGs for raw prophages stored locally and map them to consolidated prophages\n\n\nCode\n# read prophage HGs stored locally\nrawProHgs &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$raw_prophage_hg)\n) %&gt;%\n  dplyr::select(prophage_id = id, hgs) %&gt;%\n  dplyr::mutate(\n    hgs = stringr::str_split(hgs, \";\")\n  )\n\n# merge the HGs from multiple prophage fragments when they are merged\nprophageHgs &lt;- dplyr::select(prophagePool, prophage_id, fragments) %&gt;% \n  dplyr::mutate(fragments = stringr::str_split(fragments, \";\")) %&gt;% \n  tidyr::unnest(fragments) %&gt;% \n  dplyr::left_join(y = rawProHgs, by = c(\"fragments\" = \"prophage_id\")) %&gt;% \n  dplyr::summarize(\n    hgs = list(unique(unlist(hgs))),\n    .by = prophage_id\n  )\n\n\nTotal prophages to be clustered: 1369",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#process-syntenic-jaccard-similarity-and-mash-distance-data",
    "href": "scripts/analysis/prophage_clustering.html#process-syntenic-jaccard-similarity-and-mash-distance-data",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Process syntenic Jaccard similarity and MASH distance data",
    "text": "Process syntenic Jaccard similarity and MASH distance data\n\n\nCode\n# process data\nphageCmpDf &lt;- dplyr::bind_rows(\n  simDf,\n  dplyr::rename(simDf, p2 = phage1, p1 = phage2) %&gt;%\n    dplyr::rename(phage1 = p1, phage2 = p2)\n)\n\nallPhageJaccardMat &lt;- tidyr::pivot_wider(\n  phageCmpDf,\n  id_cols = phage1,\n  names_from = phage2,\n  values_from = jaccardIndex\n) %&gt;%\n  tibble::column_to_rownames(var = \"phage1\") %&gt;%\n  as.matrix()\n\n\n\n\n\n\n\n\nImportant\n\n\n\nTo remove the noise while clustering exclude:\n\nfragmented prophages\nall the prophages that show syntenic Jaccard index 0.5 or lower against other prophages\n\n\n\n\n\nCode\njaccardMat &lt;- allPhageJaccardMat[unfragPhages$prophage_id, unfragPhages$prophage_id]\n\nif (all(is.na(diag(jaccardMat)))) {\n  diag(jaccardMat) &lt;- 1\n}\n\nif (!isSymmetric(jaccardMat)) {\n  stop(\"pairwise Jaccard index matrix is not symmetric\")\n}\n\n# convert to distance matrix\njacDistMat &lt;- max(jaccardMat) - jaccardMat\n\nquantile(jaccardMat, c(0, 0.25, 0.5, 0.75, seq(0.9, 0.99, by = 0.01), 0.995, 1))\n\n\n    0%    25%    50%    75%    90%    91%    92%    93%    94%    95%    96% \n0.0000 0.0000 0.0000 0.0000 0.2647 0.6296 0.6800 0.7200 0.7391 0.7500 0.7826 \n   97%    98%    99%  99.5%   100% \n0.8000 0.8261 0.9000 0.9524 1.0000 \n\n\n\n\nCode\nbreakPoint &lt;- 0.5\ntempJcMat &lt;- jaccardMat\ndiag(tempJcMat) &lt;- NA\nmaxJc &lt;- matrixStats::rowMaxs(tempJcMat, na.rm = TRUE, useNames = TRUE)\n\nnoisyNodes &lt;- which(maxJc &lt;= breakPoint)\ntrimmedNodes &lt;- which(maxJc &gt; breakPoint)\ntrimmedJaccardMat &lt;- jaccardMat[unname(trimmedNodes), unname(trimmedNodes)]",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#hierarchical-clustering-of-jaccard-similarity",
    "href": "scripts/analysis/prophage_clustering.html#hierarchical-clustering-of-jaccard-similarity",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Hierarchical clustering of Jaccard similarity",
    "text": "Hierarchical clustering of Jaccard similarity\nA heatmap showing the syntenic Jaccard index between the singleton nodes identified above and the remaining nodes that will be used for clustering.\n\n\nCode\nht_noise &lt;- Heatmap(\n  matrix = jaccardMat[unname(noisyNodes), unname(trimmedNodes)],\n  name = \"noisy_jaccard\",\n  column_title = \"selected nodes for clustering\",\n  row_title = \"excluded singleton prophages\",\n  col = circlize::colorRamp2(\n    breaks = colorList$mash$breaks, colors = colorList$mash$colors\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  use_raster = TRUE, raster_quality = 3,\n  show_row_names = FALSE, show_column_names = FALSE\n)\n\nComplexHeatmap::draw(\n  ht_noise,\n  column_title = \"Syntenic Jaccard index\",\n  column_title_gp = gpar(fontsize = 16, fontface = \"bold\"),\n  heatmap_legend_side = \"bottom\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNoisy nodes identified above will be excluded from the hierarchical clustering of the prophages based on syntenic Jaccard index. Later, these noisy nodes will be added as singletons to the clusters identified by hclust.\n\n\n\n\nCode\nphageHc &lt;- hclust(\n  as.dist(jacDistMat[unname(trimmedNodes), unname(trimmedNodes)]),\n  method = \"complete\"\n)\n# plot(phageHc, hang = -1)\n\n# hclust(as.dist(jacDistMat), method = \"ward.D2\") %&gt;%\n#   as.dendrogram() %&gt;%\n#   dendextend::ladderize() %&gt;%\n#   plot(horiz = TRUE)\n\nphageDend &lt;- as.dendrogram(phageHc) %&gt;%\n  dendextend::ladderize()\n\nphageDend %&gt;%\n  dendextend::get_nodes_attr(\"height\") %&gt;%\n  hist()\n\n\n\n\n\n\n\n\n\nCode\n# dendextend::cutree(as.dendrogram(blacl), h = 0.8) %&gt;% table()\n\nphagePhylo &lt;- ape::as.phylo(phageDend)\n\n\n\n\nCode\nrev(phageDend) %&gt;%\n  plot(\n    horiz = TRUE,\n    main = \"Hierarchical clustering of syntenic Jaccard distance\"\n  )",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#visualize-the-clusters-with-data",
    "href": "scripts/analysis/prophage_clustering.html#visualize-the-clusters-with-data",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Visualize the clusters with data",
    "text": "Visualize the clusters with data\n\nSyntenic Jaccard distance\n\n\n\n\n\n\nImportant\n\n\n\nThe heatmap below excludes obvious singletons i.e.Â noisy nodes identified above (n = 318). Thus this heatmap shows comparison of 1001 prophages.\n\n\n\n\nCode\nht_jaccard &lt;- plot_species_ANI_heatmap(\n  mat = jaccardMat[phagePhylo$tip.label, phagePhylo$tip.label],\n  phy = phagePhylo,\n  name = \"jaccard\",\n  column_title = \"Syntenic Jaccard index\",\n  col = circlize::colorRamp2(\n    breaks = colorList$jaccard$breaks, colors = colorList$jaccard$colors\n  ),\n  show_column_dend = TRUE, column_dend_height = unit(3, \"cm\"),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  use_raster = TRUE, raster_quality = 2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd MASH distance heatmap\n\n\nCode\nht_mash &lt;- plot_species_ANI_heatmap(\n  mat = mashMat[phagePhylo$tip.label, phagePhylo$tip.label],\n  phy = phagePhylo,\n  name = \"mash\",\n  column_title = \"MASH distance\",\n  show_column_dend = FALSE,\n  col = circlize::colorRamp2(\n    breaks = colorList$mash$breaks, colors = colorList$mash$colors\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  use_raster = TRUE, raster_quality = 3\n)\n\nhtList &lt;- ht_jaccard + ht_mash\n\n\n\n\nquartz_off_screen \n                2",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#cut-tree-to-generate-clusters",
    "href": "scripts/analysis/prophage_clustering.html#cut-tree-to-generate-clusters",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Cut tree to generate clusters",
    "text": "Cut tree to generate clusters\n\n\n\n\n\n\nImportant\n\n\n\nHere, the noisy nodes will be added as singletons to the prophage clusters.\n\n\n\n\nCode\ntreeCut &lt;- dendextend::cutree(tree = phageDend, h = 0.66)\n\nphageGroups &lt;- tibble::enframe(\n  treeCut,\n  name = \"prophage_id\", value = \"phage_grp\"\n) %&gt;%\n  dplyr::bind_rows(\n    tibble::tibble(\n      prophage_id = names(noisyNodes),\n      phage_grp = (1:length(noisyNodes)) + length(unique(treeCut))\n    )\n  ) %&gt;%\n  dplyr::mutate(\n    phage_grp = paste(\"phage_grp_\", phage_grp, sep = \"\")\n  ) %&gt;%\n  dplyr::left_join(unfragPhages, by = \"prophage_id\")\n\n\nFinally, add the 50 fragmented prophages which could be mapped to a prophage in the pool to the respective clusters of their best matching parent prophage.\n\n\nCode\nfragmentsToAdd &lt;- dplyr::left_join(\n  x = fragmentedPhages,\n  y = dplyr::select(phageGroups, prophage_id, phage_grp),\n  by = c(\"parent\" = \"prophage_id\")\n) %&gt;% \n  dplyr::select(-parent)\n\nphageGroups &lt;- dplyr::bind_rows(phageGroups, fragmentsToAdd) %&gt;% \n  tidyr::replace_na(list(nFragments = 1)) %&gt;% \n  dplyr::mutate(\n    fragments = dplyr::if_else(is.na(fragments), prophage_id, fragments)\n  ) %&gt;% \n  dplyr::select(prophage_id, phage_grp, fragments, nFragments, everything())\n\n\nCluster representatives are determined based on the mean Jaccard index of cluster members against all members. The cluster member with highest mean Jaccard index against the cluster members is selected as a cluster representative.\nCluster representatives are determined using the following criteria:\n\nCompleteness of the prophages in the cluster determined by checkV (higher -&gt; better)\nmean Jaccard index of the prophage against cluster members\n\nProphages in the cluster are ranked based on these two criteria and the best prophage is selected as the cluster representative.\n\n\nCode\n# get cluster roots\nclusterRoots &lt;- split(x = phageGroups$prophage_id, f = phageGroups$phage_grp) %&gt;%\n  # .[c(\"phage_grp_114\", \"phage_grp_12\", \"phage_grp_131\", \"phage_grp_132\", \"phage_grp_173\", \"phage_grp_174\")] %&gt;%\n  purrr::map_dfr(\n    .f = function(x) {\n      # root -&gt; highest mean Jaccard index across group\n      if (length(x) == 1) {\n        rm &lt;- setNames(object = 1, nm = x)\n      } else {\n        subJc &lt;- allPhageJaccardMat[x, x]\n        diag(subJc) &lt;- NA\n        \n        rm &lt;- matrixStats::rowMeans2(subJc, na.rm = TRUE, useNames = TRUE) %&gt;%\n          sort(decreasing = TRUE) %&gt;%\n          round(digits = 3)\n      }\n      \n      return(\n        tibble::tibble(\n          prophage_id = names(rm),\n          mean_grp_sim = rm,\n          grp_size = length(x),\n        )\n      )\n    }\n  )\n\n\nCombine the clusters with cluster roots.\n\n\nCode\nrootedClusters &lt;- dplyr::left_join(\n  phageGroups, clusterRoots,\n  by = \"prophage_id\"\n) %&gt;%\n  dplyr::group_by(phage_grp) %&gt;%\n  dplyr::arrange(\n    dplyr::desc(completeness),\n    dplyr::desc(prophage_length),\n    dplyr::desc(mean_grp_sim),\n    .by_group = TRUE\n  ) %&gt;%\n  dplyr::mutate(is_root = 1:n()) %&gt;%\n  dplyr::ungroup() %&gt;%\n  dplyr::mutate(\n    is_root = dplyr::if_else(is_root == 1, 1, 0)\n  ) %&gt;% \n  dplyr::left_join(y = prophageHgs, by = \"prophage_id\")\n\n\nrepresentatives &lt;- dplyr::filter(rootedClusters, is_root == 1)\n\nrootedClusters %&lt;&gt;% dplyr::left_join(\n  y = dplyr::select(representatives, phage_grp, root_id = prophage_id),\n  by = \"phage_grp\"\n)",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#clustering-statistics",
    "href": "scripts/analysis/prophage_clustering.html#clustering-statistics",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Clustering statistics",
    "text": "Clustering statistics\nTotal prophages used for clustering: 1369\nTotal unique homology groups from prophages before clustering: 4801\nTotal prophage clusters: 436\nTotal unique homology groups of prophage representatives after clustering: 4493\n\n\nCode\nphageClusters &lt;- dplyr::select(rootedClusters, -hgs) %&gt;% \n  dplyr::arrange(\n    dplyr::desc(grp_size), phage_grp, desc(completeness), desc(mean_grp_sim)\n  ) %&gt;%\n  dplyr::left_join(\n    y = dplyr::select(\n      sampleInfo, genomeId, sampleId, SpeciesName, nodepath.kmer_upgma,\n      geo_loc_country, host, isolation_source, env_broad_scale, collection_year\n    ),\n    by = \"genomeId\"\n  )\n\nreadr::write_tsv(\n  phageClusters,\n  file = confs$analysis$prophages$files$clusters\n)\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat is the variation in genome ANI of the phages in the same group?\n\n\nIf the clustering is good, the representatives prophages should not have high syntenic Jaccard index against other representative prophages.\n\n\nCode\nrepJacMat &lt;- jaccardMat[representatives$prophage_id, representatives$prophage_id]\n\ndiag(repJacMat) &lt;- NA\n\nmatrixStats::rowMaxs(repJacMat, useNames = TRUE, na.rm = TRUE) %&gt;%\n  sort(decreasing = TRUE) %&gt;%\n  head()\n\n\ng_142.vir_2 g_327.vir_6 g_233.vir_4 g_150.vir_2   g_3.vir_3   g_4.vir_3 \n     0.5333      0.5333      0.5167      0.5167      0.5091      0.5091",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_clustering.html#draw-figures-again-with-representatives",
    "href": "scripts/analysis/prophage_clustering.html#draw-figures-again-with-representatives",
    "title": "Prophage clustering using syntenic Jaccard index",
    "section": "Draw figures again with representatives",
    "text": "Draw figures again with representatives\n\nRepresentative prophages syntenic Jaccard index heatmap\n\n\nCode\nrepDend &lt;- hclust(\n  as.dist(\n    jacDistMat[representatives$prophage_id, representatives$prophage_id]\n  ),\n  method = \"complete\"\n) %&gt;% \n  as.dendrogram() %&gt;% \n  dendextend::ladderize()\n\nht_jaccardRep &lt;- plot_species_ANI_heatmap(\n  mat = jaccardMat[representatives$prophage_id, representatives$prophage_id],\n  phy = repDend,\n  name = \"jaccard\",\n  column_title = \"Syntenic Jaccard index for representative prophages\",\n  col = circlize::colorRamp2(\n    breaks = colorList$jaccard$breaks, colors = colorList$jaccard$colors\n  ),\n  use_raster = TRUE, raster_quality = 2,\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  )\n)\n\nht_mashRep &lt;- plot_species_ANI_heatmap(\n  mat = mashMat[representatives$prophage_id, representatives$prophage_id],\n  phy = repDend,\n  name = \"mash\",\n  column_title = \"MASH distance\",\n  col = circlize::colorRamp2(\n    breaks = colorList$mash$breaks, colors = colorList$mash$colors\n  ),\n  use_raster = TRUE, raster_quality = 2,\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  )\n)\n\nhtListRep &lt;- ht_jaccardRep + ht_mashRep\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualize the final dendrogram\nAll the 436 representatives which includes noisy nodes (n = 318) and cluster representatives (n = 118) obtained by clustering 1001 prophages, are visualized in this dendrogram. The later 118 nodes are colored in red.\n\n\nCode\nrev(repDend) %&gt;% \n  dendextend::set(\n    what = \"by_labels_branches_col\",\n    value = setdiff(representatives$prophage_id, names(noisyNodes))\n  ) %&gt;% \n  dendextend::set(\"labels_cex\", 0.5) %&gt;% \n  plot(\n    horiz = TRUE,\n    main = \"Cluster representatives dendrogram\"\n  )",
    "crumbs": [
      "Prophages",
      "Clustering"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html",
    "href": "scripts/analysis/prophage_summary.html",
    "title": "Summary statistics for prophages",
    "section": "",
    "text": "This script summarizes the consolidated prophages in the pangenome. The figures and statistics generated in this analysis include all prophages i.e.Â redundant prophages (from identical genomes assemblies). For the summary of unique prophages, please refer to the script scripts/analysis/prophage_cluster_summary.qmd.",
    "crumbs": [
      "Prophages",
      "Prophage summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#initial-setup",
    "href": "scripts/analysis/prophage_summary.html#initial-setup",
    "title": "Summary statistics for prophages",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(skimr))\nsuppressPackageStartupMessages(library(ggdist))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(waffle))\nsuppressPackageStartupMessages(library(hrbrthemes))\nsuppressPackageStartupMessages(library(org.Pectobacterium.spp.pan.eg.db))\nsuppressPackageStartupMessages(library(DT))\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/homology_groups.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\noutDir &lt;- confs$analysis$prophages$summary$dir\n\npanOrgDb &lt;- org.Pectobacterium.spp.pan.eg.db\nprophageLenCutoff &lt;- confs$analysis$prophages$cutoff_length\ntreeMethod &lt;- \"kmer_nj\" # ani_upgma, kmer_nj",
    "crumbs": [
      "Prophages",
      "Prophage summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#import-data",
    "href": "scripts/analysis/prophage_summary.html#import-data",
    "title": "Summary statistics for prophages",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId\n)\n\nphagesRaw &lt;- suppressMessages(readr::read_tsv(confs$data$prophages$files$data)) %&gt;% \n  dplyr::select(prophage_id, taxonomy, completeness, checkv_quality, genomeId, sampleId)\n\nphagesConsolidated &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$consolidated)\n)\n\nrawTree &lt;- import_tree(\n  file = confs$analysis$phylogeny[[treeMethod]]$files$tree,\n  phylo = TRUE\n)\n\n\nWarning in max(vapply(x, length, numeric(1))): no non-missing arguments to max;\nreturning -Inf\n\n\nCode\npt_tree &lt;- ggtree::ggtree(rawTree)\ntreeTipOrder &lt;- ggtree::get_taxa_name(pt_tree)\n\n\nImport HGs for raw prophages stored locally and map them to consolidated prophages\n\n\nCode\n# read prophage HGs stored locally\nrawProHgs &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$raw_prophage_hg)\n) %&gt;%\n  dplyr::select(prophage_id = id, hgs) %&gt;%\n  dplyr::mutate(\n    hgs = stringr::str_split(hgs, \";\")\n  )\n\n# merge the HGs from multiple prophage fragments when they are merged\nprophageHgs &lt;- dplyr::select(phagesConsolidated, prophage_id, fragments) %&gt;% \n  dplyr::mutate(fragments = stringr::str_split(fragments, \";\")) %&gt;% \n  tidyr::unnest(fragments) %&gt;% \n  dplyr::left_join(y = rawProHgs, by = c(\"fragments\" = \"prophage_id\")) %&gt;% \n  dplyr::summarize(\n    hgs = list(unique(unlist(hgs))),\n    .by = prophage_id\n  )\n\n\n\nFilter prophages and prepare prophage pool\n\n\nCode\nqcPassedPhages &lt;- dplyr::filter(phagesConsolidated, filtered != 1)\n\n# get aditional information for fragmented prophages\nfragmentedPhages &lt;- dplyr::filter(qcPassedPhages, nFragments &gt; 1) %&gt;% \n  dplyr::filter(jaccardIndex &gt;= 0.5 & perSharedChild &gt;= 0.8) %&gt;% \n  dplyr::select(prophage_id, fragments, nFragments, prophage_length, nHg, parent) %&gt;% \n  dplyr::mutate(fragments = stringr::str_split(fragments, \";\")) %&gt;% \n  tidyr::unnest(fragments) %&gt;% \n  dplyr::left_join(\n    y = phagesRaw, by = c(\"fragments\" = \"prophage_id\")\n  ) %&gt;% \n  dplyr::group_by(prophage_id, nFragments, prophage_length, nHg, parent) %&gt;% \n  dplyr::summarize(\n    fragments = paste(fragments, collapse = \";\"),\n    taxonomy = paste(unique(taxonomy), collapse = \"&\"),\n    nTaxo = length(unique(taxonomy)),\n    completeness = sum(completeness),\n    checkv_quality = paste(\"merged:\", checkv_quality, collapse = \",\", sep = \" \"),\n    genomeId = unique(genomeId),\n    .groups = \"drop\"\n  ) %&gt;% \n  dplyr::mutate(\n    completeness = pmin(98, completeness)\n  ) %&gt;% \n  dplyr::filter(nTaxo == 1) %&gt;% \n  dplyr::select(prophage_id, taxonomy, completeness, checkv_quality, nFragments)\n\nunfragPhages &lt;- dplyr::filter(qcPassedPhages, nFragments == 1) %&gt;%\n  dplyr::left_join(y = phagesRaw, by = c(\"prophage_id\", \"genomeId\")) %&gt;%\n  dplyr::select(prophage_id, taxonomy, completeness, checkv_quality\n  )\n\nprophagePool &lt;- dplyr::bind_rows(\n  unfragPhages,\n  dplyr::select(fragmentedPhages, -nFragments)\n) %&gt;% \n  dplyr::left_join(phagesConsolidated, by = \"prophage_id\")\n\n# save unfragmented prophages\nreadr::write_tsv(\n  prophagePool,\n  file = confs$analysis$prophages$preprocessing$files$prophage_pool\n)\n\nprophagePool &lt;- dplyr::left_join(\n  prophagePool, prophageHgs, by = \"prophage_id\"\n)\n\nphageHgDf &lt;- tibble::tibble(hgId = unlist(prophagePool$hgs) %&gt;% unique())\n\n\n\n\nFiltered prophages\n\n\nCode\nremovedPhages &lt;- tibble::tibble(\n  prophage_id = setdiff(phagesConsolidated$prophage_id, prophagePool$prophage_id)\n) %&gt;% \n  dplyr::left_join(phagesConsolidated, by = \"prophage_id\")",
    "crumbs": [
      "Prophages",
      "Prophage summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#prophage-pool-statistics",
    "href": "scripts/analysis/prophage_summary.html#prophage-pool-statistics",
    "title": "Summary statistics for prophages",
    "section": "Prophage pool statistics",
    "text": "Prophage pool statistics\n\n\nCode\nglimpse(prophagePool)\n\n\nRows: 1,369\nColumns: 22\n$ prophage_id          &lt;chr&gt; \"g_349.vir_1\", \"g_349.vir_2\", \"g_349.vir_4\", \"g_1â¦\n$ taxonomy             &lt;chr&gt; \"Viruses;Duplodnaviria;Heunggongvirae;Uroviricotaâ¦\n$ completeness         &lt;dbl&gt; 44.02, 6.41, 15.72, 56.88, 26.39, 44.54, 100.00, â¦\n$ checkv_quality       &lt;chr&gt; \"Low-quality\", \"Low-quality\", \"Low-quality\", \"Medâ¦\n$ filtered             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0â¦\n$ fragments            &lt;chr&gt; \"g_349.vir_1\", \"g_349.vir_2\", \"g_349.vir_4\", \"g_1â¦\n$ nFragments           &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1â¦\n$ genomeId             &lt;chr&gt; \"g_349\", \"g_349\", \"g_349\", \"g_133\", \"g_133\", \"g_1â¦\n$ prophage_length      &lt;dbl&gt; 16331, 9531, 16223, 27562, 15612, 16526, 61557, 2â¦\n$ fragmentAlnPos       &lt;chr&gt; \"1:21\", \"1:13\", NA, \"1:31\", \"9:26\", \"1:20\", NA, Nâ¦\n$ nHg                  &lt;dbl&gt; 21, 14, 16, 31, 22, 20, 77, 48, 25, 20, 61, 21, 9â¦\n$ parent               &lt;chr&gt; \"g_218.vir_3\", \"g_338.vir_2\", NA, \"g_81.vir_1\", \"â¦\n$ parentGenome         &lt;chr&gt; \"g_218\", \"g_338\", NA, \"g_81\", \"g_107\", \"g_126\", Nâ¦\n$ nHgParent            &lt;dbl&gt; 24, 24, NA, 76, 30, 20, NA, NA, NA, 22, NA, 21, 1â¦\n$ nSharedHgs           &lt;dbl&gt; 21, 13, NA, 30, 21, 20, NA, NA, NA, 20, NA, 21, 8â¦\n$ nSyntenicSharedHgs   &lt;dbl&gt; 21, 13, NA, 30, 18, 20, NA, NA, NA, 20, NA, 21, 8â¦\n$ jaccardIndex         &lt;dbl&gt; 0.8750000, 0.5200000, NA, 0.3896104, 0.5806452, 1â¦\n$ contentDissimilarity &lt;dbl&gt; 0.06250000, 0.26488095, NA, 0.31876061, 0.2909090â¦\n$ perSharedParent      &lt;dbl&gt; 0.8750000, 0.5416667, NA, 0.3947368, 0.6000000, 1â¦\n$ perSharedChild       &lt;dbl&gt; 1.0000000, 0.9285714, NA, 0.9677419, 0.8181818, 1â¦\n$ relation             &lt;chr&gt; \"high_quality\", \"medium_quality\", NA, \"low_qualitâ¦\n$ hgs                  &lt;list&gt; &lt;\"hg_22426799\", \"hg_22426817\", \"hg_22427604\", \"hâ¦\n\n\nProphages identified by geNomad pipeline: 1649\nProphages with at least 1 homology group: 1436\nTotal homology groups of raw prophages: 4844\nConsolidated prophages: 1436\nFragmented prophages: 50\nTotal fragments in fragmented prophages: 110\nFinal prophage pool after filtering fragmented prophages and length smaller than 5000bp: 1369\nTotal homology groups of the final prophage pool: 4801",
    "crumbs": [
      "Prophages",
      "Prophage summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#prophage-length-summary",
    "href": "scripts/analysis/prophage_summary.html#prophage-length-summary",
    "title": "Summary statistics for prophages",
    "section": "Prophage length summary",
    "text": "Prophage length summary\n\n\nCode\ncompletenessDf &lt;- dplyr::select(\n  prophagePool, prophage_id, genomeId, prophage_length, completeness\n) %&gt;%\n  dplyr::mutate(\n    comp_category = dplyr::case_when(\n      completeness == 100 ~ \"complete\",\n      completeness &gt;= 90 ~ \"gt_90\",\n      completeness &gt;= 50 ~ \"betn_50_90\",\n      completeness &lt; 50 ~ \"lt_50\"\n    ),\n    comp_category = forcats::fct_relevel(\n      .f = comp_category, \"complete\", \"gt_90\", \"betn_50_90\", \"lt_50\"\n    )\n  ) %&gt;%\n  dplyr::arrange(comp_category)\n\nshortestCompletePro &lt;- dplyr::filter(completenessDf, completeness &gt;= 90) %&gt;%\n  dplyr::arrange(prophage_length) %&gt;%\n  dplyr::slice(1L)\n\npt_sizeDens &lt;- ggplot2::ggplot(\n  data = completenessDf,\n  mapping = aes(x = prophage_length, color = comp_category, group = NA)\n) +\n  ggdist::geom_dots(layout = \"weave\", smooth = \"bounded\", scale = 1, shape = 19) +\n  scale_color_manual(\n    name = \"CheckV completeness\",\n    values = c(\n      \"complete\" = \"#4daf4a\", \"gt_90\" = \"#b2df8a\",\n      \"betn_50_90\" = \"#ff7f00\", \"lt_50\" = \"grey50\"\n    ),\n    labels = c(\n      \"complete\" = \"100%\", \"gt_90\" = \"&gt;= 90%\",\n      \"betn_50_90\" = \"[50%, 90%)\", \"lt_50\" = \"&lt; 50%\"\n    )\n  ) +\n  scale_x_continuous(\n    labels = scales::label_number(scale_cut = c(0, kb = 10^3, mb = 10^6)),\n    breaks = scales::breaks_extended(6),\n    limits = c(0, NA), expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0.01, 0.01))) +\n  labs(x = \"Prophage length\", y = \"density\") +\n  theme_bw(base_size = 16) +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = c(0.95, 0.95),\n    legend.justification = c(1, 1)\n  )\n\n\npt_sizeDens\n\n\n\n\n\nProphage length distribution\n\n\n\n\n\n\nCode\npt_sizeHist &lt;- ggplot2::ggplot(\n  data = completenessDf,\n  mapping = aes(x = prophage_length)\n) +\n  ggplot2::geom_histogram(mapping = aes(fill = comp_category), bins = 40) +\n  scale_fill_manual(\n    name = \"CheckV completeness\",\n    values = c(\n      \"complete\" = \"#4daf4a\", \"gt_90\" = \"#b2df8a\",\n      \"betn_50_90\" = \"#ff7f00\", \"lt_50\" = \"grey50\"\n    ),\n    labels = c(\n      \"complete\" = \"100%\", \"gt_90\" = \"&gt;= 90%\",\n      \"betn_50_90\" = \"[50%, 90%)\", \"lt_50\" = \"&lt; 50%\"\n    )\n  ) +\n  scale_x_continuous(\n    labels = scales::label_number(scale_cut = c(0, kb = 10^3, mb = 10^6)),\n    breaks = scales::breaks_extended(6),\n    limits = c(0, NA), expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0.01, 0.01))) +\n  labs(x = \"Prophage length\", y = \"Count\") +\n  theme_bw(base_size = 20) +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = c(0.95, 0.95),\n    legend.text = element_text(size = 20),\n    legend.title = element_text(size = 20, face = \"bold\"),\n    legend.justification = c(1, 1),\n    plot.margin = unit(c(1, 1, 1, 1), \"cm\")\n  )\n\n\nggsave(\n  filename = paste(outDir, \"/prophage_size_density.pdf\", sep = \"\"),\n  plot = pt_sizeHist, width = 8, height = 5\n)\n\n\nWarning: Removed 4 rows containing missing values (`geom_bar()`).\n\n\nCode\npt_sizeHist\n\n\nWarning: Removed 4 rows containing missing values (`geom_bar()`).",
    "crumbs": [
      "Prophages",
      "Prophage summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#prophage-summary",
    "href": "scripts/analysis/prophage_summary.html#prophage-summary",
    "title": "Summary statistics for prophages",
    "section": "Prophage summary",
    "text": "Prophage summary\n\nProphage types\n\n\nCode\ntable(prophagePool$taxonomy)\n\n\n\n                                                                              Unclassified \n                                                                                         1 \n                           Viruses;Duplodnaviria;Heunggongvirae;Uroviricota;Caudoviricetes \n                                                                                      1357 \n     Viruses;Monodnaviria;Loebvirae;Hofneiviricota;Faserviricetes;Tubulavirales;Inoviridae \n                                                                                         8 \nViruses;Monodnaviria;Sangervirae;Phixviricota;Malgrandaviricetes;Petitvirales;Microviridae \n                                                                                         2 \n                Viruses;Riboviria;Orthornavirae;Pisuviricota;Stelpaviricetes;Patatavirales \n                                                                                         1 \n\n\n\n\nCode\npt_proTax &lt;- dplyr::select(prophagePool, taxonomy) %&gt;%\n  dplyr::mutate(\n    taxonomy = stringr::str_replace(taxonomy, \".*;\", \"\")\n  ) %&gt;%\n  ggplot2::ggplot() +\n  ggplot2::geom_bar(mapping = aes(y = taxonomy), color = \"black\", fill = \"black\") +\n  ggplot2::labs(x = \"Count\", y = \"Taxonomy\") +\n  ggbreak::scale_x_break(breaks = c(10, 1300)) +\n  theme_bw(base_size = 24) +\n  theme(\n    panel.grid = element_blank(),\n    axis.title.y = element_blank()\n  )\n\nggsave(\n  filename = paste(outDir, \"/prophage_taxonomy.pdf\", sep = \"\"),\n  plot = pt_proTax, width = 6, height = 3\n)\n\npt_proTax\n\n\n\n\n\nProphage taxonomy\n\n\n\n\n\n\nProphage summary per genome\n\n\nCode\n# completeness stats\nproCompletenessStats &lt;- dplyr::select(completenessDf, genomeId, comp_category) %&gt;%\n  dplyr::count(genomeId, comp_category, name = \"n\") %&gt;%\n  tidyr::pivot_wider(\n    id_cols = genomeId,\n    names_from = comp_category,\n    values_from = n,\n    values_fill = 0\n  ) %&gt;%\n  dplyr::select(genomeId, complete, gt_90, betn_50_90, lt_50)\n\n# fragmented or filtered prophages stats\nfragmentStats &lt;- dplyr::select(removedPhages, prophage_id, genomeId, nFragments, filtered) %&gt;%\n  dplyr::mutate(\n    removed = dplyr::case_when(\n      filtered == 1 ~ \"filtered\",\n      nFragments &gt; 1 ~ \"fragmented\"\n    )\n  ) %&gt;%\n  dplyr::count(genomeId, removed, name = \"n\") %&gt;%\n  tidyr::pivot_wider(\n    id_cols = genomeId,\n    names_from = removed,\n    values_from = n,\n    values_fill = 0\n  ) %&gt;%\n  dplyr::mutate(\n    removed = filtered + fragmented\n  )\n\n\nperGenomePhageInfo &lt;- dplyr::group_by(prophagePool, genomeId) %&gt;%\n  dplyr::summarise(\n    phage_count = n(),\n    longest_phage = max(prophage_length),\n    smallest_phage = min(prophage_length),\n    total_phage_len = sum(prophage_length),\n    longest_nHg = max(nHg),\n    smallest_nHg = min(nHg),\n    phage_nHgs = sum(nHg),\n    hgs = list(unlist(hgs)),\n    nHgsUnique = length(unique(unlist(hgs))),\n    .groups = \"drop\"\n  ) %&gt;%\n  dplyr::arrange(desc(phage_count)) %&gt;%\n  dplyr::full_join(\n    y = dplyr::select(\n      sampleInfo, sampleId, genomeId, geo_loc_country,\n      nodepath.kmer_nj, SpeciesName\n    ),\n    by = \"genomeId\"\n  ) %&gt;%\n  dplyr::left_join(y = proCompletenessStats, by = \"genomeId\") %&gt;%\n  dplyr::left_join(y = fragmentStats, by = \"genomeId\") %&gt;%\n  tidyr::replace_na(\n    replace = list(phage_nHgs = 0, nHgsUnique = 0, phage_count = 0)\n  ) %&gt;%\n  dplyr::relocate(\n    sampleId, SpeciesName, geo_loc_country, nodepath.kmer_nj,\n    .after = genomeId\n  ) %&gt;%\n  dplyr::arrange(nodepath.kmer_nj)\n\nperGenomePhageInfo &lt;- dplyr::full_join(\n  x = tibble(genomeId = treeTipOrder),\n  y = perGenomePhageInfo, by = \"genomeId\"\n)\n\nreadr::write_tsv(\n  x = dplyr::select(perGenomePhageInfo, -hgs),\n  file = confs$analysis$prophages$summary$files$prophage_stats_genome\n)\n\n\n\n\nProphage gene distribution in core, accessory and unique groups\n\n\nCode\n# dplyr::select(perGenomePhageInfo, SpeciesName, hgs) %&gt;%\n#   tidyr::unnest(cols = hgs) %&gt;%\n#   dplyr::distinct()\n\npanVirSummary &lt;- dplyr::summarise(\n  perGenomePhageInfo,\n  n_genomes = n(),\n  n_vir_sp = sum(phage_count),\n  max_vir_per_g = max(phage_count),\n  min_vir_per_g = min(phage_count),\n  mean_vir_per_g = mean(phage_count),\n  mean_vir_hgs = mean(phage_nHgs),\n  median_vir_hgs = median(phage_nHgs),\n  total_vir_hgs = sum(phage_nHgs),\n  unique_vir_hgs = length(unique(unlist(hgs))),\n  hgs = list(unique(unlist(hgs)))\n) %&gt;%\n  dplyr::mutate(SpeciesName = \"Pangenome\", .before = n_genomes)\n\nspVirSummary &lt;- dplyr::group_by(perGenomePhageInfo, SpeciesName) %&gt;%\n  dplyr::summarise(\n    n_genomes = n(),\n    n_vir_sp = sum(phage_count),\n    max_vir_per_g = max(phage_count),\n    min_vir_per_g = min(phage_count),\n    mean_vir_per_g = mean(phage_count),\n    total_vir_hgs = sum(phage_nHgs),\n    unique_vir_hgs = length(unique(unlist(hgs))),\n    hgs = list(unique(unlist(hgs))),\n    .groups = \"drop\"\n  ) %&gt;%\n  dplyr::bind_rows(panVirSummary) %&gt;%\n  dplyr::arrange(desc(n_genomes))\n\n\n\n\nCode\n## binary matrix for homology_group PAV\nhgBinaryMat &lt;- homology_groups_mat(pandb = panOrgDb, type = \"pav\")\n\n\n'select()' returned 1:many mapping between keys and columns\n\n\nCode\nsppGrpStats &lt;- NULL\n\n## get species wise core, accessory, unique group stats and GO\nfor (sp in c(unique(sampleInfo$SpeciesName), \"Pangenome\")) {\n  atPangenomeScale &lt;- sp == \"Pangenome\"\n  \n  if (atPangenomeScale) {\n    spGenomes &lt;- sampleInfo$genomeId\n  } else {\n    spGenomes &lt;- dplyr::filter(sampleInfo, SpeciesName == .env$sp) %&gt;%\n      dplyr::pull(genomeId)\n  }\n  \n  # prophage homology groups: handle special case when HGs for Pangenome are needed\n  spPhagesHgs &lt;- dplyr::filter(\n    perGenomePhageInfo, SpeciesName == !!sp | atPangenomeScale\n  ) %&gt;%\n    dplyr::select(hgId = hgs) %&gt;%\n    tidyr::unnest(cols = c(hgId)) %&gt;%\n    dplyr::distinct() %&gt;%\n    dplyr::mutate(\n      prophageHgs = \"prophage\",\n      SpeciesName = .env$sp\n    )\n  \n  # pangenome homology groups\n  spHgTypes &lt;- matrixStats::colSums2(\n    x = hgBinaryMat, useNames = T,\n    rows = which(rownames(hgBinaryMat) %in% spGenomes)\n  ) %&gt;%\n    tibble::enframe(name = \"hgId\", value = \"nGenomes\") %&gt;%\n    dplyr::filter(nGenomes != 0) %&gt;%\n    dplyr::mutate(\n      class = dplyr::case_when(\n        nGenomes == 1 ~ \"unique\",\n        nGenomes == !!length(spGenomes) ~ \"core\",\n        nGenomes &lt; !!length(spGenomes) & nGenomes &gt; 1 ~ \"accessory\"\n      )\n    ) %&gt;%\n    dplyr::left_join(y = spPhagesHgs, by = \"hgId\") %&gt;%\n    tidyr::replace_na(list(prophageHgs = \"non-prophage\", SpeciesName = sp))\n  \n  # if only one genome for species, all HGs should be assigned to \"core\"\n  if (length(spGenomes) == 1) {\n    spHgTypes$class &lt;- \"core\"\n  }\n  \n  phageHgDf &lt;- dplyr::filter(spHgTypes, prophageHgs == \"prophage\") %&gt;%\n    dplyr::select(hgId, !!sp := class) %&gt;%\n    dplyr::full_join(phageHgDf, by = \"hgId\")\n  \n  ## group stats\n  proHgSpStats &lt;- dplyr::count(spHgTypes, class, prophageHgs, name = \"phage_nHgs\") %&gt;%\n    dplyr::filter(prophageHgs == \"prophage\") %&gt;%\n    dplyr::left_join(\n      y = as.data.frame(table(spHgTypes$class), responseName = \"nHgs\"),\n      by = c(\"class\" = \"Var1\")\n    ) %&gt;%\n    dplyr::select(-prophageHgs) %&gt;%\n    dplyr::bind_rows(\n      dplyr::summarise(\n        .,\n        dplyr::across(.cols = -class, .fns = sum),\n        dplyr::across(.cols = class, .fns = ~\"total\")\n      )\n    ) %&gt;%\n    dplyr::mutate(\n      SpeciesName = .env$sp,\n      phageRatio = round(phage_nHgs / nHgs, digits = 3)\n    ) %&gt;%\n    dplyr::select(SpeciesName, class, nHgs, phage_nHgs, phageRatio)\n  \n  sppGrpStats &lt;- dplyr::bind_rows(sppGrpStats, proHgSpStats)\n}\n\n\nspec1 &lt;- tidyr::build_wider_spec(\n  data = sppGrpStats,\n  names_from = class,\n  values_from = c(nHgs, phage_nHgs, phageRatio),\n  names_glue = \"{.value}.{class}\"\n) %&gt;%\n  dplyr::mutate(\n    .name = dplyr::if_else(\n      .value == \"nHgs\", true = class, false = .name\n    )\n  )\n\nphageSpeciesStats &lt;- tidyr::pivot_wider_spec(data = sppGrpStats, spec = spec1) %&gt;%\n  dplyr::left_join(\n    y = spVirSummary, by = \"SpeciesName\"\n  ) %&gt;%\n  dplyr::select(-hgs) %&gt;%\n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(mean_vir_per_g),\n      .fns = ~ round(x = .x, digits = 3)\n    )\n  )\n\nstopifnot(\n  all(phageSpeciesStats$phage_nHgs.total == phageSpeciesStats$unique_vir_hgs)\n)\n\nphageSpeciesStats %&lt;&gt;% dplyr::select(\n  SpeciesName, n_genomes, n_vir_sp, mean_vir_per_g, core, accessory, unique, total,\n  ends_with(c(\".total\", \".core\", \".accessory\", \".unique\"))\n) %&gt;%\n  dplyr::arrange(desc(n_genomes))\n\nphageSpeciesStats %&gt;%\n  readr::write_tsv(\n    file = confs$analysis$prophages$summary$files$prophage_stats_species\n  )\n\n\n\nTable\n\n\n\n\nTableÂ 1\n\n\n\n\n\n\n\n\n\n\n\n\nFigure\nVisualize the proportion of prophage homology groups in pangenome and various HG categories.\n\n\nCode\ndf_panPhage &lt;- dplyr::filter(sppGrpStats, SpeciesName == \"Pangenome\") %&gt;%\n  dplyr::mutate(\n    class = forcats::fct_relevel(class, \"total\", \"core\", \"accessory\", \"unique\"),\n    nonPhage_ratio = 1 - phageRatio,\n    nonPhage_nHgs = nHgs - phage_nHgs\n  ) %&gt;%\n  dplyr::rename(phage_ratio = phageRatio, total_hgs = nHgs) %&gt;%\n  tidyr::pivot_longer(\n    cols = c(starts_with(\"phage_\"), starts_with(\"nonPhage\")),\n    names_to = c(\"hg_from\", \".value\"),\n    names_sep = \"_\"\n  ) %&gt;%\n  dplyr::mutate(\n    nHgs_h = nHgs / 38,\n    group = dplyr::if_else(\n      hg_from == \"nonPhage\", class, hg_from\n    )\n  )\n\n# lables for facets\nphageHgLables &lt;- dplyr::filter(sppGrpStats, SpeciesName == \"Pangenome\") %&gt;%\n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(phage_nHgs, nHgs), .fns = ~ prettyNum(.x, big.mark = \",\")\n    ),\n    label = paste(\n      class, \" (\", phageRatio * 100, \"%)\", \"\\n\", phage_nHgs, \"/\", nHgs,\n      sep = \"\"\n    )\n  ) %&gt;%\n  dplyr::pull(var = label, name = class)\n\n# waffle plot\npt_phage_hgs &lt;- ggplot2::ggplot(\n  data = df_panPhage,\n  mapping = aes(values = nHgs_h, fill = group)\n) +\n  waffle::geom_waffle(\n    color = \"white\", flip = TRUE,\n    make_proportional = TRUE, n_rows = 10, size = 0.25,\n    height = 1, width = 1\n  ) +\n  ggplot2::labs(\n    title = \"Prophage homology groups in pangenome\"\n  ) +\n  facet_wrap(\n    facets = ~class, nrow = 1, strip.position = \"bottom\",\n    labeller = as_labeller(phageHgLables)\n  ) +\n  scale_fill_manual(\n    name = NULL,\n    values = c(\n      \"phage\" = \"black\", \"core\" = confs$colors$core, \"total\" = \"grey\",\n      \"accessory\" = confs$colors$accessory, \"unique\" = confs$colors$unique\n    ),\n    breaks = c(\"phage\"),\n    labels = c(\"phage\" = \"Prophage\")\n  ) +\n  coord_equal() +\n  expand_limits(x = c(0, 0), y = c(0, 0)) +\n  waffle::theme_enhance_waffle() +\n  theme_minimal(base_size = 18) +\n  theme(\n    panel.spacing.x = unit(0, \"npc\"),\n    # strip.text.x = element_text(hjust = 0.5, size = 16),\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    legend.position = \"bottom\",\n    panel.grid = element_blank()\n  )\n\n\n\n\n\n\n\nProphage HGs in pangenome",
    "crumbs": [
      "Prophages",
      "Prophage summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_summary.html#prophage-contribution-to-the-genome-size-in-blackleg-causing-and-blackleg-non-causing-isolates",
    "href": "scripts/analysis/prophage_summary.html#prophage-contribution-to-the-genome-size-in-blackleg-causing-and-blackleg-non-causing-isolates",
    "title": "Summary statistics for prophages",
    "section": "Prophage contribution to the genome size in blackleg-causing and blackleg-non-causing isolates",
    "text": "Prophage contribution to the genome size in blackleg-causing and blackleg-non-causing isolates\n\n\nCode\nperGenomePhageInfo &lt;- dplyr::left_join(\n  x = perGenomePhageInfo,\n  y = dplyr::select(sampleInfo, genomeId, virulence, virulence_pcr, length, N50),\n  by = \"genomeId\"\n)\n\nplotDf &lt;- dplyr::select(\n  perGenomePhageInfo, genomeId, sampleId, SpeciesName, geo_loc_country, virulence,\n  virulence_pcr, length, N50, total_phage_len\n) %&gt;%\n  tidyr::pivot_longer(\n    cols = -c(\n      genomeId, sampleId, SpeciesName, geo_loc_country,\n      virulence, virulence_pcr\n    ),\n    names_to = \"field\",\n    values_to = \"value\"\n  ) %&gt;%\n  dplyr::mutate(\n    field = forcats::fct_relevel(\n      field, \"length\", \"total_phage_len\", \"N50\"\n    )\n  )\n\n\npt_proLen &lt;- dplyr::filter(plotDf, virulence %in% c(\"virulent\", \"avirulent\")) %&gt;%\n  dplyr::filter(field %in% c(\"length\", \"total_phage_len\", \"N50\")) %&gt;%\n  ggplot(mapping = aes(x = virulence, y = value)) +\n  geom_boxplot(width = .5, outlier.shape = NA, alpha = 0, linewidth = 1) +\n  ggbeeswarm::geom_quasirandom(mapping = aes(color = virulence), size = 3) +\n  ggpubr::stat_compare_means(label.y.npc = \"top\", vjust = -1) +\n  ggplot2::scale_x_discrete(\n    labels = c(\"virulent\" = \"BL causing\",\"avirulent\" = \"BL non-causing\")\n  ) +\n  ggplot2::scale_y_continuous(\n    labels = scales::label_comma(\n      scale_cut = c(Kb = 1000, Mb = 1000000, Gb = 1000000000)\n    ),\n    expand = expansion(mult = c(0.1))\n  ) + \n  ggplot2::scale_color_manual(\n    name = \"Blackleg phenotype\",\n    values = c(\"red\", \"black\"),\n    breaks = c(\"virulent\", \"avirulent\"),\n    label = c(\"BL-causing\", \"BL non-causing\"),\n    guide = guide_legend(override.aes = list(size = 6))\n  ) +\n  facet_wrap(\n    facets = ~field, nrow = 1, scales = \"free_y\",\n    labeller = ggplot2::labeller(\n      field = c(\n        \"total_phage_len\" = \"Prophage length\",\n        \"length\" = \"Genome size\", \"N50\" = \"N50\"\n      )\n    )\n  ) +\n  theme_bw(base_size = 20) +\n  theme(\n    axis.title = element_blank(),\n    axis.text.x = element_blank(),\n    legend.position = \"bottom\",\n    panel.grid = element_blank()\n  )\n\n\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_compare_means()`).\n\n\nWarning: Removed 1 rows containing missing values (`position_quasirandom()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_compare_means()`).\n\n\nWarning: Removed 1 rows containing missing values (`position_quasirandom()`).",
    "crumbs": [
      "Prophages",
      "Prophage summary"
    ]
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata_viz.html",
    "href": "scripts/analysis/pangenome_metadata_viz.html",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "",
    "text": "Here, various exploratory analysis figures are generated for P. brasiliense population metadata as well as genome assembly metadata.",
    "crumbs": [
      "Pangenome",
      "Pangenome metadata"
    ]
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata_viz.html#initial-setup",
    "href": "scripts/analysis/pangenome_metadata_viz.html#initial-setup",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(configr))\nsuppressPackageStartupMessages(library(ggpubr))\nsuppressPackageStartupMessages(library(ggdist))\nsuppressPackageStartupMessages(library(ggpattern))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(skimr))\nsuppressPackageStartupMessages(library(DT))\n\n## pangenome data summary and comparison\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\noutDir &lt;- confs$analysis$summary$dir\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]",
    "crumbs": [
      "Pangenome",
      "Pangenome metadata"
    ]
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata_viz.html#import-data",
    "href": "scripts/analysis/pangenome_metadata_viz.html#import-data",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleMeta &lt;- suppressMessages(\n  readr::read_tsv(confs$data$reference_data$files$metadata)\n)\n\npanMetrix &lt;- suppressMessages(\n  readr::read_csv(panConf$db$metrics$files$per_genome)\n) %&gt;% \n  dplyr::rename_all(\n    .funs = ~ stringr::str_replace_all(\n      ., c(\"\\\\s+\" = \"_\", \"%\" = \"per\", \"(\\\\(|\\\\))\" = \"\")\n    )\n  ) %&gt;%\n  dplyr::select(\n    Genome, Gene_count, mRNA_count, rRNA_count, tRNA_count,\n    Singletons, Homology_groups, GC_per = GC_content_per\n  ) %&gt;% \n  dplyr::mutate(Genome = as.character(Genome))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nCode\npanMeta &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus) %&gt;% \n  dplyr::left_join(y = panMetrix, by = \"Genome\") %&gt;% \n  dplyr::mutate(\n    pbr = dplyr::if_else(\n      SpeciesName == \"P. brasiliense\", SpeciesName, \"other\"\n    ),\n    geo_loc_country = dplyr::if_else(\n      geo_loc_country == \"Netherlands\", geo_loc_country, \"other\", missing = \"other\"\n    ),\n    virType = dplyr::case_when(\n      virulence == \"virulent\" & virulence_pcr == \"positive\" ~ \"TP\",\n      virulence == \"virulent\" & virulence_pcr == \"negative\" ~ \"FN\",\n      virulence == \"avirulent\" & virulence_pcr == \"positive\" ~ \"FP\",\n      virulence == \"avirulent\" & virulence_pcr == \"negative\" ~ \"TN\",\n      TRUE ~ \"unknown\"\n    ),\n    pbr = forcats::fct_relevel(pbr, \"other\", \"P. brasiliense\"),\n    geo_loc_country = forcats::fct_relevel(geo_loc_country, \"Netherlands\"),\n    virType = forcats::fct_relevel(virType, \"TP\", \"FN\", \"TN\", \"FP\", \"unknown\")\n  ) %&gt;% \n  dplyr::left_join(\n    y = dplyr::select(sampleMeta, sampleId, AssemblyStatus),\n    by = \"sampleId\"\n  )",
    "crumbs": [
      "Pangenome",
      "Pangenome metadata"
    ]
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata_viz.html#species-wise-genome-statistics",
    "href": "scripts/analysis/pangenome_metadata_viz.html#species-wise-genome-statistics",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Species wise genome statistics",
    "text": "Species wise genome statistics\n\n\nCode\npt_speciesCount &lt;- ggplot2::ggplot(\n  data = panMeta\n) +\n  geom_bar(\n    mapping = aes(\n      y = forcats::fct_infreq(SpeciesName),\n      fill = AssemblyStatus\n    )\n  ) +\n  labs(\n    x = \"#genomes\",\n    y = NULL,\n    title = \"# of genomes\"\n  ) +\n  scale_x_continuous(expand = expansion(add = c(0, 2))) +\n  ggplot2::scale_fill_viridis_d(option = \"C\") +\n  theme_bw(base_size = 20) +\n  theme(\n    axis.text.y = element_text(face = \"bold.italic\", size = 14, color = \"black\"),\n    axis.text.x = element_text(face = \"bold\", size = 16, color = \"black\"),\n    plot.title = element_text(face = \"bold\", size = 18, color = \"black\"),\n    axis.title = element_text(face = \"bold\", size = 16, color = \"black\"),\n    legend.position = \"bottom\",\n    panel.grid = element_blank()\n  )",
    "crumbs": [
      "Pangenome",
      "Pangenome metadata"
    ]
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata_viz.html#explore-p.-brasiliense-population-metadata",
    "href": "scripts/analysis/pangenome_metadata_viz.html#explore-p.-brasiliense-population-metadata",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Explore P. brasiliense population metadata",
    "text": "Explore P. brasiliense population metadata\n\nP. brasiliense collection in the Netherlands\n\n\nCode\n(\n  pt_pbrTimeline &lt;- dplyr::filter(\n    panMeta, geo_loc_country == \"Netherlands\", !is.na(collection_year)\n  ) %&gt;% \n    ggplot2::ggplot() +\n    geom_histogram(\n      mapping = aes(x = collection_year, fill = forcats::fct_rev(pbr)),\n      binwidth = 2, color = \"black\"\n    ) +\n    geom_vline(xintercept = 2015, color = \"blue\", linewidth = 1, linetype = \"dashed\") +\n    scale_fill_manual(\n      values = c(\"P. brasiliense\" = \"black\", \"other\" = \"grey90\")\n    ) +\n    # labs(\n    #   title = \"P. brasiliense collection after 2015 in the Netherlands\"\n    # ) +\n    scale_x_continuous(expand = expansion(add = 0)) +\n    scale_y_continuous(expand = expansion(add = c(0, 5))) +\n    theme_bw(base_size = 20) +\n    theme(\n      legend.position = c(0.02, 0.9),\n      legend.justification = c(0, 1),\n      legend.key.size = unit(1, \"cm\"),\n      legend.text = element_text(size = 20),\n      legend.title = element_blank(),\n      axis.title = element_blank(),\n      plot.margin = margin(1, 1, 1, 1, \"cm\"),\n      panel.grid = element_blank()\n    )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\n\n\nP. brasiliense collection after 2015 in the Netherlands\n\n\n\n\n\n\nAppearance of new P. brasiliense virulent isolates in the Netherlands\n\n\nCode\n(\n  pt_fnPbr &lt;- dplyr::filter(\n    panMeta, geo_loc_country == \"Netherlands\", pbr == \"P. brasiliense\"\n  ) %&gt;% \n    ggplot2::ggplot() +\n    ggpattern::geom_histogram_pattern(\n      mapping = aes(x = collection_year, fill = virType, pattern_density = virType),\n      binwidth = 1,\n      pattern = \"stripe\", pattern_fill = \"black\",\n      # pattern_density = 0.6,\n      color = \"black\", pattern_spacing = 0.02, pattern_colour = \"black\"\n    ) +\n    scale_fill_manual(\n      values = c(\"TP\" = \"red\", \"FP\" = alpha(\"green\", 1),\n                 \"TN\" = \"green\", \"FN\" = alpha(\"red\", 1), \"unknown\" = \"grey\")\n    ) +\n    scale_pattern_density_manual(\n      values = c(\"TP\" = 0, \"FP\" = 0.5, \"TN\" = 0,\n                 \"FN\" = 0.5, \"unknown\" = 0)\n    ) +\n    # labs(\n    #   title = \"FN-Pbr emergence in the Netherlands\"\n    # ) +\n    scale_x_continuous(expand = expansion(add = 0)) +\n    scale_y_continuous(expand = expansion(add = c(0, 2))) +\n    theme_bw(base_size = 20) +\n    theme(\n      legend.position = c(0.01, 0.9),\n      legend.justification = c(0, 1),\n      legend.key.size = unit(1, \"cm\"),\n      legend.text = element_text(size = 20),\n      legend.title = element_blank(),\n      axis.title = element_blank(),\n      panel.grid = element_blank()\n    )\n)\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n  \n\n\n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n  \n  \n  \n  \n  \n\n\n\nFN-Pbr emergence in the Netherlands\n\n\n\n\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).",
    "crumbs": [
      "Pangenome",
      "Pangenome metadata"
    ]
  },
  {
    "objectID": "scripts/analysis/pangenome_metadata_viz.html#explore-p.-brasiliense-genome-metdata",
    "href": "scripts/analysis/pangenome_metadata_viz.html#explore-p.-brasiliense-genome-metdata",
    "title": "Exploratory analysis of pangenome metadata",
    "section": "Explore P. brasiliense genome metdata",
    "text": "Explore P. brasiliense genome metdata\n\nPrepare plotting data\n\n\nCode\nplotDf &lt;- dplyr::select(\n  panMeta, Genome, source, sampleId, SpeciesName, geo_loc_country, virulence,\n  virulence_pcr, length, GC_per, N50, L50,\n  Gene_count, mRNA_count, tRNA_count, rRNA_count,\n  Homology_groups, Singletons\n) %&gt;%\n  dplyr::filter(SpeciesName == \"P. brasiliense\") %&gt;% \n  tidyr::pivot_longer(\n    cols = -c(Genome, sampleId, source, SpeciesName, geo_loc_country,\n              virulence, virulence_pcr),\n    names_to = \"field\",\n    values_to = \"value\"\n  ) %&gt;%\n  dplyr::mutate(\n    field = forcats::fct_relevel(\n      field, \"length\", \"Gene_count\", \"mRNA_count\", \"tRNA_count\", \"rRNA_count\"\n    )\n  )\n\n\n\n\nDo P. brasiliense from the Netherlands have more genes?\nHere, we compare the mRNA count of P. brasiliense genomes between the isolates from the Netherlands and rest of the world. A good quality genome can have more mRNA and to control for this, we also compare the N50 values between the same groups.\n\n\nCode\n(\n  pt_loc &lt;- plotDf %&gt;% \n    # dplyr::filter(field %in% c(\"length\")) %&gt;%\n    # dplyr::filter(field %in% c(\"mRNA_count\", \"length\", \"N50\", \"N90\", \"L50\", \"L90\")) %&gt;%\n    dplyr::filter(field %in% c(\"mRNA_count\", \"N50\")) %&gt;%\n    # dplyr::filter(field %in% c(\"mRNA_count\", \"tRNA_count\", \"rRNA_count\", \"N50\")) %&gt;%\n    ggplot2::ggplot(\n      mapping = aes(x = forcats::fct_rev(geo_loc_country), y = value)\n    ) +\n    geom_boxplot(width = .5, outlier.shape = NA, alpha = 0, linewidth = 1) +\n    ggbeeswarm::geom_quasirandom(size = 3) +\n    ggpubr::stat_compare_means(label.y.npc = \"top\", vjust = -1) +\n    scale_y_continuous(\n      labels = scales::label_comma(scale_cut = c(Mb = 1000000, Gb = 1000000000)),\n      expand = expansion(mult = c(0.1))\n    ) +\n    facet_wrap(\n      facets = ~field, nrow = 1, scales = \"free_y\",\n      labeller = ggplot2::labeller(\n        field = c(\"mRNA_count\" = \"Gene count\", \"length\" = \"Genome size\", \"N50\" = \"N50\")\n      )\n    ) +\n    # labs(\n    #   title = \"Pbr isolates from the Netherlands have more protein coding genes\"\n    # ) +\n    theme_bw(base_size = 20) +\n    theme(\n      axis.title = element_blank(),\n      axis.text.x = element_text(angle = 45, hjust = 1),\n      legend.position = \"bottom\",\n      panel.grid = element_blank()\n    )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n\n\n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n\nPbr isolates from the Netherlands have more protein coding genes\n\n\n\n\n\n\nDo virulent P. brasiliense isolates have more mRNAs?\n\n\nCode\n(\n  pt_vir &lt;- dplyr::filter(plotDf, virulence %in% c(\"virulent\", \"avirulent\")) %&gt;% \n    dplyr::filter(field %in% c(\"mRNA_count\", \"length\", \"N50\")) %&gt;%\n    ggplot2::ggplot(mapping = aes(x = virulence, y = value))  +\n    ggplot2::geom_boxplot(width = .5, outlier.shape = NA, alpha = 0, linewidth = 1) +\n    ggbeeswarm::geom_quasirandom(\n      mapping = aes(color = virulence),\n      size = 3\n    ) +\n    ggpubr::stat_compare_means(label.y.npc = \"top\", vjust = -1) +\n    ggplot2::scale_x_discrete(\n      labels = c(\"virulent\" = \"BL causing\",\"avirulent\" = \"BL non-causing\")\n    ) +\n    ggplot2::scale_color_manual(\n      name = \"Blackleg phenotype\",\n      values = c(\"red\", \"black\"),\n      breaks = c(\"virulent\", \"avirulent\"),\n      label = c(\"BL-causing\", \"BL non-causing\"),\n      guide = guide_legend(override.aes = list(size = 6))\n    ) +\n    ggplot2::scale_y_continuous(\n      labels = scales::label_comma(scale_cut = c(Mb = 1000000, Gb = 1000000000)),\n      expand = expansion(mult = c(0.1))\n    ) +\n    ggplot2::facet_wrap(\n      facets = ~field, nrow = 1, scales = \"free_y\",\n      labeller = ggplot2::labeller(\n        field = c(\"mRNA_count\" = \"Gene count\", \"length\" = \"Genome size\", \"N50\" = \"N50\")\n      )\n    ) +\n    ggplot2::theme_bw(base_size = 22) +\n    ggplot2::theme(\n      axis.title = element_blank(),\n      # axis.text.x = element_text(angle = 45, hjust = 1),\n      axis.text.x = element_blank(),\n      legend.position = \"bottom\",\n      panel.grid = element_blank()\n    )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n\n\n\n\n\n\n\n\n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\nVirulent Pbr isolates have more protein coding genes than avirulent",
    "crumbs": [
      "Pangenome",
      "Pangenome metadata"
    ]
  },
  {
    "objectID": "scripts/analysis/synteny_demo.html",
    "href": "scripts/analysis/synteny_demo.html",
    "title": "Synteny analysis testing",
    "section": "",
    "text": "This notebook demonstrate some examples of comparing prophage homology group signatures to calculate syntenic Jaccard Index.",
    "crumbs": [
      "Prophages",
      "Syntenic Jaccard index"
    ]
  },
  {
    "objectID": "scripts/analysis/synteny_demo.html#initial-setup",
    "href": "scripts/analysis/synteny_demo.html#initial-setup",
    "title": "Synteny analysis testing",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/compare_hg_sets.R\")\n################################################################################\nset.seed(124)\n\nuseCase &lt;- 1",
    "crumbs": [
      "Prophages",
      "Syntenic Jaccard index"
    ]
  },
  {
    "objectID": "scripts/analysis/synteny_demo.html#parameters-while-detecting-syntenic-overlap",
    "href": "scripts/analysis/synteny_demo.html#parameters-while-detecting-syntenic-overlap",
    "title": "Synteny analysis testing",
    "section": "Parameters while detecting syntenic overlap",
    "text": "Parameters while detecting syntenic overlap\n\nScore for a match of homology group during DP: match\\_score = 5\nScore for a mismatch of homology group during DP: gap\\_penalty = -2\nMaximum number of consecutive mismatches allowed in a valid LCS: maximum\\_gap\\_length = 2\nMinimum LCS required for a valid LCS: minimum\\_chain\\_length = 5",
    "crumbs": [
      "Prophages",
      "Syntenic Jaccard index"
    ]
  },
  {
    "objectID": "scripts/analysis/synteny_demo.html#testing-various-use-cases-for-synteny-analysis",
    "href": "scripts/analysis/synteny_demo.html#testing-various-use-cases-for-synteny-analysis",
    "title": "Synteny analysis testing",
    "section": "Testing various use cases for synteny analysis",
    "text": "Testing various use cases for synteny analysis\n\nUse case 1\nDetecting a longest common subsequence (LCS) between two sequence while allowing for gaps.\n\n\nCode\nseq1 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"r\", \"s\", \"t\")\nseq2 &lt;- c(\"p\", \"q\", \"a\", \"b\", \"c\", \"d\", \"t\", \"f\", \"g\", \"h\", \"i\", \"l\", \"m\", \"n\", \"x\", \"y\", \"z\", \"i\", \"j\", \"k\")\n\nlcs &lt;- longest_local_subsequence(seq1 = seq1, seq2 = seq2)\n\n\n\n\nseq1: a b c d e f g h i j k l m n o r s t\nseq2: p q a b c d t f g h i l m n x y z i j k\n\n\nLCS: a b c d f g h i l m n\nLength: 11\nScore: 47\nAlignment:\na b c d - e f g h i j k l m n\na b c d t - f g h i - - l m n\n\n\n\n\nUse case 2\n\n\nCode\nseq1 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\")\nseq2 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"x\", \"y\", \"z\", \"i\", \"j\", \"k\")\n\nlcs &lt;- longest_local_subsequence(seq1 = seq1, seq2 = seq2)\n\n\n\n\nseq1: a b c d e f g h i j k l m n o p q r s t\nseq2: a b c d e f g h i x y z i j k\n\n\nLCS: a b c d e f g h\nLength: 8\nScore: 40\nAlignment:\na b c d e f g h\na b c d e f g h\n\n\n\n\nUse case 3\nLCS from the 5â end of sequence. A longer LCS can be found if 3 gaps are allowed.\n\n\nCode\nseq1 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\")\nseq2 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"x\", \"y\", \"z\", \"i\", \"j\", \"k\", \"l\", \"m\")\n\nlcs &lt;- longest_local_subsequence(seq1 = seq1, seq2 = seq2)\n\n\n\n\nseq1: a b c d e f g h i j k l m n o p q r s t\nseq2: a b c d e f g h i x y z i j k l m\n\n\nLCS: a b c d e f g h\nLength: 8\nScore: 40\nAlignment:\na b c d e f g h\na b c d e f g h\n\n\n\n\nUse case 4\nLCS from the 3â end of the sequence. A longer LCS can be found if 3 gaps are allowed.\n\n\nCode\nseq1 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\")\nseq2 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\",  \"x\", \"y\", \"z\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\")\n\nlcs &lt;- longest_local_subsequence(seq1 = seq1, seq2 = seq2)\n\n\n\n\nseq1: a b c d e f g h i j k l m n o p q r s t\nseq2: a b c d e x y z f g h i j k l m\n\n\nLCS: f g h i j k l m\nLength: 8\nScore: 40\nAlignment:\nf g h i j k l m\nf g h i j k l m\n\n\n\n\nUse case 5\nChange maxGapLen parameter to increse the syntenic chain length by allowing longer gaps than the default of 2.\n\n\nCode\nseq1 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\")\nseq2 &lt;- rev(c(\"a\", \"b\", \"c\", \"d\", \"x\", \"y\", \"z\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"))\n\nlcs &lt;- syntenic_hg_overlap(ref = seq1, qur = seq2, maxGapLen = 3)\n\n\n\n\nseq1: a b c d e f g h i j k l m n o p q r s t\nseq2: m l k j i h g f e z y x d c b a\n\n\nLCS: a b c d e f g h i j k l m\nLength: 13\nScore: 59\nAlignment:\na b c d - - - e f g h i j k l m\na b c d x y z e f g h i j k l m\n\n\n\n\nUse case 6\nChange minChainLen parameter to allow smaller syntenic matches.\n\n\nCode\nseq1 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\")\nseq2 &lt;- c(\"m\", \"n\")\n\nlcs &lt;- longest_local_subsequence(seq1 = seq1, seq2 = seq2, minChainLen = 2)\n\n\n\n\nseq1: a b c d e f g h i j k l m n o p q r s t\nseq2: m n\n\n\nLCS: m n\nLength: 2\nScore: 10\nAlignment:\nm n\nm n\n\n\n\n\nUse case 7\n\n\nCode\nseq1 &lt;- c(\"m\", \"n\")\nseq2 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\")\n\nlcs &lt;- longest_local_subsequence(seq1 = seq1, seq2 = seq2, minChainLen = 2)\n\n\n\n\nseq1: m n\nseq2: a b c d e f g h i j k l m n o p q r s t\n\n\nLCS: m n\nLength: 2\nScore: 10\nAlignment:\nm n\nm n",
    "crumbs": [
      "Prophages",
      "Syntenic Jaccard index"
    ]
  },
  {
    "objectID": "scripts/analysis/phylo_viz_tree.html",
    "href": "scripts/analysis/phylo_viz_tree.html",
    "title": "Core SNP maximum-likelihood tree with metadata",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages(library(knitr))\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(configr))\nsuppressPackageStartupMessages(library(ggpubr))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(ggnewscale))\nsuppressPackageStartupMessages(library(ape))\nsuppressPackageStartupMessages(library(treeio))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(ggbreak))\nsuppressPackageStartupMessages(library(ggtreeExtra))\nsuppressPackageStartupMessages(library(scales))\n\n## visualized phylogenetic tree with metadata\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/heatmap_utils.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\ntreeMethod &lt;- \"core_snp_ml\"     #ani_upgma, kmer_nj\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\noutDir &lt;- confs$analysis$phylogeny$core_snp_ml$dir\noutPrefix &lt;- paste(outDir, \"/\", treeMethod, sep = \"\")",
    "crumbs": [
      "Pangenome",
      "Phylogeny"
    ]
  },
  {
    "objectID": "scripts/analysis/phylo_viz_tree.html#initial-setup",
    "href": "scripts/analysis/phylo_viz_tree.html#initial-setup",
    "title": "Core SNP maximum-likelihood tree with metadata",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages(library(knitr))\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(configr))\nsuppressPackageStartupMessages(library(ggpubr))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(ggnewscale))\nsuppressPackageStartupMessages(library(ape))\nsuppressPackageStartupMessages(library(treeio))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(ggbreak))\nsuppressPackageStartupMessages(library(ggtreeExtra))\nsuppressPackageStartupMessages(library(scales))\n\n## visualized phylogenetic tree with metadata\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/heatmap_utils.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\ntreeMethod &lt;- \"core_snp_ml\"     #ani_upgma, kmer_nj\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\noutDir &lt;- confs$analysis$phylogeny$core_snp_ml$dir\noutPrefix &lt;- paste(outDir, \"/\", treeMethod, sep = \"\")",
    "crumbs": [
      "Pangenome",
      "Phylogeny"
    ]
  },
  {
    "objectID": "scripts/analysis/phylo_viz_tree.html#import-tree-data-and-required-metadata",
    "href": "scripts/analysis/phylo_viz_tree.html#import-tree-data-and-required-metadata",
    "title": "Core SNP maximum-likelihood tree with metadata",
    "section": "Import tree data and required metadata",
    "text": "Import tree data and required metadata\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId \n)\n\nspeciesOrder &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$phylogeny[[treeMethod]]$files$species_order)\n)\n\nmetDf &lt;- suppressMessages(\n  readr::read_csv(panConf$db$metrics$files$per_genome, col_names = T)\n) %&gt;% \n  dplyr::rename_all(\n    .funs = ~ stringr::str_replace_all(., \"\\\\W+\", \"_\")\n  ) %&gt;% \n  dplyr::rename_all(\n    .funs = ~ stringr::str_replace_all(., \"_+$\", \"\")\n  ) %&gt;% \n  dplyr::select(\n    Genome, Gene_count, mRNA_count, CDS_count, tRNA_count, rRNA_count,\n    Homology_groups, Singletons, GC_content\n  ) %&gt;% \n  dplyr::mutate(genomeId = paste(\"g_\", Genome, sep = \"\")) %&gt;% \n  dplyr::select(-Genome)\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nCode\n## add species order factor levels to SpeciesName column\nsampleInfo %&lt;&gt;% dplyr::mutate(\n  SpeciesName = forcats::fct_relevel(SpeciesName, !!!speciesOrder$SpeciesName)\n) %&gt;% \n  dplyr::left_join(\n    y = metDf, by = \"genomeId\"\n  ) %&gt;% \n  dplyr::group_by(SpeciesName) %&gt;% \n  dplyr::mutate(\n    mRNA_med_diff = mRNA_count - median(mRNA_count),\n    genome_size_med_diff = length - median(length),\n  ) %&gt;% \n  dplyr::ungroup()",
    "crumbs": [
      "Pangenome",
      "Phylogeny"
    ]
  },
  {
    "objectID": "scripts/analysis/phylo_viz_tree.html#plot-the-tree",
    "href": "scripts/analysis/phylo_viz_tree.html#plot-the-tree",
    "title": "Core SNP maximum-likelihood tree with metadata",
    "section": "Plot the tree",
    "text": "Plot the tree\n\n\nCode\n## read tree\nrawTree &lt;- import_tree(\n  confs$analysis$phylogeny[[treeMethod]]$files$tree_rooted\n)\n\n## add data to tree\ntreeTbl &lt;- tidytree::as_tibble(rawTree) %&gt;%\n  dplyr::full_join(y = sampleInfo, by = c(\"label\" = \"genomeId\")) %&gt;%\n  treeio::as.treedata()\n\n\n\nExplore the tree topology\n\n\nCode\nrootNode &lt;- rootnode(treeTbl) \n\n# \n# scale_color_binned(\n#   scale_name = \"stepsn\",\n#   palette = function(x) c(\"green\", \"red\", \"black\"),\n#   breaks = c(70, 90),\n#   limits = c(0, 100),\n#   na.value = \"black\",\n#   show.limits = TRUE,\n#   guide = \"colorsteps\"\n# ) +\n# ggnewscale::new_scale_color()\n\npt_tree &lt;- ggtree::ggtree(tr = treeTbl, color=\"black\", size = 0.7) +\n  theme_tree2() +\n  ggtree::geom_point2(\n    mapping = aes(\n      subset = !isTip & node != rootNode, \n      color = cut(bootstrap, c(0, 70, 90, 100))),\n    shape = 16, size = 2\n    \n  ) +\n  scale_color_manual(\n    values = c(\"blue\", \"#f781bf\", \"black\"),\n    guide = guide_legend(override.aes = list(size = 6), order = 1),\n    name = 'Bootstrap %', \n    breaks = c('(0,70]', '(70,90]'), \n    labels = expression(BP &lt; \"70%\", \"70%\" &lt;= BP * \" &lt; 90%\"),\n    na.value = \"transparent\"\n  ) +\n  ggnewscale::new_scale_fill()\n\n\nOne of the branch is very long and hence trimming its length to 0.5 for visualization purpose.\n\n\nCode\nlongestBranch &lt;- which(pt_tree$data$x == max(pt_tree$data$x))\nlongestBranchTip &lt;- pt_tree$data$label[longestBranch]\ntrimLongestBranchTo &lt;- 0.47\npt_tree$data$x[longestBranch] &lt;- trimLongestBranchTo\n\n\n\n\nRepresentative species phylogenetic tree\n\n\nCode\n# speciesDend &lt;- ape::keep.tip(\n#   phy = ape::ladderize(rawTree@phylo), tip = representativeSpecies\n# ) %&gt;%\n#   ape::chronos() %&gt;%\n#   ape::as.hclust.phylo() %&gt;%\n#   as.dendrogram()\n\nspeciesPhy &lt;- representative_genomes_tree(phy = rawTree@phylo, metadata = sampleInfo) %&gt;% \n  ape::ladderize(right = FALSE)\n\norderConstraints &lt;- dplyr::left_join(\n  x = speciesOrder,\n  y = dplyr::left_join(\n    x = tibble::tibble(genomeId = speciesPhy$tip.label),\n    y = dplyr::select(sampleInfo, genomeId, SpeciesName),\n    by = \"genomeId\"\n  ),\n  by = \"SpeciesName\"\n) %&gt;% \n  dplyr::arrange(-dplyr::row_number())\n\nspeciesPhy &lt;- ape::rotateConstr(\n  phy = speciesPhy, constraint = orderConstraints$genomeId\n)\n\n# ape::plotBreakLongEdges(speciesPhy)\n# ape::axisPhylo()\n\n\nspeciesTree &lt;- ggtree::ggtree(speciesPhy, size = 2, ladderize = FALSE) %&lt;+%\n  dplyr::select(sampleInfo, genomeId, everything()) +\n  ggtree::xlim(NA, 1) +\n  ggtree::geom_tiplab(\n    mapping = aes(label = SpeciesName),\n    align = TRUE, size = 5, fontface = \"italic\"\n  ) +\n  geom_treescale(\n    x = 0, y = nrow(speciesOrder) * 0.9,\n    fontsize = 4, linesize = 2\n  )\n\nspeciesTree$data$x[which(speciesTree$data$label == longestBranchTip)] &lt;- trimLongestBranchTo\n\nggsave(\n  filename = paste(outPrefix, \".representative_species_tree.pdf\", sep = \"\"),\n  plot = speciesTree,\n  width = 6, height = 8\n)\n\nspeciesTree\n\n\n\n\n\n\n\n\n\n\n\nView tree with metadata\n\n\nCode\n# theme for legend adjustment\ntheme_legend &lt;- ggplot2::theme(\n  legend.justification = c(0, 1),\n  legend.box = \"vertical\",\n  legend.text = element_text(size = 16),\n  legend.title = element_text(size = 18, face = \"bold\")\n)\n\n# theme for ggplot\npt_theme &lt;- ggplot2::theme_bw() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title = element_blank()\n  ) +\n  theme_legend\n\npt_tree2 &lt;- pt_tree +\n  theme_tree() +\n  geom_treescale(\n    x = 0, y = nrow(sampleInfo) * 0.5,\n    fontsize = 8, linesize = 2, offset = 4\n  ) +\n  # layout_fan(angle = 10) +\n  scale_y_continuous(expand=c(0, 10)) +\n  ggnewscale::new_scale_color() +\n  ggtree::geom_tiplab(\n    mapping = aes(label = NA),\n    align = TRUE, linesize = 0.25\n  )  +\n  ggnewscale::new_scale_color() +\n  theme_legend\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nCode\nspKeyDf &lt;- get_species_key_data(\n  genomes = sampleInfo$genomeId, speciesInfo = sampleInfo, type = 'wide'\n) %&gt;% \n  tibble::as_tibble(rownames = \"genomeId\") %&gt;% \n  tidyr::pivot_longer(\n    cols = -genomeId,\n    names_to = 'sp', values_to = \"spCol\"\n  ) %&gt;% \n  dplyr::mutate(sp = forcats::fct_relevel(sp, !!!speciesOrder$SpeciesName))\n\n\n\n# species key\npt_spKey &lt;- dplyr::rename(spKeyDf, label = genomeId) %&gt;% \n  ggplot2::ggplot(mapping = aes(x = sp, y = label)) +\n  ggplot2::geom_tile(\n    mapping = aes(fill = spCol)\n  ) +\n  scale_fill_manual(\n    values = c(\"0\" = \"grey95\", \"1\" = \"black\"),\n    guide = \"none\"\n  ) +\n  pt_theme +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks = element_blank()\n  )\n\n# blackleg pcr\npt_pcr &lt;- dplyr::select(sampleInfo, label = genomeId, virulence_pcr) %&gt;% \n  ggplot2::ggplot(mapping = aes(x = \"pcr\", y = label)) +\n  ggplot2::geom_tile(mapping = aes(fill = virulence_pcr)) +\n  # ggplot2::geom_point(mapping = aes(color = virulence_pcr), size = 1) +\n  scale_fill_manual(\n    name = \"PCR BL diagnosis\",\n    values = c(\"red\", \"green\"),\n    breaks = c(\"positive\", \"negative\"),\n    na.value = alpha(\"white\", 0),\n    guide = guide_legend(override.aes = list(size = 6), order = 2)\n  ) +\n  pt_theme +\n  theme(\n    axis.text = element_blank(), axis.ticks = element_blank()\n  )\n\n# blackleg field trial\npt_bl &lt;- dplyr::select(sampleInfo, label = genomeId, virulence) %&gt;% \n  ggplot2::ggplot(mapping = aes(x = \"pcr\", y = label)) +\n  ggplot2::geom_tile(mapping = aes(fill = virulence)) +\n  # ggplot2::geom_point(mapping = aes(color = virulence), size = 1, shape = 17) +\n  scale_fill_manual(\n    name='Field trial',\n    values = c(\"red\", \"green\", \"black\"),\n    breaks = c(\"virulent\", \"avirulent\", \"inconclusive\"),\n    label = c(\"BL-causing\", \"BL non-causing\", \"Inconclusive\"),\n    na.value = alpha(\"white\", 0),\n    guide = guide_legend(override.aes = list(size = 6), order = 3)\n  ) +\n  pt_theme +\n  theme(\n    axis.text = element_blank(), axis.ticks = element_blank()\n  )\n\n# continent\npt_loc &lt;- dplyr::select(sampleInfo, label = genomeId, continent) %&gt;% \n  ggplot2::ggplot(mapping = aes(x = \"location\", y = label)) +\n  ggplot2::geom_tile(mapping = aes(fill = continent)) +\n  scale_fill_manual(\n    name = \"Continent of isolation\",\n    values = c(\"#E6AC00\", \"#D12E96\", \"#5E8B3A\", \"#AA741D\", \"#A5E7E1\", \"#244360\"),\n    na.value = alpha(\"white\", 1),\n    guide = guide_legend(override.aes = list(size = 6), order = 4),\n    na.translate = FALSE\n  ) +\n  pt_theme +\n  theme(\n    axis.text = element_blank(), axis.ticks = element_blank()\n  )\n\n# genome size\npt_len &lt;- dplyr::select(sampleInfo, label = genomeId, length) %&gt;% \n  ggplot2::ggplot(mapping = aes(x = length - median(length), y = label)) +\n  ggplot2::geom_bar(fill = \"white\", color = \"black\", stat = \"identity\") +\n  scale_x_continuous(\n    breaks = scales::breaks_pretty(n = 3),\n    labels = scales::label_number(scale_cut = c(kb = 1000, mb = 1000000))\n  ) +\n  pt_theme +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 16)\n  )\n\n# mRNA count difference with species median\npt_gene_count &lt;- dplyr::select(sampleInfo, label = genomeId, mRNA_count) %&gt;% \n  ggplot2::ggplot(mapping = aes(x = mRNA_count - median(mRNA_count), y = label)) +\n  ggplot2::geom_bar(fill = \"white\", color = \"black\", stat = \"identity\") +\n  scale_x_continuous(\n    breaks = scales::breaks_pretty(n = 3)\n  ) +\n  pt_theme +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 16)\n  )\n\n# %GC\npt_gc &lt;- dplyr::select(sampleInfo, label = genomeId, GC_content) %&gt;% \n  ggplot2::ggplot(mapping = aes(x = GC_content, y = label)) +\n  ggplot2::geom_bar(fill = \"white\", color = \"black\", stat = \"identity\") +\n  ggplot2::coord_cartesian(xlim = c(50, NA)) +\n  scale_x_continuous(\n    n.breaks = 2,\n    breaks = scales::breaks_pretty(n = 1)\n  ) +\n  pt_theme +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 16)\n  )\n\n\npt_tree3 &lt;- pt_spKey %&gt;% aplot::insert_left(pt_tree2, width = 6) %&gt;% \n  aplot::insert_right(pt_pcr, width = 0.2) %&gt;% \n  aplot::insert_right(pt_bl, width = 0.2) %&gt;% \n  aplot::insert_right(pt_loc, width = 0.2) %&gt;% \n  # aplot::insert_right(pt_len, width = 0.8) %&gt;% \n  aplot::insert_right(pt_gene_count, width = 0.8) %&gt;%\n  aplot::insert_right(pt_gc, width = 0.5)\n\nggsave(\n  filename = paste(outPrefix, \".tree_plot.pdf\", sep = \"\"), plot = pt_tree3,\n  width = 15, height = 16\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies key in the above figure marks the species on tree from left to right: P. brasiliense, P. polaris, P. parvum, P. quasiaquaticum, P. aquaticum, P. versatile, P. carotovorum, P. odoriferum, P. actinidiae, P. parmentieri, P. wasabiae, P. punjabense, P. polonicum, P. atrosepticum, P. peruviense, P. zantedeschiae, P. betavasculorum, P. aroidearum, Pectobacterium sp. CFBP8739, P. colocasium, P. fontis, P. cacticida.",
    "crumbs": [
      "Pangenome",
      "Phylogeny"
    ]
  },
  {
    "objectID": "scripts/ms_figures/phage_grp_107.html",
    "href": "scripts/ms_figures/phage_grp_107.html",
    "title": "Phage group 46",
    "section": "",
    "text": "prophage_clusters\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n  \n    \n    \n      clinker\n      \n        \n        Instructions:\n        \n          Drag cluster names to re-order clusters\n          \n            Hover over a locus to reveal box and handles; drag box to move the\n            locus, drag handles to resize it, double click to flip\n          \n          Click genes to anchor the figure around them\n          Right click genes to edit their labels\n          Click cluster names and legend entries to rename them\n          Click legend circles to change gene colours\n          Right click legend entries to remove them and hide links\n          Click scale bar text to change its length\n          Tweak other options below!\n        \n        If you found clinker useful, please cite:\n                  clinker & clustermap.js: Automatic generation of gene cluster comparison figures\n          Cameron L.M. Gilchrist, Yit-Heng Chooi\n          Bioinformatics. doi: https://doi.org/10.1093/bioinformatics/btab007\n        \n        \n          \n            Load data:\n            \n          \n          Save Data\n          Save SVG\n        \n        Plot arrangement\n        \n          Scale factor:\n          \n        \n        \n          Vertical spacing:\n          \n        \n        \n          Show genes to scale:\n          \n        \n        Cluster settings\n        \n          Align labels:\n          \n        \n        \n          Hide locus coordinates:\n          \n        \n        \n          Inter-locus spacing:\n          \n        \n        \n          Cluster name font size:\n          \n        \n        \n          Locus name font size:\n          \n        \n        Gene arrows\n        \n          Body height:\n          \n        \n        \n          Tip height:\n          \n        \n        \n          Tip length:\n          \n        \n        \n          Stroke colour:\n          \n        \n        \n          Stroke width:\n          \n        \n        Gene labels\n        \n          Show gene labels\n            \n        \n        \n          Label rotation (degrees):\n          \n        \n        \n          Label start point:\n          \n        \n        \n          Label anchor:\n          \n            Start\n            Middle\n            End\n          \n        \n        \n          Label font size:\n          \n        \n        \n          Label type:\n          \n        \n        \n          Spacing from gene:\n          \n        \n        \n          Label position:\n          \n            Top\n            Middle\n            Bottom\n          \n        \n        Scale bar\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Length (base pair):\n          \n        \n        \n          Top margin:\n          \n        \n        Colour bar\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Top margin:\n          \n        \n        Legend\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Left margin:\n          \n        \n        Links\n        \n          Show links:\n            \n        \n        \n          Show only best links:\n          \n        \n        \n          Draw links as lines:\n          \n        \n        \n          Draw straight links:\n          \n        \n        \n          Use similarity group colour:\n          \n        \n        \n          Link stroke width:\n          \n        \n        \n          Identity threshold:\n          \n        \n        \n          Show link labels:\n            \n        \n        \n          Label font size:\n          \n        \n        \n          Label position:\n          \n        \n        \n          Show link label background:\n            \n        \n      \n\n    \n    \n    \n  \n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Prophages",
      "Prophage clusters",
      "Phage group 46"
    ]
  },
  {
    "objectID": "scripts/ms_figures/phage_grp_45.html",
    "href": "scripts/ms_figures/phage_grp_45.html",
    "title": "Phage group 45",
    "section": "",
    "text": "prophage_clusters\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n  \n    \n    \n      clinker\n      \n        \n        Instructions:\n        \n          Drag cluster names to re-order clusters\n          \n            Hover over a locus to reveal box and handles; drag box to move the\n            locus, drag handles to resize it, double click to flip\n          \n          Click genes to anchor the figure around them\n          Right click genes to edit their labels\n          Click cluster names and legend entries to rename them\n          Click legend circles to change gene colours\n          Right click legend entries to remove them and hide links\n          Click scale bar text to change its length\n          Tweak other options below!\n        \n        If you found clinker useful, please cite:\n                  clinker & clustermap.js: Automatic generation of gene cluster comparison figures\n          Cameron L.M. Gilchrist, Yit-Heng Chooi\n          Bioinformatics. doi: https://doi.org/10.1093/bioinformatics/btab007\n        \n        \n          \n            Load data:\n            \n          \n          Save Data\n          Save SVG\n        \n        Plot arrangement\n        \n          Scale factor:\n          \n        \n        \n          Vertical spacing:\n          \n        \n        \n          Show genes to scale:\n          \n        \n        Cluster settings\n        \n          Align labels:\n          \n        \n        \n          Hide locus coordinates:\n          \n        \n        \n          Inter-locus spacing:\n          \n        \n        \n          Cluster name font size:\n          \n        \n        \n          Locus name font size:\n          \n        \n        Gene arrows\n        \n          Body height:\n          \n        \n        \n          Tip height:\n          \n        \n        \n          Tip length:\n          \n        \n        \n          Stroke colour:\n          \n        \n        \n          Stroke width:\n          \n        \n        Gene labels\n        \n          Show gene labels\n            \n        \n        \n          Label rotation (degrees):\n          \n        \n        \n          Label start point:\n          \n        \n        \n          Label anchor:\n          \n            Start\n            Middle\n            End\n          \n        \n        \n          Label font size:\n          \n        \n        \n          Label type:\n          \n        \n        \n          Spacing from gene:\n          \n        \n        \n          Label position:\n          \n            Top\n            Middle\n            Bottom\n          \n        \n        Scale bar\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Length (base pair):\n          \n        \n        \n          Top margin:\n          \n        \n        Colour bar\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Top margin:\n          \n        \n        Legend\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Left margin:\n          \n        \n        Links\n        \n          Show links:\n            \n        \n        \n          Show only best links:\n          \n        \n        \n          Draw links as lines:\n          \n        \n        \n          Draw straight links:\n          \n        \n        \n          Use similarity group colour:\n          \n        \n        \n          Link stroke width:\n          \n        \n        \n          Identity threshold:\n          \n        \n        \n          Show link labels:\n            \n        \n        \n          Label font size:\n          \n        \n        \n          Label position:\n          \n        \n        \n          Show link label background:\n            \n        \n      \n\n    \n    \n    \n  \n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Prophages",
      "Prophage clusters",
      "Phage group 45"
    ]
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html",
    "href": "scripts/notebooks/prophage_analysis.html",
    "title": "",
    "section": "",
    "text": "ProphagesAnalysis Code",
    "crumbs": [
      "Prophages",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#detect-prophages-in-genome",
    "href": "scripts/notebooks/prophage_analysis.html#detect-prophages-in-genome",
    "title": "",
    "section": "Detect prophages in genome",
    "text": "Detect prophages in genome\n\ngenomad prophage detection\n# run genomad and checkv pipeline\nnohup \\\ncat data/reference_data/assembly_ids.txt | \\\nparallel --jobs 6 --workdir $PWD --halt now,fail=1 \\\n--keep-order --results logs/genomad/{} \\\n--joblog logs/genomad/parallel.log \\\nscripts/preprocessing/genomad_prophage_annotation.sh {} \\\n&gt;&gt;logs/genomad/nohup.out 2&gt;&1 &\n\n# count of prophage detected in each genome\nfor i in `cat data/reference_data/assembly_ids.txt`\ndo\n  printf \"$i\\t\"\n  tail -n +2 data/prophage_genomad/$i/${i}_summary/${i}_virus_summary.tsv | wc -l\ndone | sort -nr -k2\nCheck the checkV contamination.tsv file to see if there is any other contamination than the expected host,viral, viral,host and host,viral,host ones.\nfor cn in `find -name '*contamination.tsv'`\ndo\ncat $cn | awk '$9 != \"NA\" && NR != 1 && $9 != \"host,viral\" && $9 != \"viral,host\" && $9 != \"host,viral,host\"'\ndone\n\n\nPost processing of prophages\nProcess genomad output and separate prophages into independent FASTA files. Each prophage is assigned a unique identifier with format g_{genome}.vir_{#count}. Prophages are saved in independent FASTA files for downstream analysis, for e.g. ANI clustering of prophages.\n# post processing of prophage data\nRscript scripts/preprocessing/genomad_checkv_merge.R\n\n# save prophages independently\nbash scripts/preprocessing/prophage_genomes_extract.sh\nOutput: - yaml: confs$data$prophages$files$data - file: data/prophage_genomad/prophage_summary.tab\nExtract homology groups for prophages from the pangenome org.db object.\nRscript scripts/analysis/prophage_homology_groups.R\nOutput: - yaml: confs$analysis$prophages$preprocessing$files$raw_prophage_hg - file: analysis/pangenome_v2/prophages/preprocessing/prophage_hgs.tab\nRun ANI and MASH on prophage genomes.\nconda activate pantools_v4_3\n\n# list prophage FASTA files\nls data/prophage_genomad/phage_seqs/*.fna  &gt; data/prophage_genomad/prophage_fasta.list\n\n# run fastANI\nfastANI --ql data/prophage_genomad/prophage_fasta.list \\\n--rl data/prophage_genomad/prophage_fasta.list \\\n--threads 30 --matrix --visualize --fragLen 500 \\\n-o data/prophage_genomad/prophage_ANI\n\n# use mash for distance estimation\nmkdir data/prophage_genomad/mash\n\nmash sketch -p 30 -s 15000 -k 17 -o data/prophage_genomad/mash/prophages_ref \\\n-l data/prophage_genomad/prophage_fasta.list &gt;logs/prophage/mash.log 2&gt;&1\n\nmash info data/prophage_genomad/mash/prophages_ref.msh &gt; \\\ndata/prophage_genomad/mash/prophage_sketch_info.txt\n\nmash dist -p 30 data/prophage_genomad/mash/prophages_ref.msh \\\ndata/prophage_genomad/mash/prophages_ref.msh &gt; \\\ndata/prophage_genomad/mash/prophage_distance.tab\n\n\nQC\nIdentify the fragmented prophages resulting because of the genome assembly that can be merged into a complete prophage. Prepare a consolidated list of prophages which will be used for the subsequent analysis.\nRscript scripts/analysis/prophage_merge.R\nOutput: - yaml: confs$analysis$prophages$preprocessing$files$consolidated - file: analysis/prophages/preprocessing/consolidated_phages.tab\nSummarize the consolidated prophage list to generate various statistics and generate summary plots. Prophages that are fragmented or smaller than the length cutoff are removed and the filtered list of prophages is saved for downstream analysis.\nRscript scripts/analysis/prophage_summary.R\nOutput: - yaml: confs$analysis$prophages$preprocessing$files$prophage_pool - File: analysis/pangenome_v2/prophages/preprocessing/prophages_pool.tab\nProcess prophage MASH and ANI results and visualize MASH similarity matrix for the filtered prophages.\nquarto render scripts/analysis/prophage_seq_similarity.qmd --execute-dir ./",
    "crumbs": [
      "Prophages",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#cluster-prophages",
    "href": "scripts/notebooks/prophage_analysis.html#cluster-prophages",
    "title": "",
    "section": "Cluster prophages",
    "text": "Cluster prophages\nUse shared homology groups between two prophages to establish the child-parent relationship between the prophages in pangenome. First, all vs all syntenic Jaccard similarity is calculated between the prophages. This information is later used to cluster the prophages using two different approaches.\nRscript scripts/analysis/prophage_pairwise_similarity.R\n\nApproach 1\nA heuristic DAG construcion is extracted from the output of the script scripts/analysis/prophage_merge.R. This output includes a best matching parent prophage for each prophage. This is further processed to build a DAG and visualize the clusters.\nPost processing of the child-parent relationships to add additional metadata and save a DAG in tabular format:\nRscript scripts/analysis/prophage_DAG_postprocess.R\nVisualize the clusters of prophages as directed acyclic graphs:\nknitr::knit(\"scripts/analysis/prophage_DAG_viz.qmd\")\n\n\nApproach 2\nWe first tried to use the Affinity propagation (AP) clustering to group the prophages into clusters and have a set of cluster representatives. However, we encountered some clusters generated by the AP clustering where the cluster members did not even share a homology group. Therefore, we decided not to use AP clustering.\nknitr::knit(\"scripts/analysis/prophage_AP_clustering.qmd\")\nCluster the all-vs-all syntenic Jaccard distance matrix using âcompleteâ linkage hierarchical clustering and cut the cluster using carotovoricin cluster as a reference.\nknitr::knit(\"scripts/analysis/prophage_clustering.qmd\")\nOutput: - yaml: confs$analysis$prophages$files$clusters - file: analysis/pangenome_v2/prophages/prophages_clusters.tab\n\n\nSummarize prophage clusters\nSummarize the representative prophages in the pangenome.\nRscript scripts/analysis/prophage_cluster_summary.qmd\nVisualize the representative prophages across pangenome. Use MASH distance to cluster prophages and ANI distance to cluster the genomes in the pangenome.\n\n\n\n\n\n\nCaution\n\n\n\nNeed a fix. Do not run!\nquarto render scripts/analysis/prophage_pangenome_viz.qmd --execute-dir ./\n\n\nVisualize homology group sets for selected prophages as PAV heatmap across the pangenome. Replace the code block in scripts/analysis/homology_group_viz.R script with the following.\nanalysisName &lt;- \"vir_lineage_prophages\"\n\noutDir &lt;- file.path(confs$analysis$prophages$dir)\noutPrefix &lt;- file.path(outDir, analysisName)\n\nsetIds &lt;- c(\n  \"g_189.vir_2\", \"g_400.vir_2\", \"g_399.vir_2\", \"g_448.vir_2\", \"g_189.vir_1\", \n  \"g_3.vir_4\", \"g_438.vir_3\", \"g_350.vir_1\",\n  \"g_172.vir_2\", \"g_393.vir_1\"\n)\nFinally, run the script to generate the plot.\nRscript scripts/analysis/homology_group_viz.R",
    "crumbs": [
      "Prophages",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/prophage_analysis.html#individual-prophage-cluster-analysis",
    "href": "scripts/notebooks/prophage_analysis.html#individual-prophage-cluster-analysis",
    "title": "",
    "section": "Individual prophage cluster analysis",
    "text": "Individual prophage cluster analysis\nScript scripts/analysis/clustersmap_data_prophages.R is used to combine the prophages, homology groups and phylogeny to generate input for clustermap.js visualization tool and generate a report. Below, some configuration is provided for individual prophage clusters.\n\nphage_grp_46: highly conserved in all but 5 genomes from n23 clade\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22429500,hg_22429499 \\\n--inner_region --genomes \"g_63,g_190,g_193,g_411,g_415,g_406,g_194,g_263\"\ncluster_title &lt;- \"phage_grp_46\"\noutDir &lt;- paste(confs$analysis$prophages$dir, \"/cluster_viz/\", cluster_title, sep = \"\")\nhg_color_categories &lt;- confs$analysis$prophages$files$hg_broad_functions\n\n# a vector of prophage identifiers that will be included in clustermap plot\nregion_cluster &lt;- \"phage_grp_46\"\nother_regions &lt;- character(0)\n\nsubSample &lt;- TRUE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: \"host\" phylogeny, \"hg_pav\" for prophage HG PAV,\n# \"cluster_mash\" for prophage MASH and \"default\" to use the provided\nclusterOrder &lt;- \"host\" # host, hg_pav, cluster_mash, default\n\n# whether to keep custom regions at the bottom or consider during phylogeny\n# based ordering\nregions_phy_ordered &lt;- TRUE \n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_190_reg = list(chr = \"NZ_CP059960.1\", start = 1997124, end = 2000186, genomeId = \"g_190\"),\n  g_193_reg = list(chr = \"NZ_CP059957.1\", start = 5005351, end = 5008413, genomeId = \"g_193\"),\n  g_411_reg = list(chr = \"NAK682_contig_2_consensus\", start = 461100, end = 464162, genomeId = \"g_411\"),\n  g_415_reg = list(chr = \"NAK701_contig_5_consensus\", start = 415799, end = 418861, genomeId = \"g_415\"),\n  g_63_reg = list(chr = \"NZ_CP092039.1\", start = 4288654, end = 4291716, genomeId = \"g_63\"),\n  g_406_reg = list(chr = \"NAK641_contig_10_consensus\", start = 469664, end = 474521, genomeId = \"g_406\"),\n  g_194_reg = list(chr = \"NZ_CP059956.1\", start = 4163454, end = 4167352, genomeId = \"g_194\")\n  # g_263_reg = list(chr = \"NZ_CP047495.1\", start = 956237, end = 956907, genomeId = \"g_263\")\n)\n\n\nphage_grp_45: prophage present in all BL-causing isolates\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22429319,hg_22429327 \\\n--genomes \"g_406,g_194\"\ncluster_title &lt;- \"grp_45_mosaicsm\"\noutDir &lt;- paste(confs$analysis$prophages$dir, \"/cluster_viz/\", cluster_title, sep = \"\")\nhg_color_categories &lt;- confs$analysis$prophages$files$hg_broad_functions\n\n# a vector of prophage identifiers that will be included in clustermap plot\nregion_cluster &lt;- NA\nother_regions &lt;- c(\"g_302.vir_1\", \"g_399.vir_1\", \"g_400.vir_2\")\n\nsubSample &lt;- TRUE\ncutHeight &lt;- 0.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 7000\n\n# ordering factor for prophages: \"host\" phylogeny, \"hg_pav\" for prophage HG PAV,\n# \"cluster_mash\" for prophage MASH and \"default\" to use the provided\nclusterOrder &lt;- \"host\" # host, hg_pav, cluster_mash, default\n\n# whether to keep custom regions at the bottom or consider during phylogeny\n# based ordering\nregions_phy_ordered &lt;- FALSE\n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_406_reg = list(chr = \"NAK641_contig_10_consensus\", start = 671040, end = 674984, genomeId = \"g_406\"),\n  g_194_reg = list(chr = \"NZ_CP059956.1\", start = 3940785, end = 3958060, genomeId = \"g_194\")\n)\n\n\nphage_grp_71\ncluster_title &lt;- \"phage_grp_71\"\noutDir &lt;- paste(confs$analysis$prophages$dir, \"/cluster_viz/\", cluster_title, sep = \"\")\nhg_color_categories &lt;- confs$analysis$prophages$files$hg_broad_functions\n\n# a vector of prophage identifiers that will be included in clustermap plot\nregion_cluster &lt;- \"phage_grp_71\"\nother_regions &lt;- c()\n\nsubSample &lt;- FALSE\ncutHeight &lt;- 0.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: \"host\" phylogeny, \"hg_pav\" for prophage HG PAV,\n# \"cluster_mash\" for prophage MASH and \"default\" to use the provided\nclusterOrder &lt;- \"hg_pav\" # host, hg_pav, cluster_mash, default\n\n# whether to keep custom regions at the bottom or consider during phylogeny\n# based ordering\nregions_phy_ordered &lt;- FALSE\n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list()\n\n\nphage_grp_107\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22427004,hg_22426993 \\\n--inner_region --genomes \"g_63,g_194\"\ncluster_title &lt;- \"phage_grp_107\"\noutDir &lt;- paste(confs$analysis$prophages$dir, \"/cluster_viz\", sep = \"\")\nhg_color_categories &lt;- confs$analysis$prophages$files$hg_broad_functions\n\n# a vector of prophage identifiers that will be included in clustermap plot\nregion_cluster &lt;- \"phage_grp_107\"\nother_regions &lt;- character(0)\n\nsubSample &lt;- FALSE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: \"host\" phylogeny, \"hg_pav\" for prophage HG PAV,\n# \"cluster_mash\" for prophage MASH and \"default\" to use the provided\nclusterOrder &lt;- \"host\" # host, hg_pav, cluster_mash, default\n\n# whether to keep custom regions at the bottom or consider during phylogeny\n# based ordering\nregions_phy_ordered &lt;- TRUE \n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_63_reg = list(chr = \"NZ_CP092039.1\", start = 2572138, end = 2573569, genomeId = \"g_63\"),\n  g_194_reg = list(chr = \"NZ_CP059956.1\", start = 2620331, end = 2621761, genomeId = \"g_194\")\n)\n\n\nBL-causing clade specific signatures\ngrpToView &lt;- \"Pbr_FN_specific\"\nsubSample &lt;- FALSE\ncutHeight &lt;- 0.5\naddFlankingRegions &lt;- FALSE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"default\"  # completeness, host, hg_pav, cluster_mash, default\n\n\n# optionally, a custom region list can be provided to generate the plot\ngrp &lt;- list(\n  phage_grp = grpToView,\n  members = c(\"g_302.vir_1\", \"g_400.vir_2\", \"g_409.vir_1\", \"g_302.vir_2\")\n)\n\n\nphage_grp_36\ngrpToView &lt;- \"phage_grp_36\"\nsubSample &lt;- FALSE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\" # completeness, host, hg_pav, cluster_mash\n\n\nphage_grp_50\ngrpToView &lt;- \"phage_grp_50\"\nsubSample &lt;- FALSE\naddFlankingRegions &lt;- TRUE \nflankingRegion &lt;- 10000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"cluster_mash\"  # completeness, host, hg_pav, cluster_mash\n\n\nphage_grp_21\ngrpToView &lt;- \"phage_grp_21\"\nsubSample &lt;- FALSE\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 5000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"cluster_mash\"  # completeness, host, hg_pav, cluster_mash\n\n\nT3SS missing from 4 P. brasiliense genomes\nRscript scripts/utils/HG_range_coordinates.R --hgs hg_22430875,hg_22430876 --genomes g_187,g_368,g_182,g_185,g_236,g_177\ngrpToView &lt;- \"t3ss_regions\"\nsubSample &lt;- FALSE\ncutHeight &lt;- 1.5\naddFlankingRegions &lt;- TRUE\nflankingRegion &lt;- 6000\n\n# ordering factor for prophages: host phylogeny, prophage HG PAV, prophage MASH,\n# completeness score\nclusterOrder &lt;- \"host\"  # completeness, host, hg_pav, cluster_mash\n\n# a vector of prophage identifiers that will be included in clustermap plot\nappendPhages &lt;- c()\n\n# regions to append as list of list with following structure\n# list(r1 = list(chr, start, end, genomeId), r2 = list(chr, start, end, genomeId))\ncustomRegions &lt;- list(\n  g_177_reg  = list(genomeId = \"g_177\", chr = \"NZ_JACGEP010000027.1\", start = 56850, end = 59337),\n  g_182_reg = list(genomeId = \"g_182\", chr = \"NZ_JACGZZ010000068.1\", start = 116773, end = 119260),\n  g_185_reg = list(genomeId = \"g_185\", chr = \"NZ_JACGEN010000027.1\", start = 117747, end = 120234),\n  g_236_reg = list(genomeId = \"g_236\", chr = \"NZ_JACDSF010000026.1\", start = 2275, end = 4762),\n  g_187_reg = list(genomeId = \"g_187\", chr = \"NZ_CP059963.1\", start = 2603432, end = 2605919),\n  g_368_reg = list(genomeId = \"g_368\", chr = \"NZ_JUJT01000001.1\", start = 566617, end = 569104)\n)\n\n# whether to keep custom regions at the bottom or consider during phylogeny\n# based ordering\nregions_phy_ordered &lt;- TRUE",
    "crumbs": [
      "Prophages",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html",
    "href": "scripts/notebooks/pangenome_construction.html",
    "title": "",
    "section": "",
    "text": "PangenomeBuild Code",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#setup",
    "href": "scripts/notebooks/pangenome_construction.html#setup",
    "title": "",
    "section": "Setup",
    "text": "Setup\n#!/usr/bin/env bash\n\nshopt -s expand_aliases\nsource ~/.bash_aliases\n\n# set -e\n# set -u\nset -o pipefail\n\n# source scripts/utils/setup_analysis.sh 'pectobacterium.v2'\nsource scripts/utils/setup_analysis.sh $@\n\nif [ -z ${pan_db+x} ];\nthen\n    echo \"\\$pan_db is unset\"\n    error_exit 1\nfi\n\nsource $TOOLS_PATH/miniconda3/etc/profile.d/conda.sh\nconda activate pantools_master\nexport PANTOOLS=\"$PANTOOLS_4_1\"\n#export PANTOOLS=\"$PANTOOLS_DEV\"\n######################################################################",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#construct-pangenome",
    "href": "scripts/notebooks/pangenome_construction.html#construct-pangenome",
    "title": "",
    "section": "Construct pangenome",
    "text": "Construct pangenome\nTMPDIR=\"$LOCAL_DIR_PATH/tmp\"\n[ ! -d ${TMPDIR} ] && mkdir -p ${TMPDIR}\n[ -d ${TMPDIR}/pantools ] && rm -rd ${TMPDIR}/pantools\n[ ! -d ${TMPDIR}/pantools ] && mkdir -p ${TMPDIR}/pantools\n\nprocess_start build_pangenome_parallel\n$PANTOOLS build_pangenome --threads 40 --scratch-directory ${TMPDIR}/pantools \\\n--num-db-writer-threads 10 --cache-size 25000000 \\\n${pan_db} $PANGENOME_DIR/genomes_fa.list\nerror_exit $?\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.raw\n\n\n## add annotations\nexport PANTOOLS=\"$PANTOOLS_DEV\"\nprocess_start add_annotations\n$PANTOOLS add_annotations --connect ${pan_db} $PANGENOME_DIR/genomes_gff3.list\nerror_exit $?\nexport PANTOOLS=\"$PANTOOLS_4_1\"\n\n## add phenotypes\nprocess_start add_phenotypes\n$PANTOOLS remove_phenotype ${pan_db}\n$PANTOOLS add_phenotypes ${pan_db} $PANGENOME_DIR/genomes_metadata.csv\nerror_exit $?",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#add-interproscan-and-cog-annotations",
    "href": "scripts/notebooks/pangenome_construction.html#add-interproscan-and-cog-annotations",
    "title": "",
    "section": "Add InterProScan and COG annotations",
    "text": "Add InterProScan and COG annotations\n## InterProScan\nprocess_start add_InterProScan_annotations\n$PANTOOLS add_functions ${pan_db} $PANGENOME_DIR/functional_annotations.txt\nerror_exit $?\n\n## COG\nprocess_start add_COG_annotations \n$PANTOOLS add_functions ${pan_db} $PANGENOME_DIR/eggnog_annotations.txt\nerror_exit $?\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.fn\n######################################################################",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#grouping",
    "href": "scripts/notebooks/pangenome_construction.html#grouping",
    "title": "",
    "section": "Grouping",
    "text": "Grouping\ncp -rp $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.backup_fn ${pan_db}\n## BUSCO\nprocess_start busco_protein\n$PANTOOLS busco_protein -t 20 --busco10 enterobacterales_odb10 ${pan_db}\nerror_exit $?\n\noptimal_grouping using subset of genomes or type strains\noptimal_grouping at the Pangenome level is time consuming. An alternative approch using subset of genomes or only type strains was tried and the results were compared with the pangenome scale optimal_grouping.\n## generate random subsets to run `optimal_grouping`\nRscript scripts/build/grouping_subsets_build.R\nThis script will generate a two column TSV file where first column is a set identifier and second column include comma separated genome identifers.\ntypeStrain  374,96,385,386,379,388,116,375,377,347,250,335,338,265,256,32,269,387,266\nrand_001    451,375,343,346,220,403,251,228,431,248,116,440,383,322,306,351,430,15,14,314\nrand_002    451,375,374,224,32,360,252,226,442,248,116,266,386,385,306,387,205,15,265,92\nrand_003    451,375,374,334,279,391,103,445,442,248,116,266,386,27,305,351,393,15,265,21\nrand_004    451,375,374,88,96,193,251,235,431,248,116,440,386,124,335,387,294,15,423,123\n.\n.\n.\nAn example to run optimal grouping on subset of genomes in the pangenome.\n## type strains\nbash ./scripts/build/grouping_subsets_process.sh \"typeStrain\" \"374,96,385,386,379,388,116,375,377,347,250,335,338,265,256,32,269,387,266\"\nUse GNU parallel to run optimal grouping on all random sets.\n## run `optimal_grouping` on these random subsets\nnohup \\\n# sed -n '1,6!p' analysis/03_pangenome_pecto_v2/subset_optimal_group/subsets_conf.tab | \\\ncat analysis/03_pangenome_pecto_v2/subset_optimal_group/subsets_conf.tab | \\\nparallel --colsep '\\t' --jobs 10  --keep-order --workdir $PWD --halt soon,fail=1 \\\n--load 100% --results logs/pantools/sub_opt_group/{1} \\\n--joblog logs/pantools/sub_opt_group/sub_opt_group.log \\\nbash ./scripts/build/grouping_subsets_process.sh {1} {2} \\\n&gt;&gt;logs/pantools/sub_opt_group/nohup.out 2&gt;&1 &\nSummarize the results by plotting in R\n## summarize the results\nRscript scripts/build/grouping_subsets_analyze.R\n\n\nGrouping at the pangenome level\n## grouping with relaxation 4 setting\nprocess_start group_v4\nnice $PANTOOLS group -t 30 --relaxation 4 ${pan_db}\nerror_exit $?\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.grp\n\n## optimized grouping\nprocess_start optimal_grouping\nnice $PANTOOLS optimal_grouping -t 30 ${pan_db} ${pan_db}/busco/enterobacterales_odb10\nerror_exit $?\n\n\nRscript ${pan_db}/optimal_grouping/optimal_grouping.R\n$PANTOOLS grouping_overview ${pan_db}\n\n## fix a grouping setting\n$PANTOOLS change_grouping -v 4 ${pan_db}\n$PANTOOLS grouping_overview ${pan_db}\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.opt_grp\n######################################################################",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#pangenome-exploration",
    "href": "scripts/notebooks/pangenome_construction.html#pangenome-exploration",
    "title": "",
    "section": "Pangenome exploration",
    "text": "Pangenome exploration\n## extract the metrics from pangenome\nprocess_start extract_pangenome_metrics\n$PANTOOLS metrics ${pan_db}\nerror_exit $?\n\ngene classification\n\ncore-unique variation w.r.t. cutoffs\n## Core unique thresholds\nprocess_start core_unique_thresholds\n$PANTOOLS core_unique_thresholds ${pan_db}\nerror_exit $?\nRscript ${pan_db}/core_unique_thresholds/core_unique_thresholds.R\n\n\ncore and unique genes\n## gene classification: core and unique\nprocess_start gene_classification_core_unique\n$PANTOOLS gene_classification ${pan_db} \nerror_exit $?\n\n## Gene distance tree\nRscript ${pan_db}/gene_classification/gene_distance_tree.R\n\nmv ${pan_db}/gene_classification ${pan_db}/gene_classification.100.0\n\n\nsoft core (95%) and cloud (5%) genes\n## gene classification: soft core and cloud\nprocess_start gene_classification_softcore_cloud\n$PANTOOLS gene_classification --core-threshold 95 --unique-threshold 5 ${pan_db} \nerror_exit $?\n\n## Gene distance tree\nRscript ${pan_db}/gene_classification/gene_distance_tree.R\nmv ${pan_db}/gene_classification ${pan_db}/gene_classification.95.5\n\n\n\nExtract information for all homology groups\n## homology group information\nsed -i.bak -r -n '/^#/! p' ${pan_db}/gene_classification.100.0/all_homology_groups.csv\nprocess_start \"extracting homology group information\"\n$PANTOOLS group_info -H ${pan_db}/gene_classification.100.0/all_homology_groups.csv ${pan_db}\nerror_exit $?\n\n\nk-mer classification\n\ncore and unique kmers\n## K-mer classification: soft core and cloud\nprocess_start kmer_classification_core_unique\n$PANTOOLS k_mer_classification ${pan_db}\nerror_exit $?\n\nRscript ${pan_db}/kmer_classification/genome_kmer_distance_tree.R\nmv ${pan_db}/kmer_classification ${pan_db}/kmer_classification.100.0\n\n\nsoft core (95%) and cloud (5%) kmers\n## K-mer classification: soft core and cloud\nprocess_start kmer_classification_softcore_cloud\n$PANTOOLS k_mer_classification --core-threshold 95 --unique-threshold 5 ${pan_db}\nerror_exit $?\n\nRscript ${pan_db}/kmer_classification/genome_kmer_distance_tree.R\nmv ${pan_db}/kmer_classification ${pan_db}/kmer_classification.95.5\n\n\n\nPangenome structure\n\nUse all genomes to determine pangenome structure\n## Pangenome structure: genes\nprocess_start pangenome_structure_gene\n$PANTOOLS pangenome_structure -t 20 ${pan_db}\nerror_exit $?\n\nRscript ${pan_db}/pangenome_size/gene/pangenome_growth.R\nRscript ${pan_db}/pangenome_size/gene/gains_losses_median_or_average.R\nRscript ${pan_db}/pangenome_size/gene/gains_losses_median_and_average.R\nRscript ${pan_db}/pangenome_size/gene/heaps_law.R\n\nmv ${pan_db}/pangenome_size/gene ${pan_db}/pangenome_size/gene.pangenome\n\n## Pangenome structure: kmer\nprocess_start pangenome_structure_kmer\n$PANTOOLS pangenome_structure -t 20 --kmer ${pan_db}\nerror_exit $?\n\nRscript ${pan_db}/pangenome_size/kmer/pangenome_growth.R\n######################################################################\n\n\n\nFunctional classification\n\ncore and unique functional classification\n## functional_classification: core and unique\nprocess_start functional_classification_core_unique\n$PANTOOLS functional_classification ${pan_db}\nerror_exit $?\n\nmv ${pan_db}/function/functional_classification ${pan_db}/function/functional_classification.100.0\n\n\nsoftcore (95%) and cloud (5%) functional classification\n## functional_classification: softcore and cloud\nprocess_start functional_classification_softcore_cloud\n$PANTOOLS functional_classification --core-threshold 95 --unique-threshold 5 ${pan_db}\nerror_exit $?\n\nmv ${pan_db}/function/functional_classification ${pan_db}/function/functional_classification.95.5\n\n\nfunction overview\n## function_overview\nprocess_start function_overview\n$PANTOOLS function_overview ${pan_db} \nerror_exit $?\n\nRscript ${pan_db}/cog_per_class.R\n## GO enrichment for core, accessory and unique homology groups\nfor grp in core accessory unique\ndo\n    process_start GO_enrichment:$grp\n    $PANTOOLS go_enrichment -H ${pan_db}/gene_classification.100.0/${grp}_groups.csv  ${pan_db}\n    error_exit $?\n    mv ${pan_db}/function/go_enrichment ${pan_db}/function/go_enrichment.100.0.${grp} \ndone\n\n## GO enrichment for soft-core, accessory and cloud homology groups\nfor grp in core accessory unique\ndo\n    process_start GO_enrichment:$grp\n    $PANTOOLS go_enrichment -H ${pan_db}/gene_classification.95.5/${grp}_groups.csv  ${pan_db}\n    error_exit $?\n    mv ${pan_db}/function/go_enrichment ${pan_db}/function/go_enrichment.95.5.${grp} \ndone\n\n#######################################################################\n\n\n\nMSA for all homology groups\n## MSA for homology groups\nprocess_start \"msa for homology groups\"\n$PANTOOLS msa -t 12 --method per-group --mode nucleotide ${pan_db}\nerror_exit $?\n\ncp -rp ${pan_db} $PANGENOME_DIR/backup/${PANGENOME_NAME}.DB.msa",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#phylogeny-analysis",
    "href": "scripts/notebooks/pangenome_construction.html#phylogeny-analysis",
    "title": "",
    "section": "Phylogeny analysis",
    "text": "Phylogeny analysis\n\n## SNP tree using core gene SNPs\nprocess_start core_phylogeny\ncp -rp ${pan_db}/gene_classification.100.0 ${pan_db}/gene_classification\n$PANTOOLS core_phylogeny -t 20  --clustering-mode ML ${pan_db}\nerror_exit $?\nrm -r ${pan_db}/gene_classification\n\n## running_job: leunissen\nmkdir ${pan_db}/core_snp_tree/ML_tree \nnohup nice iqtree -T 40 -s data/pangenomes/pectobacterium.v2/backup/pectobacterium.v2.DB.msa/core_snp_tree/informative.fasta -redo -B 1000 \\\n--prefix data/pangenomes/pectobacterium.v2/backup/pectobacterium.v2.DB.msa/core_snp_tree/ML_tree/informative.fasta \\\n&gt;&gt; logs/v2_pecto/core_tree.log 2&gt;&1 &\n\nnohup nice iqtree -T 40 -s informative.fasta -B 1000 --prefix ML_tree/informative.fasta \\\n&gt;&gt; core_tree.log 2&gt;&1 &\n\n## run IQ-tree with a specific model\nnohup iqtree -T 30 -s ${pan_db}/core_snp_tree/informative.fasta -redo -B 1000 \\\n-m GTR+F+ASC --prefix ${pan_db}/core_snp_tree/informative.fasta.GTR_F_ASC \\\n&gt; logs/v2_pecto/iqtree_GTR_F_ASC.log 2&gt;&1 &\n\n######################################################################",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#build-pangenome-org-db-object",
    "href": "scripts/notebooks/pangenome_construction.html#build-pangenome-org-db-object",
    "title": "",
    "section": "Build pangenome org-db object",
    "text": "Build pangenome org-db object\nExtract pangenome data from Neo4j database using Python script.\npython3 scripts/build/neo4j_extract_go.py\nCreate org.db AnnotationHub like object for the pangenome for easier exploratory analysis in R.\nRscript scripts/build/pangenome_org_db.R",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#combine-protein-sequences",
    "href": "scripts/notebooks/pangenome_construction.html#combine-protein-sequences",
    "title": "",
    "section": "Combine protein sequences",
    "text": "Combine protein sequences\nfor i in data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/proteins/proteins_*.fasta\ndo\n    id=$(basename ${i} | sed -r 's/proteins_([0-9]+).fasta/\\1/')\n    awk -v sample=${id} '{sub(/^&gt;/, \"&gt;\"sample\"_\"); print }' $i\ndone &gt; data/pangenomes/pectobacterium.v2/proteins_db/proteins_combined.faa",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_construction.html#annotate-proteins-with-phrog-annotations-for-bacteriophages",
    "href": "scripts/notebooks/pangenome_construction.html#annotate-proteins-with-phrog-annotations-for-bacteriophages",
    "title": "",
    "section": "Annotate proteins with PHROG annotations for bacteriophages",
    "text": "Annotate proteins with PHROG annotations for bacteriophages\n\nRemove redundency in pan-proteome for efficiency\nconda activate mmseq2\n\nmkdir data/pangenomes/pectobacterium.v2/proteins_db/proteins_combined.mmseq_db\nMMSEQ_DB=\"data/pangenomes/pectobacterium.v2/proteins_db/proteins_combined.mmseq_db/proteins_combined.mmseq_db\"\n\n# create mmseq db for pan-proteome\nmmseqs createdb data/pangenomes/pectobacterium.v2/proteins_db/proteins_combined.faa \\\n${MMSEQ_DB} &gt; \\\nlogs/mmseq_db.log 2&gt;&1\n\nmkdir data/pangenomes/pectobacterium.v2/proteins_db/proteins_nr_hash\n\n## create non-redundant protein set\nmmseqs clusthash ${MMSEQ_DB}  \\\ndata/pangenomes/pectobacterium.v2/proteins_db/proteins_nr_hash/nr_hash \\\n--min-seq-id 1 --threads 32\n\nMMSEQ_NR_CLUSTER_DB=\"data/pangenomes/pectobacterium.v2/proteins_db/proteins_nr.clust/proteins_nr.clust\"\n\nmmseqs clust ${MMSEQ_DB} \\\ndata/pangenomes/pectobacterium.v2/proteins_db/proteins_nr_hash/nr_hash \\\n${MMSEQ_NR_CLUSTER_DB}\n\n## create TSV file with cluster representatives\nmmseqs createtsv \\\n${MMSEQ_DB} ${MMSEQ_DB} ${MMSEQ_NR_CLUSTER_DB} \\\ndata/pangenomes/pectobacterium.v2/proteins_db/proteins_nr.clust/proteins_nr.clust.tsv\n\nMMSEQ_NR_SUB_DB=data/pangenomes/pectobacterium.v2/proteins_db/proteins_nr.clust/proteins_rep.db\n\n## create a sub-db of only cluster representative sequences\nmmseqs createsubdb ${MMSEQ_NR_CLUSTER_DB} ${MMSEQ_DB} ${MMSEQ_NR_SUB_DB}\n\n\n## Extract representative sequence\nmmseqs convert2fasta ${MMSEQ_NR_SUB_DB} \\\ndata/pangenomes/pectobacterium.v2/proteins_db/proteins_nr.clust/proteins_rep.faa \n\n\nSearch PHROGS against the representative proteins using MMSeq2\nconda activate mmseq2\n\n# search pan-proteome using PHROG profiles\nmmseqs search ${TOOLS_PATH}/phrog_profiles/phrogs_mmseqs_db/phrogs_profile_db \\\n${MMSEQ_NR_SUB_DB} \\\ndata/phrog_annotation/phrog_nr_proteome_result \\\n./tmp -s 7 --threads 64 &gt; logs/mmseq_search.log 2&gt;&1\n\n# create TSV results file\nmmseqs createtsv ${TOOLS_PATH}/phrog_profiles/phrogs_mmseqs_db/phrogs_profile_db \\\n${MMSEQ_NR_SUB_DB} data/phrog_annotation/phrog_nr_proteome_result \\\ndata/phrog_annotation/phrog_nr_proteome_result.tsv",
    "crumbs": [
      "Pangenome",
      "Build"
    ]
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html",
    "href": "scripts/notebooks/preprocessing.html",
    "title": "",
    "section": "",
    "text": "PreprocessingPreprocessing Code",
    "crumbs": [
      "Preprocessing",
      "Preprocessing"
    ]
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#data-download-from-ncbi-using-eutils",
    "href": "scripts/notebooks/preprocessing.html#data-download-from-ncbi-using-eutils",
    "title": "",
    "section": "Data download from NCBI using EUtils",
    "text": "Data download from NCBI using EUtils\n## number of records available in NCBI\nesearch -db assembly -query \"pectobacterium [ORGN]\" -email \"lakhansing.pardeshi@wur.nl\"\n\n## download the Assembly DocumentSummary file\nesearch -db assembly -query \"pectobacterium [ORGN]\" -email \"lakhansing.pardeshi@wur.nl\" | \\\nefetch -format docsum &gt; data/reference_data/assembly_docsum.xml\n\n## download associated BioSample DocumentSummary file\nesearch -db assembly -query \"pectobacterium [ORGN]\" -email \"lakhansing.pardeshi@wur.nl\" | \\\nelink -target biosample  | \\\nefetch -format docsum &gt; data/reference_data/biosample_docsum.xml\n\n\n## get all FPT paths for NCBI assemblies\nesearch -db assembly -query \"pectobacterium [ORGN]\" | \\\nefetch -format docsum -email \"lakhansing.pardeshi@wur.nl\" | \\\nxtract -pattern DocumentSummary \\\n-tab \",\" -element AssemblyAccession AssemblyName FtpPath_RefSeq FtpPath_GenBank | \\\nawk '\n    BEGIN { FS=\",\"};\n    {\n    if($4==\"\") file=$3; else file=$3;\n    gsub(/ +/, \"_\", $0);\n    printf \"%s/%s_%s_genomic.fna.gz\\n\", file, $1, $2 &gt; \"data/reference_data/ncbi_assembly_ftp.txt\";\n    printf \"%s_%s\\n\", $1, $2 &gt; \"data/reference_data/ncbi_assembly_ids.txt\";\n    }\n'\n\n## NCBI prokaryotes ANI file\nwget --timestamping https://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/ANI_report_prokaryotes.txt -P data/other/\n\n\ncat data/reference_data/local_assembly_ids.txt data/reference_data/ncbi_assembly_ids.txt \\\n&gt; data/reference_data/pre_qc_assembly_ids.txt\n\nmkdir data/reference_data/batches\nsplit -a 2 -d -n r/8 data/reference_data/pre_qc_assembly_ids.txt data/reference_data/batches/temp_ids_batch.",
    "crumbs": [
      "Preprocessing",
      "Preprocessing"
    ]
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#check-if-there-are-any-new-assemblies-released-on-ncbi",
    "href": "scripts/notebooks/preprocessing.html#check-if-there-are-any-new-assemblies-released-on-ncbi",
    "title": "",
    "section": "Check if there are any new assemblies released on NCBI",
    "text": "Check if there are any new assemblies released on NCBI\n## check and extract new assembly IDs\nfor sampleId in `cat data/reference_data/pre_qc_assembly_ids.txt`\ndo\n    if ! find data/genomes/ -name ${sampleId}* | grep -q \".\"\n    then\n        echo $sampleId\n    fi\ndone &gt; data/reference_data/temp_assembly_ids.txt\n\n\n## download and unzip the FASTA files\nfor sampleId in `cat data/reference_data/temp_assembly_ids.txt`\ndo\n    grep \"/$sampleId/\" data/reference_data/ncbi_assembly_ftp.txt\ndone | \\\nxargs -I {} wget --timestamping {} -P data/genomes/ncbi/\n\ngzip -d data/genomes/ncbi/*.gz",
    "crumbs": [
      "Preprocessing",
      "Preprocessing"
    ]
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#run-standard-annotations-for-all-the-genomes",
    "href": "scripts/notebooks/preprocessing.html#run-standard-annotations-for-all-the-genomes",
    "title": "",
    "section": "Run standard annotations for all the genomes",
    "text": "Run standard annotations for all the genomes\n\nProkka annotation for bacterial genomes\nnohup \\\nls data/genomes/?(NCBI|WUR|NIVIP|NAK)/*.?(fa|fna|fasta) | \\\nparallel --gnu --keep-order --jobs 1 --halt now,fail=1 \\\n--results logs/prokka/{/.} --joblog logs/prokka/parallel.log \\\nscripts/preprocessing/prokka_annotation.sh {} \\\n&gt;logs/prokka/nohup_batch00.out 2&gt;&1 &\nProcessing in parallel is failing without any specific error. Hence the data will be processed in serial mode. Further debugging is required to understand the parallel processing failure. For now, running GNU parallel with --jobs 1 setting in serial mode.\n\nRemove the FASTA sequence at the end of prokka gff files\nfor i in `cat data/reference_data/pre_qc_assembly_ids.txt`\ndo\nsed -n '1,/##FASTA/ {/##FASTA/!p}' data/prokka_annotation/${i}/${i}.gff &gt; \\\ndata/prokka_annotation/${i}/${i}.gff3\ndone\n\n\nFASTA file indexing\nprintf '' &gt; analysis/QC/assembly_chr_size.txt\nprintf '' &gt; data/reference_data/pre_qc_genomes_fa.list\nconda activate omics_py37\n\nfor i in `cat data/reference_data/pre_qc_assembly_ids.txt`\ndo\n    samtools faidx data/prokka_annotation/${i}/${i}.fna\n    sort -r -n -k 2,2 data/prokka_annotation/${i}/${i}.fna.fai | \\\n    awk  -v i=${i} '{print i, \"\\t\", $1, \"\\t\", $2}' &gt;&gt; analysis/QC/assembly_chr_size.txt\n    ls data/prokka_annotation/${i}/${i}.fna &gt;&gt; data/reference_data/pre_qc_genomes_fa.list\n\n    faToTwoBit data/prokka_annotation/${i}/${i}.fna data/prokka_annotation/${i}/${i}.2bit\n\ndone\n\n\n\nBUSCO protein and genome assembly evaluation\n## !GNU parallel on single server\nnohup \\\ncat data/reference_data/temp_assembly_ids.txt | \\\nparallel --jobs 1 --workdir $PWD --halt now,fail=1 --keep-order \\\n--results logs/busco/{} --joblog logs/busco/parallel.log \\\n$PWD/scripts/preprocessing/qc_busco.sh {} \\\n&gt;logs/busco/nohup03.out 2&gt;&1 &\nThis is failing with parallel, most likely because of the number of open files exceeding the ulimit. Need to debug further. For now, running GNU parallel with --jobs 1 setting is serial mode.\n\n\nQUAST assembly evaluation\nnohup \\\ncat data/reference_data/temp_assembly_ids.txt | \\\nparallel --jobs 6 --workdir $PWD --halt now,fail=1 \\\n--keep-order --results logs/quast/{} \\\n--joblog logs/quast/parallel.log \\\n./scripts/preprocessing/qc_quast.sh {} \\\n&gt;&gt;logs/quast/nohup.out 2&gt;&1 &\n\n\nInterProScan functional annotation\n## GNU parallel on single server\nnohup \\\ncat data/reference_data/temp_assembly_ids.txt | \\\nparallel --jobs 6 --workdir $PWD --halt now,fail=1 \\\n--keep-order --results logs/interproscan/{} \\\n--joblog logs/interproscan/parallel_batch06.log \\\n./scripts/preprocessing/interproscan_annotation.sh {} \\\n&gt;&gt;logs/interproscan/nohup_batch07.out 2&gt;&1 &\n\n\n## GNU parallel: submit jobs to another server\nhead -n 10 data/reference_data/sample_subsets/genebank_ass.txt | \\\nenv_parallel --jobs 4 --workdir $PWD --halt now,fail=1 \\\n--keep-order --results logs/interproscan/{} \\\n--joblog logs/interproscan/parallel.log \\\n--sshlogin 4/waterman.bioinformatics.nl --cleanup \\\n--env error_exit --env process_start --env TOOLS_PATH --env LUSTRE_HOME \\\n./scripts/preprocessing/interproscan_annotation.sh {}\n\n\neggNOG annotation\nconda activate eggnog\n\n## download eggNOG data\ndownload_eggnog_data.py -M -F -H -d 1 --dbname root -f -y\ndownload_eggnog_data.py -D -H -d 2759 --dbname eukaryota -q -y\ndownload_eggnog_data.py -D -H -d 2 --dbname bacteria -q -y\ndownload_eggnog_data.py -D -H -d 10239 --dbname viruses -q -y\ndownload_eggnog_data.py -D -H -d 4751 --dbname fungi -q -y\ndownload_eggnog_data.py -D -H -d 2157 --dbname archea -q -y\n\nmmseqs createindex \"$EGGNOG_DATA_DIR\"/mmseqs/mmseqs.db /local_scratch/parde001/tmp\n\n## create mmseq database for bacteria, archea and viruses\ncreate_dbs.py -m mmseqs --dbname bact_arch_vir --taxids 2,2157,10239 -y\n\n## annotate for eggNOG clusters\nfor i in `cat data/reference_data/assembly_ids.txt`\ndo\n    file_aa=\"data/prokka_annotation/${i}/${i}.faa\"\n    \n    emapper.py --cpu 20 -m mmseqs --dbmem --go_evidence all  \\\n    -i ${file_aa} -o ${i} --output_dir data/eggnog \\\n    --scratch_dir /local_scratch/parde001/ --temp_dir /local_scratch/parde001/tmp\n\n    error_exit $?\ndone\n\n\nMultiQC\n## QUAST MultiQC\nnohup \\\nmultiqc -f --filename quast_multiqc --interactive --title \"QUAST report\" \\\n--outdir analysis/multiqc/ --module quast data/quast/ \\\n&gt;&gt;nohup.out 2&gt;&1 &\n\n## BUSCO protein MultiQC\nnohup \\\nmultiqc -f --filename busco_prot_multiqc --interactive --title \"BUSCO report\" \\\n--outdir analysis/multiqc/ --module busco data/busco.prot/ \\\n&gt;&gt;nohup.out 2&gt;&1 &\n\n## BUSCO genome MultiQC\nnohup \\\nmultiqc -f --filename busco_geno_multiqc --interactive --title \"BUSCO report\" \\\n--outdir analysis/multiqc/ --module busco data/busco.geno/ \\\n&gt;&gt;nohup.out 2&gt;&1 &\n\n\nfastANI\nprocess_start \"ANI on all genomes\"\nnohup bash scripts/preprocessing/ANI_processing.sh \\\ndata/reference_data/pre_qc_genomes_fa.list \\\nanalysis/02_fastANI/ANI_results &gt;logs/fastANI.log 2&gt;&1 &\nerror_exit $?\n\n\nDefense-finder\nconda activate defensefinder\n\nfor i in `cat data/reference_data/assembly_ids.txt`\ndo\n    file_aa=\"data/prokka_annotation/${i}/${i}.faa\"\n    out_dir=\"data/defense_finder/${i}\"\n    mkdir -p ${out_dir}\n\n    process_start \"defense-finder: ${i}\"\n\n    defense-finder run --workers 20 -o ${out_dir} \\\n    --models-dir $TOOLS_PATH/defense-finder-models ${file_aa}\n\n    error_exit $?\ndone\nCombine Defense-finder output into single file\n# combine systems\nfor i in `cat data/reference_data/assembly_ids.txt`\ndo\n    awk -v var=\"${i}\" '!/^sys_id/ {print var \"\\t\" $0}' data/defense_finder/${i}/${i}_defense_finder_systems.tsv\ndone &gt; data/defense_finder/defense_systems.tsv\n\n# combine genes\nfor i in `cat data/reference_data/assembly_ids.txt`\ndo\n    awk -v var=\"${i}\" 'NR&gt;1 {print var \"\\t\" $0}' data/defense_finder/${i}/${i}_defense_finder_genes.tsv\ndone &gt; data/defense_finder/defense_systems_genes.tsv",
    "crumbs": [
      "Preprocessing",
      "Preprocessing"
    ]
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#mmseq2-database",
    "href": "scripts/notebooks/preprocessing.html#mmseq2-database",
    "title": "",
    "section": "MMSeq2 database",
    "text": "MMSeq2 database\nconda activate mmseq2\n\nmmseqs createdb data/pangenomes/pectobacterium.v2/mmseq_panproteome_db",
    "crumbs": [
      "Preprocessing",
      "Preprocessing"
    ]
  },
  {
    "objectID": "scripts/notebooks/preprocessing.html#prepare-data-for-pangenome-construction",
    "href": "scripts/notebooks/preprocessing.html#prepare-data-for-pangenome-construction",
    "title": "",
    "section": "Prepare data for pangenome construction",
    "text": "Prepare data for pangenome construction\n\nExtract metadata from NCBI XML files\nRscript scripts/preprocessing/raw_prebuild_metadata.R\n\n\nCorrect taxonomy\nRscript scripts/preprocessing/taxonomy_check_inhouse.R\n\n\nPrepare final metadata table with updated taxonomy\nRscript scripts/preprocessing/build_metadata.R\n\n\nPrepare PanTools input files\nRscript scripts/preprocessing/prepare_PanTools_input.R",
    "crumbs": [
      "Preprocessing",
      "Preprocessing"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html",
    "href": "scripts/notebooks/pangenome_analysis.html",
    "title": "",
    "section": "",
    "text": "PangenomeAnalysis Code",
    "crumbs": [
      "Pangenome",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html#setup",
    "href": "scripts/notebooks/pangenome_analysis.html#setup",
    "title": "",
    "section": "Setup",
    "text": "Setup\n#!/usr/bin/env bash\n\nshopt -s expand_aliases\nsource ~/.bash_aliases\n\n# set -e\n# set -u\nset -o pipefail\n\n# source scripts/utils/setup_analysis.sh 'pectobacterium.v2'\nsource scripts/utils/setup_analysis.sh $@\n\nif [ -z ${pan_db+x} ];\nthen\n    echo \"\\$pan_db is unset\"\n    error_exit 1\nfi\n\nsource $TOOLS_PATH/miniconda3/etc/profile.d/conda.sh\nconda activate pantools_master\nexport PANTOOLS=\"$PANTOOLS_4_1\"\n\n######################################################################",
    "crumbs": [
      "Pangenome",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html#use-subset-of-genomes-to-determine-pangenome-structure",
    "href": "scripts/notebooks/pangenome_analysis.html#use-subset-of-genomes-to-determine-pangenome-structure",
    "title": "",
    "section": "Use subset of genomes to determine pangenome structure",
    "text": "Use subset of genomes to determine pangenome structure\n## Pangenome structure for species with more than 20 genomes\nfor sp in `awk -F \"\\t\" '{ if (NR != 1 && $2 &gt;= 20) {print $1} }' $PANGENOME_DIR/analysis_configs/species_wise_genomes.tab`\ndo\n    genomes=`grep \"^${sp}\\b\" $PANGENOME_DIR/analysis_configs/species_wise_genomes.tab | cut -f3`\n    \n    process_start \"pangenome_structure for genome of species ${sp}: $genomes\"\n    $PANTOOLS pangenome_structure -t 20 --include ${genomes} ${pan_db}\n    error_exit $?\n\n    Rscript ${pan_db}/pangenome_size/gene/pangenome_growth.R\n    Rscript ${pan_db}/pangenome_size/gene/gains_losses_median_or_average.R\n    Rscript ${pan_db}/pangenome_size/gene/gains_losses_median_and_average.R\n    # Rscript ${pan_db}/pangenome_size/gene/heaps_law.R\n\n    ## move results to a folder\n    psDir=${pan_db}/pangenome_size/gene.${sp}\n    [ -d ${psDir} ] && rm -r ${psDir}\n    mv ${pan_db}/pangenome_size/gene ${psDir}\ndone\n\n## update the path in heaps_law.R script\ncd ${pan_db}/pangenome_size\nfor i in gene.*\ndo\n    sed -i.bak \"s/pangenome_size\\/gene/pangenome_size\\/gene.$i/g\" $i/heaps_law.R\ndone\ncd $PROJECT_DIR",
    "crumbs": [
      "Pangenome",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html#visualize-pangenome-metadata",
    "href": "scripts/notebooks/pangenome_analysis.html#visualize-pangenome-metadata",
    "title": "",
    "section": "Visualize pangenome metadata",
    "text": "Visualize pangenome metadata\nquarto render scripts/analysis/pangenome_metadata.viz.qmd",
    "crumbs": [
      "Pangenome",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html#phylogeny-analysis",
    "href": "scripts/notebooks/pangenome_analysis.html#phylogeny-analysis",
    "title": "",
    "section": "Phylogeny analysis",
    "text": "Phylogeny analysis\n## UPGMA tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./analysis/pangenome_v2/phylogeny/ani/ANI_UPGMA.pangenome.newick \\\n--name \"ani_upgma\" --config project_config.yaml --save_leaf_order\n\n## Neighbor joining tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./analysis/pangenome_v2/phylogeny/ani/ANI_NJ.pangenome.newick \\\n--name \"ani_nj\" --config project_config.yaml --save_leaf_order\n\n## gene distance NJ tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/gene_classification.100.0/gene_distance.tree \\\n--name \"gene_nj\" --config project_config.yaml \n\n## kmer distance UPGMA tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/kmer_classification.100.0/kmer.upgma.newick \\\n--name \"kmer_upgma\" --config project_config.yaml --save_leaf_order\n\n## kmer distance NJ tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/kmer_classification.100.0/kmer.nj.newick \\\n--name \"kmer_nj\" --config project_config.yaml --save_leaf_order\n\n## core-SNP ML tree\n./scripts/analysis/phylo.process_newicks.R \\\n--tree ./data/pangenomes/pectobacterium.v2/pectobacterium.v2.DB/core_snp_tree/informative.fasta.treefile \\\n--name \"core_snp_ml\" --config project_config.yaml --save_leaf_order --bootstrap\n\n## process homology groups\nRscript scripts/analysis/homology_group_process.R \nVisualize core-SNP phylogenetic tree with metadata.\nquarto render scripts/analysis/phylo_viz_tree.qmd",
    "crumbs": [
      "Pangenome",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/pangenome_analysis.html#homology-groups-analysis",
    "href": "scripts/notebooks/pangenome_analysis.html#homology-groups-analysis",
    "title": "",
    "section": "Homology groups analysis",
    "text": "Homology groups analysis\n\nGO enrichment of homology groups categories\nThis script will use the pangenome org.db object (built here) and perform GO enrichment using BioConductor::topGO package.\nRscript scripts/analysis/HG_GO_enrichment.R\n\n\nSummarize homology groups\nquarto render scripts/analysis/HG_summary.qmd \n\n\nVisualize tandemly mapped homology groups sets on the pangenome\nquarto render scripts/analysis/HG_tandem_match_viz.qmd --execute-dir ./\n\n\nVisualize homology groups across pagenome for GO terms of interest\nto-do: convert this to script with arguments\nquarto render scripts/analysis/homology_groups_go_viz.qmd --execute-dir ./\n\nviral DNA integration related biological processes\nanalysisName &lt;- \"virulence_GO\"\n\ngoIds &lt;- c(\n  \"GO:0046718\", \"GO:0044826\", \"GO:0019069\", \"GO:0044659\", \"GO:0075713\",\n  \"GO:0044660\", \"GO:0019076\", \"GO:0019058\"\n)\n\n\nsecretion systems in Pectobacterium spp.\nanalysisName &lt;- \"secretion_sys\"\n\ngoIds &lt;- c(\n  \"GO:0030253\", \"GO:0015628\", \"GO:0030254\", \"GO:0030255\", \"GO:0046819\",\n  \"GO:0033103\", \"GO:0044315\"\n)\n\n\nHomology groups for lipopolysaccharide biosynthetic process\nanalysisName &lt;- \"lps_syn\"\n\ngoIds &lt;- c(\"GO:0009103\", \"GO:0009244\")",
    "crumbs": [
      "Pangenome",
      "Analysis"
    ]
  },
  {
    "objectID": "scripts/notebooks/index.html#a-pangenome-approach",
    "href": "scripts/notebooks/index.html#a-pangenome-approach",
    "title": "Pectobacterium genus pangenome",
    "section": "A pangenome approach",
    "text": "A pangenome approach",
    "crumbs": [
      "Pectobacterium genus pangenome"
    ]
  },
  {
    "objectID": "scripts/notebooks/index.html#prophage-dynamics",
    "href": "scripts/notebooks/index.html#prophage-dynamics",
    "title": "Pectobacterium genus pangenome",
    "section": "Prophage dynamics",
    "text": "Prophage dynamics",
    "crumbs": [
      "Pectobacterium genus pangenome"
    ]
  },
  {
    "objectID": "scripts/ms_figures/phage_grp_46.html",
    "href": "scripts/ms_figures/phage_grp_46.html",
    "title": "Phage group 46",
    "section": "",
    "text": "Prophage group 46\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n  \n    \n    \n      clinker\n      \n        \n        Instructions:\n        \n          Drag cluster names to re-order clusters\n          \n            Hover over a locus to reveal box and handles; drag box to move the\n            locus, drag handles to resize it, double click to flip\n          \n          Click genes to anchor the figure around them\n          Right click genes to edit their labels\n          Click cluster names and legend entries to rename them\n          Click legend circles to change gene colours\n          Right click legend entries to remove them and hide links\n          Click scale bar text to change its length\n          Tweak other options below!\n        \n        If you found clinker useful, please cite:\n                  clinker & clustermap.js: Automatic generation of gene cluster comparison figures\n          Cameron L.M. Gilchrist, Yit-Heng Chooi\n          Bioinformatics. doi: https://doi.org/10.1093/bioinformatics/btab007\n        \n        \n          \n            Load data:\n            \n          \n          Save Data\n          Save SVG\n        \n        Plot arrangement\n        \n          Scale factor:\n          \n        \n        \n          Vertical spacing:\n          \n        \n        \n          Show genes to scale:\n          \n        \n        Cluster settings\n        \n          Align labels:\n          \n        \n        \n          Hide locus coordinates:\n          \n        \n        \n          Inter-locus spacing:\n          \n        \n        \n          Cluster name font size:\n          \n        \n        \n          Locus name font size:\n          \n        \n        Gene arrows\n        \n          Body height:\n          \n        \n        \n          Tip height:\n          \n        \n        \n          Tip length:\n          \n        \n        \n          Stroke colour:\n          \n        \n        \n          Stroke width:\n          \n        \n        Gene labels\n        \n          Show gene labels\n            \n        \n        \n          Label rotation (degrees):\n          \n        \n        \n          Label start point:\n          \n        \n        \n          Label anchor:\n          \n            Start\n            Middle\n            End\n          \n        \n        \n          Label font size:\n          \n        \n        \n          Label type:\n          \n        \n        \n          Spacing from gene:\n          \n        \n        \n          Label position:\n          \n            Top\n            Middle\n            Bottom\n          \n        \n        Scale bar\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Length (base pair):\n          \n        \n        \n          Top margin:\n          \n        \n        Colour bar\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Top margin:\n          \n        \n        Legend\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Left margin:\n          \n        \n        Links\n        \n          Show links:\n            \n        \n        \n          Show only best links:\n          \n        \n        \n          Draw links as lines:\n          \n        \n        \n          Draw straight links:\n          \n        \n        \n          Use similarity group colour:\n          \n        \n        \n          Link stroke width:\n          \n        \n        \n          Identity threshold:\n          \n        \n        \n          Show link labels:\n            \n        \n        \n          Label font size:\n          \n        \n        \n          Label position:\n          \n        \n        \n          Show link label background:\n            \n        \n      \n\n    \n    \n    \n  \n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Prophages",
      "Prophage clusters",
      "Phage group 46"
    ]
  },
  {
    "objectID": "scripts/ms_figures/phage_grp_71.html",
    "href": "scripts/ms_figures/phage_grp_71.html",
    "title": "Phage group 71",
    "section": "",
    "text": "Prophage group 71\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n  \n    \n    \n      clinker\n      \n        \n        Instructions:\n        \n          Drag cluster names to re-order clusters\n          \n            Hover over a locus to reveal box and handles; drag box to move the\n            locus, drag handles to resize it, double click to flip\n          \n          Click genes to anchor the figure around them\n          Right click genes to edit their labels\n          Click cluster names and legend entries to rename them\n          Click legend circles to change gene colours\n          Right click legend entries to remove them and hide links\n          Click scale bar text to change its length\n          Tweak other options below!\n        \n        If you found clinker useful, please cite:\n                  clinker & clustermap.js: Automatic generation of gene cluster comparison figures\n          Cameron L.M. Gilchrist, Yit-Heng Chooi\n          Bioinformatics. doi: https://doi.org/10.1093/bioinformatics/btab007\n        \n        \n          \n            Load data:\n            \n          \n          Save Data\n          Save SVG\n        \n        Plot arrangement\n        \n          Scale factor:\n          \n        \n        \n          Vertical spacing:\n          \n        \n        \n          Show genes to scale:\n          \n        \n        Cluster settings\n        \n          Align labels:\n          \n        \n        \n          Hide locus coordinates:\n          \n        \n        \n          Inter-locus spacing:\n          \n        \n        \n          Cluster name font size:\n          \n        \n        \n          Locus name font size:\n          \n        \n        Gene arrows\n        \n          Body height:\n          \n        \n        \n          Tip height:\n          \n        \n        \n          Tip length:\n          \n        \n        \n          Stroke colour:\n          \n        \n        \n          Stroke width:\n          \n        \n        Gene labels\n        \n          Show gene labels\n            \n        \n        \n          Label rotation (degrees):\n          \n        \n        \n          Label start point:\n          \n        \n        \n          Label anchor:\n          \n            Start\n            Middle\n            End\n          \n        \n        \n          Label font size:\n          \n        \n        \n          Label type:\n          \n        \n        \n          Spacing from gene:\n          \n        \n        \n          Label position:\n          \n            Top\n            Middle\n            Bottom\n          \n        \n        Scale bar\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Length (base pair):\n          \n        \n        \n          Top margin:\n          \n        \n        Colour bar\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Top margin:\n          \n        \n        Legend\n        \n          Font size:\n          \n        \n        \n          Height:\n          \n        \n        \n          Left margin:\n          \n        \n        Links\n        \n          Show links:\n            \n        \n        \n          Show only best links:\n          \n        \n        \n          Draw links as lines:\n          \n        \n        \n          Draw straight links:\n          \n        \n        \n          Use similarity group colour:\n          \n        \n        \n          Link stroke width:\n          \n        \n        \n          Identity threshold:\n          \n        \n        \n          Show link labels:\n            \n        \n        \n          Label font size:\n          \n        \n        \n          Label position:\n          \n        \n        \n          Show link label background:\n            \n        \n      \n\n    \n    \n    \n  \n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Prophages",
      "Prophage clusters",
      "Phage group 71"
    ]
  },
  {
    "objectID": "scripts/analysis/HG_summary.html",
    "href": "scripts/analysis/HG_summary.html",
    "title": "Pangenome homology groups summary",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(configr))\nsuppressPackageStartupMessages(library(ggpubr))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(matrixStats))\nsuppressPackageStartupMessages(library(org.Pectobacterium.spp.pan.eg.db))\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/GO_enrichment/enrichment_functions.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/homology_groups.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\nanalysisName &lt;- \"homology_groups\"\noutDir &lt;- confs$analysis$homology_groups$dir\noutPrefix &lt;- file.path(outDir, analysisName)\npanOrgDb &lt;- org.Pectobacterium.spp.pan.eg.db",
    "crumbs": [
      "Pangenome",
      "Pangenome summary"
    ]
  },
  {
    "objectID": "scripts/analysis/HG_summary.html#initial-setup",
    "href": "scripts/analysis/HG_summary.html#initial-setup",
    "title": "Pangenome homology groups summary",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(configr))\nsuppressPackageStartupMessages(library(ggpubr))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(matrixStats))\nsuppressPackageStartupMessages(library(org.Pectobacterium.spp.pan.eg.db))\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/GO_enrichment/enrichment_functions.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/homology_groups.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\nanalysisName &lt;- \"homology_groups\"\noutDir &lt;- confs$analysis$homology_groups$dir\noutPrefix &lt;- file.path(outDir, analysisName)\npanOrgDb &lt;- org.Pectobacterium.spp.pan.eg.db",
    "crumbs": [
      "Pangenome",
      "Pangenome summary"
    ]
  },
  {
    "objectID": "scripts/analysis/HG_summary.html#import-data",
    "href": "scripts/analysis/HG_summary.html#import-data",
    "title": "Pangenome homology groups summary",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId\n)\n\nspOrder &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$phylogeny$core_snp_ml$files$species_order)\n)\n\nhgTable &lt;- AnnotationDbi::select(\n  x = panOrgDb, keys = keys(panOrgDb),\n  columns = c(\"GID\", \"genomeId\", \"class\")\n) %&gt;%\n  dplyr::rename(hgId = GID) %&gt;%\n  dplyr::count(hgId, genomeId, name = \"nGenes\")\n\n\n'select()' returned 1:many mapping between keys and columns\n\n\nCode\nhgMeta &lt;- AnnotationDbi::select(\n  x = panOrgDb, keys = keys(panOrgDb),\n  columns = c(\"GID\", \"class\")\n) %&gt;%\n  dplyr::rename(hgId = GID) %&gt;%\n  dplyr::mutate(\n    class = dplyr::if_else(\n      condition = class == \"core & single copy orthologous\",\n      true = \"core\", false = class\n    )\n  )\n\n\n'select()' returned 1:1 mapping between keys and columns\n\n\nCode\n## pangenome version HG stats\ngrpStats &lt;- suppressMessages(readr::read_tsv(file.path(outDir, \"group_stats.tab\"))) %&gt;% \n  dplyr::mutate(\n    data = forcats::as_factor(data),\n    group = forcats::fct_relevel(group, \"core\", \"accessory\", \"unique\")\n  )\n\n## binary matrix for homology_group PAV\nhgPavMat &lt;- homology_groups_mat(pandb = panOrgDb, type = \"pav\")\n\n\n'select()' returned 1:many mapping between keys and columns",
    "crumbs": [
      "Pangenome",
      "Pangenome summary"
    ]
  },
  {
    "objectID": "scripts/analysis/HG_summary.html#species-level-homology-group-statistics",
    "href": "scripts/analysis/HG_summary.html#species-level-homology-group-statistics",
    "title": "Pangenome homology groups summary",
    "section": "Species level homology group statistics",
    "text": "Species level homology group statistics\n\n\nCode\nspNames &lt;- dplyr::count(sampleInfo, SpeciesName) %&gt;%\n  # dplyr::filter(n &gt;= 20) %&gt;%\n  dplyr::pull(SpeciesName)\n\nsppGrpStats &lt;- NULL\nsppGrpGo &lt;- NULL\n\n# matrixStats::colSums2(x = hgPavMat, useNames = T) %&gt;%\n#   tibble::enframe(name = \"hgId\", value = \"nGenomes\") %&gt;%\n#   dplyr::mutate(\n#     class = dplyr::case_when(\n#       nGenomes == !!nrow(hgPavMat) ~ \"core\",\n#       nGenomes == 1 ~ \"unique\",\n#       nGenomes &lt; !!nrow(hgPavMat) & nGenomes &gt; 1 ~ \"accessory\"\n#     )\n#   ) %&gt;% \n#   dplyr::count(class)\n\n## get species wise core, accessory, unique group stats and GO\nfor (sp in spNames) {\n  spGenomes &lt;- dplyr::filter(sampleInfo, SpeciesName == .env$sp) %&gt;%\n    dplyr::pull(genomeId)\n  \n  cat(sp, \": \", length(spGenomes), \"\\n\")\n  \n  hgSum &lt;- matrixStats::colSums2(\n    x = hgPavMat, useNames = T,\n    rows = which(rownames(hgPavMat) %in% spGenomes)\n  ) %&gt;%\n    tibble::enframe(name = \"hgId\", value = \"nGenomes\") %&gt;%\n    dplyr::filter(nGenomes != 0) %&gt;%\n    dplyr::mutate(\n      subpan_class = dplyr::case_when(\n        nGenomes == !!length(spGenomes) ~ \"core\",\n        nGenomes == 1 ~ \"unique\",\n        nGenomes &lt; !!length(spGenomes) & nGenomes &gt; 1 ~ \"accessory\"\n      )\n    ) %&gt;% \n    dplyr::left_join(\n      y = dplyr::rename(hgMeta, pangenome_class = class),\n      by = \"hgId\"\n    )\n  \n  ## group stats\n  sppGrpStats &lt;- dplyr::count(hgSum, pangenome_class, subpan_class, name = \"count\") %&gt;%\n    dplyr::mutate(\n      SpeciesName = .env$sp, nHgs = !!nrow(hgSum),\n      n_genomes = length(spGenomes)\n    ) %&gt;%\n    dplyr::bind_rows(sppGrpStats)\n\n}\n\n\nP. actinidiae :  5 \nP. aquaticum :  7 \nP. aroidearum :  33 \nP. atrosepticum :  16 \nP. betavasculorum :  2 \nP. brasiliense :  138 \nP. cacticida :  1 \nP. carotovorum :  33 \nP. colocasium :  1 \nP. fontis :  1 \nP. odoriferum :  21 \nP. parmentieri :  37 \nP. parvum :  10 \nP. peruviense :  4 \nP. polaris :  25 \nP. polonicum :  3 \nP. punjabense :  9 \nP. quasiaquaticum :  8 \nP. versatile :  93 \nP. wasabiae :  3 \nP. zantedeschiae :  3 \nPectobacterium sp. CFBP8739 :  1 \n\n\n\nProportion of genus pangenome HGs in the species pangenome\n\n\nCode\nhgStats &lt;- dplyr::count(hgMeta, class, name = \"count\") %&gt;%\n  dplyr::mutate(\n    SpeciesName = \"Pangenome\",\n    nHgs = sum(count),\n    pangenome_class = class,\n    subpan_class = class,\n    n_genomes = nrow(hgPavMat)\n  ) %&gt;%\n  dplyr::bind_rows(sppGrpStats) %&gt;%\n  dplyr::select(SpeciesName, n_genomes, pangenome_class, subpan_class, count, nHgs) %&gt;% \n  dplyr::mutate(\n    fraction = round(count / nHgs, digits = 3),\n    dplyr::across(\n      .cols = c(subpan_class, pangenome_class),\n      .fns = ~ forcats::fct_relevel(.x, \"core\", \"accessory\", \"unique\")\n    ),\n    SpeciesName = forcats::fct_relevel(SpeciesName, \"Pangenome\", !!!spOrder$SpeciesName)\n  ) %&gt;% \n  dplyr::arrange(desc(n_genomes), SpeciesName, pangenome_class, subpan_class)\n\nreadr::write_tsv(\n  x = hgStats, file = confs$analysis$homology_groups$files$spp_group_stats\n)\n\n\n\n\nPlot the data\n\n\nCode\nspecies_to_show &lt;- dplyr::count(sampleInfo, SpeciesName) %&gt;%\n  dplyr::filter(n &gt;= 20) %&gt;% \n  dplyr::arrange(desc(n)) %&gt;% \n  dplyr::mutate(\n    SpeciesName = forcats::as_factor(SpeciesName)\n  )\n\npt_stats &lt;- dplyr::left_join(\n  x = species_to_show, y = hgStats, by = \"SpeciesName\"\n) %&gt;% \n  ggplot() +\n  geom_bar(\n    mapping = aes(\n      x = count, y = SpeciesName,\n      fill = forcats::fct_rev(subpan_class)\n    ),\n    stat = \"sum\", position = position_dodge(), width = 0.8\n  ) +\n  scale_fill_manual(\n    values = c(\n      confs$colors$core, confs$colors$accessory, confs$colors$unique\n    ),\n    breaks = c(\"core\", \"accessory\", \"unique\")\n  ) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.01))) +\n  theme_bw(base_size = 16) +\n  theme(\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_text(face = \"bold\"),\n    axis.text.y = element_text(face = \"bold.italic\"),\n    legend.position = \"bottom\",\n    legend.title = element_blank()\n  )\n\n\nggsave(\n  plot = pt_stats, filename = file.path(outDir, \"pangenome_spp_stats.pdf\"),\n  width = 6, height = 4\n)\n\npt_stats\n\n\n\n\n\nHomology group counts",
    "crumbs": [
      "Pangenome",
      "Pangenome summary"
    ]
  },
  {
    "objectID": "scripts/analysis/HG_summary.html#compare-pangenome-versions",
    "href": "scripts/analysis/HG_summary.html#compare-pangenome-versions",
    "title": "Pangenome homology groups summary",
    "section": "Compare pangenome versions",
    "text": "Compare pangenome versions\n\n\nCode\npt_hgStats &lt;- ggplot2::ggplot(grpStats) +\n  geom_bar(\n    mapping = aes(x = data, y = count, fill = forcats::fct_rev(group)),\n    stat = \"identity\",\n    position = position_stack()\n  ) +\n  scale_y_continuous(expand = expansion(add = c(0, 100))) +\n  scale_fill_manual(\n    name = NULL,\n    values = c(\"core\" = confs$colors$core, \"accessory\" = confs$colors$accessory,\n               \"unique\" = confs$colors$unique)\n    ) +\n  theme_bw(base_size = 24) +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = \"bottom\",\n    axis.title = element_blank(),\n    axis.text.x = element_text(face = \"italic\")\n  )\n\nggsave(filename = file.path(outDir, \"hg_cmp_stats.pdf\"), plot = pt_hgStats, width = 6, height = 6)\n\npt_hgStats\n\n\n\n\n\nPangenome version comparison",
    "crumbs": [
      "Pangenome",
      "Pangenome summary"
    ]
  },
  {
    "objectID": "scripts/analysis/HG_summary.html#heaps-law-alpha-for-multiple-species-in-pangenome",
    "href": "scripts/analysis/HG_summary.html#heaps-law-alpha-for-multiple-species-in-pangenome",
    "title": "Pangenome homology groups summary",
    "section": "Heapâs law alpha for multiple species in pangenome",
    "text": "Heapâs law alpha for multiple species in pangenome\n\n\nCode\nheaps &lt;- suppressMessages(readr::read_tsv(file.path(outDir, \"heaps_law.tab\"))) %&gt;%\n  dplyr::filter(species != \"pangenome\") %&gt;%\n  dplyr::mutate(\n    complete = \"complete\",\n    species = forcats::fct_relevel(species, !!!levels(species_to_show$SpeciesName))\n  )\n\npt_alpha &lt;- ggplot(data = heaps) +\n  geom_bar(\n    mapping = aes(y = species, x = alpha),\n    fill = \"black\", stat = \"identity\", width = 0.8\n  ) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.01))) +\n  theme_bw(base_size = 16) +\n  theme(\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_text(face = \"bold\"),\n    axis.text.y = element_text(face = \"bold.italic\")\n  )\n\n\nggsave(\n  plot = pt_alpha, filename = file.path(outDir, \"pangenome_spp_alpha.pdf\"),\n  width = 5, height = 4\n)\n\npt_alpha\n\n\n\n\n\nHeaps law alpha",
    "crumbs": [
      "Pangenome",
      "Pangenome summary"
    ]
  },
  {
    "objectID": "scripts/analysis/HG_summary.html#species-level-go-enrichment-results",
    "href": "scripts/analysis/HG_summary.html#species-level-go-enrichment-results",
    "title": "Pangenome homology groups summary",
    "section": "Species level GO enrichment results",
    "text": "Species level GO enrichment results\n\n\nCode\npanGo &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$homology_groups$files$spp_group_go)\n) %&gt;% \n  dplyr::filter(SpeciesName == \"pangenome\")\n\nptDf &lt;- dplyr::group_by(panGo, class) %&gt;%\n  dplyr::arrange(pvalue, .by_group = TRUE) %&gt;%\n  dplyr::slice(1:8) %&gt;%\n  dplyr::ungroup() %&gt;%\n  dplyr::mutate(\n    class = forcats::fct_relevel(class, \"core\", \"accessory\", \"unique\")\n  )\n\npt_go &lt;- enrichment_bar(df = ptDf, title = \"pangenome GO\", colorCol = \"class\")\n\npt_go &lt;- pt_go +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  scale_x_discrete(labels = label_wrap(60)) +\n  scale_fill_manual(\n    values = c(\n      \"core\" = confs$colors$core, \"accessory\" = confs$colors$accessory,\n      \"unique\" = confs$colors$unique\n    )\n  )\n\nggsave(\n  plot = pt_go, filename = file.path(outDir, \"pangenome_GO.pdf\"),\n  width = 8, height = 6\n)\n\npt_go\n\n\n\n\n\nHomology group GO enrichment",
    "crumbs": [
      "Pangenome",
      "Pangenome summary"
    ]
  },
  {
    "objectID": "scripts/analysis/ani_clustering.html",
    "href": "scripts/analysis/ani_clustering.html",
    "title": "ANI comparison and visualization for genomes",
    "section": "",
    "text": "Average nucleotide identity (ANI) between all genomes calculated by fast-ani tool are processed and visualized in this script.",
    "crumbs": [
      "Preprocessing",
      "ANI"
    ]
  },
  {
    "objectID": "scripts/analysis/ani_clustering.html#initial-setup",
    "href": "scripts/analysis/ani_clustering.html#initial-setup",
    "title": "ANI comparison and visualization for genomes",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(configr))\nsuppressPackageStartupMessages(library(here))\nsuppressPackageStartupMessages(library(ape))\nsuppressPackageStartupMessages(library(treeio))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(ComplexHeatmap))\n# suppressPackageStartupMessages(library(spiralize))\n# suppressPackageStartupMessages(library(dendextend))\nsuppressPackageStartupMessages(library(circlize))\n\n## generate UPGMA and NJ tree using ANI for pangenome\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/heatmap_utils.R\")\n\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\noutGroup &lt;- confs$analysis$phylogeny$outgroup\n\noutDir &lt;- confs$analysis$phylogeny$ani$dir\n\nif (!dir.exists(outDir)) dir.create(outDir)\n\npt_theme &lt;- theme_bw(base_size = 14) +\n  theme(\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    panel.grid = element_blank(),\n    plot.title = element_text(size = 15, face = \"bold\")\n  )",
    "crumbs": [
      "Preprocessing",
      "ANI"
    ]
  },
  {
    "objectID": "scripts/analysis/ani_clustering.html#import-data",
    "href": "scripts/analysis/ani_clustering.html#import-data",
    "title": "ANI comparison and visualization for genomes",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus)\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, Genome, genomeId\n)\n\ngenomeIds &lt;- dplyr::pull(sampleInfo, genomeId, name = sampleId)\n\nfnGenomes &lt;- dplyr::filter(\n  sampleInfo, virulence == \"virulent\", virulence_pcr == \"negative\"\n) %&gt;% \n  dplyr::pull(genomeId)\n\nmarkGenomes &lt;- list(\n  fn_pbr = list(genomes = fnGenomes, color = \"red\")\n)",
    "crumbs": [
      "Preprocessing",
      "ANI"
    ]
  },
  {
    "objectID": "scripts/analysis/ani_clustering.html#process-fast-ani-results",
    "href": "scripts/analysis/ani_clustering.html#process-fast-ani-results",
    "title": "ANI comparison and visualization for genomes",
    "section": "Process fast-ANI results",
    "text": "Process fast-ANI results\n\n\nCode\n## process ANI data for pangenome and store ANI and ANI-distance matrices\naniDf &lt;- suppressMessages(readr::read_tsv(\n  file = confs$analysis$ANI$files$fastani_out,\n  col_names = c(\"id1\", \"id2\", \"ani\", \"mapped\", \"total\")\n))\n\naniDf %&lt;&gt;% dplyr::mutate(\n  dplyr::across(\n    .cols = c(id1, id2),\n    .fns = ~ stringr::str_replace(string = .x, pattern = \".*/(.*).fna\", replacement = \"\\\\1\")\n  ),\n  dist = 1 - (ani / 100)\n) %&gt;%\n  dplyr::mutate(\n    g1 = genomeIds[id1],\n    g2 = genomeIds[id2]\n  ) %&gt;%\n  dplyr::filter(!is.na(g1) & !is.na(g2)) %&gt;%\n  dplyr::arrange(g1, g2)\n\naniDist &lt;- tidyr::pivot_wider(\n  data = aniDf,\n  id_cols = \"g1\",\n  names_from = \"g2\",\n  values_from = \"dist\"\n)\n\nreadr::write_tsv(\n  x = aniDist, file = confs$analysis$phylogeny$ani$files$ani_distance\n)\n\ndistMat &lt;- tibble::column_to_rownames(aniDist, var = \"g1\") %&gt;%\n  as.matrix() %&gt;%\n  as.dist()\n\naniMat &lt;- tidyr::pivot_wider(\n  data = aniDf,\n  id_cols = \"g1\",\n  names_from = \"g2\",\n  values_from = \"ani\"\n)\n\nreadr::write_tsv(\n  x = aniMat, file = confs$analysis$phylogeny$ani$files$ani_matrix\n)\n\naniMat &lt;- tibble::column_to_rownames(aniMat, var = \"g1\") %&gt;%\n  as.matrix()\n\naniMat &lt;- aniMat[, rownames(aniMat)]\n\nif (!all(rownames(as.matrix(distMat)) == rownames(aniMat))) {\n  stop(\"rownames did not match\")\n}",
    "crumbs": [
      "Preprocessing",
      "ANI"
    ]
  },
  {
    "objectID": "scripts/analysis/ani_clustering.html#clustering-genomes",
    "href": "scripts/analysis/ani_clustering.html#clustering-genomes",
    "title": "ANI comparison and visualization for genomes",
    "section": "Clustering genomes",
    "text": "Clustering genomes\n\nCluster genomes using UPGMA and NJ clustering\n\n\nCode\n# plot(hclust(distMat))\ntreeUpgma &lt;- ape::as.phylo(hclust(d = distMat, method = \"average\")) %&gt;%\n  ape::ladderize() %&gt;%\n  ape::makeNodeLabel(method = \"number\", prefix = \"n\")\n\nape::write.tree(\n  phy = treeUpgma, tree.names = \"ani_upgma\",\n  file = confs$analysis$phylogeny$ani_upgma$files$tree\n)\n\n# plot(ape::root(phy = treeUpgma, outgroup = sampleInfoList[[outGroup]]$Genome, edgelabel = TRUE))\n# nodelabels()\n\ntreeNj &lt;- ape::nj(distMat) %&gt;%\n  ape::ladderize() %&gt;%\n  ape::makeNodeLabel(method = \"number\", prefix = \"n\")\n\n## set negative length edges =&gt; 0\ntreeNj$edge.length[treeNj$edge.length &lt; 0] &lt;- 0\n\nrootedNj &lt;- ape::root(treeNj, outgroup = sampleInfoList[[outGroup]]$genomeId)\n\nape::write.tree(\n  phy = treeNj, tree.names = \"ANI_NJ\",\n  file = confs$analysis$phylogeny$ani_nj$files$tree\n)\n\n\n\n\nSave species order of the tree for later visualization\n\n\nCode\n## add data to tree\ntreeTbl &lt;- as_tibble(treeUpgma) %&gt;%\n  dplyr::full_join(y = sampleInfo, by = c(\"label\" = \"genomeId\")) %&gt;%\n  treeio::as.treedata() %&gt;%\n  treeio::root(outgroup = sampleInfoList[[outGroup]]$genomeId, edgelabel = TRUE)\n\n\nâ¹ invalid tbl_tree object. Missing column: parent.\nâ¹ invalid tbl_tree object. Missing column: parent.\nâ¹ invalid tbl_tree object. Missing column: parent.\nâ¹ invalid tbl_tree object. Missing column: parent.\n\n\n! # Invaild edge matrix for &lt;phylo&gt;. A &lt;tbl_df&gt; is returned.\n\n\nCode\npt_treeUpgma &lt;- ggtree::ggtree(\n  tr = treeTbl\n)\n\n## get species order to arrange the species key columns\nleafOrder &lt;- dplyr::arrange(.data = pt_treeUpgma$data, y) %&gt;%\n  dplyr::filter(isTip)\n\n\n! # Invaild edge matrix for &lt;phylo&gt;. A &lt;tbl_df&gt; is returned.\n! # Invaild edge matrix for &lt;phylo&gt;. A &lt;tbl_df&gt; is returned.\n\n\nCode\nspeciesOrder &lt;- dplyr::select(leafOrder, SpeciesName, y, type_material) %&gt;%\n  dplyr::group_by(SpeciesName) %&gt;%\n  dplyr::arrange(type_material, y, .by_group = TRUE) %&gt;%\n  dplyr::slice(1L) %&gt;%\n  dplyr::ungroup() %&gt;%\n  dplyr::arrange(desc(y)) %&gt;%\n  # dplyr::mutate(SpeciesName = forcats::as_factor(SpeciesName)) %&gt;%\n  dplyr::pull(SpeciesName)\n\n## add species order factor levels to SpeciesName column\nsampleInfo %&lt;&gt;% dplyr::mutate(\n  SpeciesName = forcats::fct_relevel(SpeciesName, !!!speciesOrder)\n)\n\nreadr::write_tsv(\n  x = tibble::tibble(SpeciesName = speciesOrder),\n  file = confs$analysis$phylogeny$ani_upgma$files$species_order\n)",
    "crumbs": [
      "Preprocessing",
      "ANI"
    ]
  },
  {
    "objectID": "scripts/analysis/ani_clustering.html#generate-ani-heatmaps",
    "href": "scripts/analysis/ani_clustering.html#generate-ani-heatmaps",
    "title": "ANI comparison and visualization for genomes",
    "section": "Generate ANI heatmaps",
    "text": "Generate ANI heatmaps\n\nANI heatmap for all genomes\n\n\nCode\ncolorAni &lt;- list(\n  breaks = c(85, 90, 93, 94, 94.5, 95, 95.5, 96, 96.5, 97, 99),\n  colors = RColorBrewer::brewer.pal(n = 11, name = \"RdBu\")\n  # breaks = c(85, 90, 92, 93, 93.5, 94, 94.5, 95, 95.5, 96, 96.5, 97, 99),\n  # colors = viridisLite::viridis(n = 13, option = \"B\")\n)\n\nhtList &lt;- plot_species_ANI_heatmap(\n  mat = aniMat, phy = treeUpgma, speciesInfo = sampleInfo,\n  markGenomes = markGenomes,\n  col = circlize::colorRamp2(\n    breaks = colorAni$breaks, colors = colorAni$colors\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  name = \"ani\",\n  show_column_dend = FALSE,\n  use_raster = TRUE,\n  raster_quality = 3\n)\n\nhtList@ht_list$species_key@matrix_param$width &lt;- unit(12, \"cm\")\nhtList@ht_list$ani@matrix_param$width &lt;- unit(18, \"cm\")\n\npdf(\n  file = file.path(outDir, \"ANI_heatmap.pdf\"),\n  width = 15, height = 10\n)\n\nComplexHeatmap::draw(\n  object = htList,\n  main_heatmap = \"ani\",\n  row_dend_side = \"left\",\n  merge_legend = TRUE,\n  heatmap_legend_side = \"bottom\"\n)\ndev.off()\n\n\nquartz_off_screen \n                2 \n\n\n\n\nCode\nht_species &lt;- htList@ht_list$species_key\nht_species@row_dend_param$width &lt;- unit(15, \"cm\")\nht_species@matrix_param$width &lt;- unit(15, \"cm\")\n\nComplexHeatmap::draw(\n  object = ht_species,\n  row_dend_side = \"left\",\n  merge_legend = TRUE,\n  heatmap_legend_side = \"bottom\"\n)\n\n\n\n\n\nSpecies tree\n\n\n\n\n\n\n\n\n\nANI heatmap for all species\n\n\n\n\n\n\nANI heatmap for P. brasiliense species clade\n\n\nCode\nnodeOfInterest &lt;- dplyr::filter(leafOrder, SpeciesName == \"P. brasiliense\") %&gt;%\n  dplyr::pull(label)\n\nclade &lt;- ape::getMRCA(phy = treeUpgma, tip = nodeOfInterest)\nsubTree &lt;- ape::extract.clade(phy = treeUpgma, node = clade)\n# nodelab(treeUpgma, clade)\n\n# subTree &lt;- treeio::tree_subset(tree = treeTbl, node = clade, levels_back = 0)\n# ape::as.hclust.phylo(treeio::as.phylo(subTree))\n\nsubAni &lt;- aniMat[subTree$tip.label, subTree$tip.label]\nlowerTr &lt;- subAni[lower.tri(subAni, diag = FALSE)]\n\nhtList2 &lt;- plot_species_ANI_heatmap(\n  mat = subAni, phy = subTree,\n  col = circlize::colorRamp2(\n    breaks = colorAni$breaks, colors = colorAni$colors\n  ),\n  heatmap_legend_param = list(\n    direction = \"horizontal\", legend_width = unit(5, \"cm\")\n  ),\n  name = \"ani\",\n  use_raster = TRUE,\n  raster_quality = 3\n)\n\npdf(\n  file = file.path(outDir, \"ANI_PBrasiliense.heatmap.pdf\"),\n  width = 10, height = 10\n)\nComplexHeatmap::draw(\n  object = htList2,\n  main_heatmap = \"ani\",\n  row_dend_side = \"left\",\n  merge_legend = TRUE,\n  heatmap_legend_side = \"bottom\"\n)\ndev.off()\n\n\nquartz_off_screen \n                2 \n\n\n\n\n\n\n\nP. brasiliense clade ANI\n\n\n\n\n\nDensity distribution of P. brasiliense genome ANI scores\nIn P. brasiliense genome ANI comparison, 1.78% pairs have ANI &lt; 95% and 9.82% pairs with ANI &lt; 96%.\n\n\nCode\n(\n  ptHist_pbrAni &lt;- ggplot(data = tibble::tibble(ani = lowerTr)) +\n    geom_histogram(\n      mapping = aes(x = ani), bins = 60,\n      color = \"black\", fill = \"black\"\n    ) +\n    geom_vline(xintercept = 96, color = \"red\", linetype = \"dashed\", linewidth = 1) +\n    scale_x_continuous(expand = expansion(add = 0)) +\n    scale_y_continuous(expand = expansion(add = c(0, NULL))) +\n    labs(x = \"ANI\", y = \"Count\") +\n    theme_bw(base_size = 24) + \n    theme(panel.grid = element_blank())\n)\n\n\n\n\n\nP. brasiliense ANI score distribution\n\n\n\n\n\n\n\nANI heatmap for inhouse strains\n\n\nCode\ninhouseNodes &lt;- dplyr::filter(sampleInfo, source %in% setdiff(confs$data$include_source, \"NCBI\"))\n\nsubTree2 &lt;- ape::keep.tip(phy = treeUpgma, tip = inhouseNodes$genomeId)\nsubAni2 &lt;- aniMat[subTree2$tip.label, subTree2$tip.label] %&gt;%\n  tibble::as_tibble(rownames = \"g1\") %&gt;%\n  tidyr::pivot_longer(\n    cols = -g1,\n    names_to = \"g2\", values_to = \"ANI\"\n  )\n\ninhouseTreeTbl &lt;- as_tibble(subTree2) %&gt;%\n  dplyr::full_join(y = inhouseNodes, by = c(\"label\" = \"genomeId\")) %&gt;%\n  treeio::as.treedata()\n\npt_inhouseTree &lt;- ggtree::ggtree(\n  tr = inhouseTreeTbl\n) +\n  ggtree::geom_tippoint(\n    mapping = aes(subset = c(SpeciesName == \"P. brasiliense\")),\n    color = \"blue\"\n  ) +\n  # ggtree::geom_tiplab(\n  #   mapping = aes(label = label),\n  #   size = 3, align = TRUE, linesize = 0.5\n  # ) +\n  scale_x_continuous(expand = expansion(mult = c(0.05, 0.1))) +\n  ggnewscale::new_scale_color() +\n  ## virulence phenotype\n  ggtreeExtra::geom_fruit(\n    mapping = aes(y = id, x = \"virulence\", color = virulence),\n    geom = \"geom_point\", shape = 17, size = 2,\n    pwidth = 0.01, offset = 0.1\n  ) +\n  scale_color_manual(\n    values = c(\"virulent\" = \"red\", \"avirulent\" = \"green\"),\n    na.value = alpha(\"white\", 0)\n  ) +\n  ggnewscale::new_scale_color() +\n  ## virulence PCR result\n  ggtreeExtra::geom_fruit(\n    mapping = aes(y = id, x = \"vir_pcr\", color = virulence_pcr),\n    geom = \"geom_point\",\n    pwidth = 0.01, offset = 0.1\n  ) +\n  scale_color_manual(\n    values = c(\"positive\" = \"red\", \"negative\" = \"green\"),\n    na.value = alpha(\"white\", 0)\n  )\n\nspeciesKyeDf &lt;- get_species_key_data(\n  genomes = inhouseNodes$genomeId, speciesInfo = sampleInfo, type = \"long\"\n)\n\npt_spKey &lt;- ggplot2::ggplot(\n  data = speciesKyeDf,\n  mapping = aes(x = SpeciesName, y = genomeId), color = \"black\", fill = \"black\"\n) +\n  geom_tile() +\n  theme_bw() +\n  theme(\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_text(size = 14, angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5, vjust = 0)\n  )\n\npt_ani &lt;- dplyr::mutate(\n  subAni2,\n  g1 = forcats::fct_relevel(g1, ggtree::get_taxa_name(pt_inhouseTree)),\n  g2 = forcats::fct_relevel(g2, ggtree::get_taxa_name(pt_inhouseTree))\n) %&gt;%\n  ggplot2::ggplot(mapping = aes(x = g1, y = g2)) +\n  geom_tile(mapping = aes(fill = ANI)) +\n  # scale_fill_viridis_c(name = \"% identity\", option = \"B\") +\n  scale_fill_stepsn(\n    breaks = colorAni$breaks,\n    values = scales::rescale(x = colorAni$breaks),\n    colours = colorAni$colors,\n    limits = c(85, 100) \n  ) +\n  theme_bw() +\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    plot.title = element_text(hjust = 0.5, vjust = 0),\n    panel.grid = element_blank()\n  )\n\n## arrange plots one by one\npt_all &lt;- pt_spKey %&gt;%\n  aplot::insert_left(pt_inhouseTree, width = 0.5) %&gt;%\n  aplot::insert_right(pt_ani, width = 2)\n\n\nggsave(\n  plot = pt_all, width = 14, height = 8,\n  filename = file.path(outDir, \"ANI_inhouse.heatmap.pdf\")\n)\n\npt_aniTree &lt;-  pt_spKey %&gt;%\n  aplot::insert_left(pt_inhouseTree, width = 1)\n\n\n\n\n\n\n\nCurrent collection ANI",
    "crumbs": [
      "Preprocessing",
      "ANI"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#initial-setup",
    "href": "scripts/analysis/prophage_cluster_summary.html#initial-setup",
    "title": "Summary report on prophage clustering",
    "section": "Initial setup",
    "text": "Initial setup\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(skimr))\nsuppressPackageStartupMessages(library(ComplexHeatmap))\nsuppressPackageStartupMessages(library(ggdist))\nsuppressPackageStartupMessages(library(ggtree))\nsuppressPackageStartupMessages(library(org.Pectobacterium.spp.pan.eg.db))\n\nrm(list = ls())\n\nsource(\"https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R\")\nsource(\"scripts/utils/config_functions.R\")\nsource(\"scripts/utils/phylogeny_functions.R\")\nsource(\"scripts/utils/compare_hg_sets.R\")\n################################################################################\nset.seed(124)\n\nconfs &lt;- prefix_config_paths(\n  conf = suppressWarnings(configr::read.config(file = \"project_config.yaml\")),\n  dir = \".\"\n)\n\ntreeMethod &lt;- \"core_snp_ml\"     #ani_upgma, kmer_nj, core_snp_ml\n\npangenome &lt;- confs$data$pangenomes$pectobacterium.v2$name\npanConf &lt;- confs$data$pangenomes[[pangenome]]\n\noutDir &lt;- confs$analysis$prophages$summary$dir\n\npanOrgDb &lt;- org.Pectobacterium.spp.pan.eg.db",
    "crumbs": [
      "Prophages",
      "Clustering summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#import-data",
    "href": "scripts/analysis/prophage_cluster_summary.html#import-data",
    "title": "Summary report on prophage clustering",
    "section": "Import data",
    "text": "Import data\n\n\nCode\nspeciesOrder &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$phylogeny[[treeMethod]]$files$species_order)\n)\n\nsampleInfo &lt;- get_metadata(file = panConf$files$metadata, genus = confs$genus) %&gt;% \n  dplyr::mutate(\n    SpeciesName = forcats::fct_relevel(SpeciesName, !!!speciesOrder$SpeciesName)\n  )\n\nsampleInfoList &lt;- as.list_metadata(\n  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId\n)\n\n## read tree\nrawTree &lt;- import_tree(\n  confs$analysis$phylogeny[[treeMethod]]$files$tree_rooted,\n  phylo = TRUE\n)\n\nrawTree &lt;- representative_genomes_tree(phy = rawTree, metadata = sampleInfo)",
    "crumbs": [
      "Prophages",
      "Clustering summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#import-phage-clustering-data",
    "href": "scripts/analysis/prophage_cluster_summary.html#import-phage-clustering-data",
    "title": "Summary report on prophage clustering",
    "section": "Import phage clustering data",
    "text": "Import phage clustering data\n\n\nCode\nphageAn &lt;- suppressMessages(\n  readr::read_tsv(confs$data$prophages$files$data)\n) %&gt;%\n  dplyr::select(prophage_id, completeness, checkv_quality, taxonomy)\n\n# read prophage HGs stored locally\nproHgs &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$preprocessing$files$raw_prophage_hg)\n) %&gt;%\n  dplyr::select(prophage_id = id, nHgs, hgs) %&gt;%\n  dplyr::mutate(\n    hgs = stringr::str_split(hgs, \";\")\n  )\n\nproHgL &lt;- purrr::transpose(proHgs) %&gt;%\n  purrr::set_names(nm = purrr::map(., \"prophage_id\"))",
    "crumbs": [
      "Prophages",
      "Clustering summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#prophage-data-processing-summary",
    "href": "scripts/analysis/prophage_cluster_summary.html#prophage-data-processing-summary",
    "title": "Summary report on prophage clustering",
    "section": "Prophage data processing summary",
    "text": "Prophage data processing summary\n\n\nCode\nphageClusters &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$files$clusters)\n)\n\nclusterList &lt;- dplyr::group_by(phageClusters, phage_grp) %&gt;% \n  dplyr::group_map(\n    .f = ~{\n      list(\n        phage_grp = .x$phage_grp[1],\n        members = .x$prophage_id,\n        group_size = nrow(.x)\n      )\n    },\n    .keep = TRUE\n  ) %&gt;% \n  purrr::set_names(nm = purrr::map(., \"phage_grp\"))",
    "crumbs": [
      "Prophages",
      "Clustering summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#clustering",
    "href": "scripts/analysis/prophage_cluster_summary.html#clustering",
    "title": "Summary report on prophage clustering",
    "section": "Clustering",
    "text": "Clustering\nNumber of clusters/prophage signatures: 436",
    "crumbs": [
      "Prophages",
      "Clustering summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#annotate-prophages-with-defense-systems",
    "href": "scripts/analysis/prophage_cluster_summary.html#annotate-prophages-with-defense-systems",
    "title": "Summary report on prophage clustering",
    "section": "Annotate prophages with defense systems",
    "text": "Annotate prophages with defense systems\n\n\nCode\ndefense_hgs &lt;- suppressMessages(\n  readr::read_tsv(confs$analysis$prophages$files$hg_broad_functions)\n) %&gt;% \n  dplyr::filter(\n    function_category %in% \n      c(\"toxin-antitoxin\", \"restriction modification\", \"methyltransferase\")\n  ) %&gt;%\n  dplyr::mutate(\n    function_category = dplyr::case_match(\n      function_category,\n      \"toxin-antitoxin\" ~ \"ta_system\",\n      \"restriction modification\" ~ \"rm_system\",\n      \"methyltransferase\" ~ \"rm_system\",\n      .default = function_category\n    )\n  ) %&gt;% \n  dplyr::left_join(\n    y = tidyr::unnest(proHgs, cols = hgs),\n    by = c(\"hg_id\" = \"hgs\")\n  ) %&gt;% \n  dplyr::summarise(\n    hgs = paste(sort(hg_id), collapse = \";\"),\n    .by = c(prophage_id, function_category)\n  ) %&gt;% \n  tidyr::pivot_wider(\n    names_from = function_category,\n    values_from = hgs\n  )\n\nphage_defense &lt;- dplyr::select(phageClusters, prophage_id, phage_grp, fragments, grp_size) %&gt;% \n  tidyr::separate_longer_delim(cols = fragments, delim = \";\") %&gt;% \n  dplyr::left_join(\n    y = defense_hgs, by = c(\"fragments\" = \"prophage_id\")\n  ) %&gt;% \n  dplyr::filter(!is.na(ta_system) | !is.na(rm_system)) %&gt;% \n  dplyr::distinct(prophage_id, phage_grp, ta_system, rm_system, grp_size) %&gt;% \n  dplyr::arrange(desc(grp_size))\n\nreadr::write_tsv(\n  x = phage_defense,\n  file = confs$analysis$prophages$files$phage_defense\n)",
    "crumbs": [
      "Prophages",
      "Clustering summary"
    ]
  },
  {
    "objectID": "scripts/analysis/prophage_cluster_summary.html#prophage-overlap-between-species",
    "href": "scripts/analysis/prophage_cluster_summary.html#prophage-overlap-between-species",
    "title": "Summary report on prophage clustering",
    "section": "Prophage overlap between species",
    "text": "Prophage overlap between species\n\n\nCode\nn_genomes_phage &lt;- dplyr::distinct(phageClusters, genomeId, SpeciesName) %&gt;%\n  dplyr::count(SpeciesName, name = \"n_genomes_phages\", sort = TRUE)\n\nclustWiseCounts &lt;- dplyr::group_by(phageClusters, phage_grp, SpeciesName) %&gt;% \n  dplyr::summarise(n_genomes_clust = n(), .groups = \"drop\") %&gt;% \n  dplyr::add_count(phage_grp, name = \"n_species_phages\", sort = TRUE) %&gt;% \n  dplyr::left_join(\n    y = n_genomes_phage, by = \"SpeciesName\"\n  ) %&gt;% \n  dplyr::mutate(\n    SpeciesName = forcats::fct_relevel(SpeciesName, !!!speciesOrder$SpeciesName),\n    SpeciesName = forcats::fct_drop(SpeciesName),\n    phage_grp = forcats::as_factor(phage_grp),\n    cluster_per_species = n_genomes_clust / n_genomes_phages\n  )\n\n\nGeneralist and specialist prophages statistics:\n\n\nCode\ngeneralist &lt;- dplyr::filter(clustWiseCounts, n_species_phages &gt; 1) %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(phage_grp, SpeciesName), .fns = forcats::fct_drop\n    ),\n    category = \"generalist\"\n  )\n\nspecialist &lt;- dplyr::filter(clustWiseCounts, n_species_phages == 1) %&gt;% \n  dplyr::arrange(dplyr::desc(n_genomes_clust)) %&gt;% \n  dplyr::mutate(category = \"specialist\")\n\n\nGeneralist prophage signatures: 54\nSpecialist prophage signatures: 382\nDistribution of number of species in which prophage signatures are found:\n\nProphage target species number histogram\n\n\nCode\npt_hist &lt;- dplyr::distinct(clustWiseCounts, phage_grp, n_species_phages) %&gt;% \n  ggplot2::ggplot(\n    mapping = aes(x = n_species_phages)\n  ) +\n  ggplot2::geom_histogram(binwidth = 1, color = \"black\", fill = \"black\") +\n  ggbreak::scale_y_break(\n    breaks = c(40, 360),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  ggplot2::labs(\n    x = \"Prophage in multiple species\",\n    y = \"Count\"\n  ) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_bw(base_size = 24) +\n  theme(\n    panel.grid = element_blank(),\n    axis.ticks.y.right = element_blank(),\n    axis.text.y.right = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies wise generalist and specialist prophage signatures\n\n\nCode\n# sort(table(specialist$SpeciesName), decreasing = TRUE)\npt_species_count &lt;- dplyr::bind_rows(\n  list(\n    specialist = dplyr::count(specialist, SpeciesName),\n    generalist = dplyr::count(generalist, SpeciesName)\n  ),\n  .id = \"category\"\n) %&gt;% \n  dplyr::mutate(\n    category = forcats::fct_relevel(category, \"specialist\")\n  ) %&gt;% \n  ggplot2::ggplot(\n    mapping = aes(y = forcats::fct_rev(SpeciesName), x = n, fill = category)\n  ) +\n  ggplot2::labs(\n    x = \"Unique prophage signatures\", y = NULL\n  ) +\n  ggplot2::geom_col(position = \"stack\", color = \"black\") +\n  ggplot2::scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_fill_manual(\n    values = c(\"black\", \"white\"),\n    breaks = c(\"generalist\", \"specialist\")\n  ) +\n  theme_bw(base_size = 18) +\n  theme(\n    legend.position = \"bottom\",\n    axis.text.y = element_text(face = \"italic\"),\n    axis.ticks.y = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumber of generalist targeting two species (except carotovoricin)\n\n\nCode\nsp_vs_sp_grid &lt;- tidyr::expand_grid(\n  sp1 = speciesOrder$SpeciesName,\n  sp2 = speciesOrder$SpeciesName\n) %&gt;% \n  dplyr::filter(sp1 != sp2)\n\nphage_common_targets &lt;- split(\n  x = as.character(generalist$SpeciesName),\n  f = as.character(generalist$phage_grp)\n) %&gt;% \n  purrr::discard_at(at = \"phage_grp_1\") %&gt;% \n  purrr::map(\n    .f = function(x){\n      tidyr::expand_grid(sp1 = x, sp2 = x) %&gt;% \n        dplyr::filter(sp1 != sp2)\n    }\n  ) %&gt;% \n  purrr::list_rbind() %&gt;% \n  dplyr::count(sp1, sp2) %&gt;% \n  dplyr::right_join(y = sp_vs_sp_grid, by = c(\"sp1\", \"sp2\")) %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = c(sp1, sp2),\n      .fns = ~forcats::fct_relevel(.x, !!speciesOrder$SpeciesName)\n    )\n  ) %&gt;% \n  dplyr::filter(sp1 != sp2) %&gt;% \n  tidyr::replace_na(replace = list(n = 0))\n\n\npt_phage_overlap &lt;- ggplot2::ggplot(\n  data = phage_common_targets,\n  mapping = aes(x = sp1, y = forcats::fct_rev(sp2), size = n)\n) +\n  ggplot2::geom_point(color = \"black\", fill = \"black\", shape = 21) +\n  ggplot2::scale_size_continuous(\n    name = \"Shared prophage signatures\",\n    range = c(2, 10),\n    limits = c(1, NA),\n    breaks = c(1, 3, 5, 7, 11)\n  ) +\n  theme_bw(base_size = 18) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text = element_text(face = \"italic\"),\n    legend.position = \"bottom\",\n    axis.title = element_blank()\n  )\n\n\n\n\nWarning: Removed 284 rows containing missing values (`geom_point()`).\nRemoved 284 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nProphage signature overlap across two or more species\n\n\nCode\npt_dot &lt;- ggplot2::ggplot(data = generalist) + \n  ggplot2::geom_point(\n    mapping = aes(x = phage_grp, y = forcats::fct_rev(SpeciesName)),\n    size = 3\n  ) +\n  ggplot2::labs(\n    y = NULL, x = \"Prophage clusters\"\n  ) +\n  theme_bw(base_size = 16) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(face = \"italic\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeneralist prophages target upset plot\n\n\nCode\ncm &lt;- ComplexHeatmap::make_comb_mat(\n  split(x = clustWiseCounts$phage_grp, f = clustWiseCounts$SpeciesName)\n)\n\nphage_upset &lt;- ComplexHeatmap::UpSet(\n  m = cm,\n  column_title = \"Prophage across species\",\n  row_names_gp = gpar(fontface = \"italic\"),\n  column_title_gp = gpar(fontface = \"bold\", fontsize = 16),\n  set_order = speciesOrder$SpeciesName,\n  top_annotation = ComplexHeatmap::HeatmapAnnotation(\n    \"Generalist\\nprophages\" = anno_barplot(\n      x = comb_size(cm), \n      border = FALSE, \n      gp = gpar(fill = \"black\"), \n      height = unit(1.5, \"cm\")\n    ),\n    annotation_name_side = \"left\", \n    annotation_name_rot = 0,\n    annotation_name_gp = gpar(fontface = \"bold\"),\n    gap = unit(4, \"mm\")\n  ),\n  right_annotation = upset_right_annotation(cm, add_numbers = TRUE)\n)\n\nphage_upset &lt;- phage_upset +\n  ComplexHeatmap::rowAnnotation(\n    \"Number of\\ngenomes\" = ComplexHeatmap::anno_barplot(\n      x = dplyr::count(sampleInfo, SpeciesName) %&gt;% \n        dplyr::pull(var = n, name = SpeciesName),\n      border = FALSE,\n      add_numbers = TRUE,\n      gp = gpar(fill = \"black\"), width = unit(2, \"cm\")\n    ),\n    gap = unit(3, \"mm\")\n  )\n\n\n\n\nquartz_off_screen \n                2",
    "crumbs": [
      "Prophages",
      "Clustering summary"
    ]
  },
  {
    "objectID": "scripts/ms_figures/supplementary_tables.html",
    "href": "scripts/ms_figures/supplementary_tables.html",
    "title": "Supplementary tables",
    "section": "",
    "text": "Table S1Table S2Table S3Table S4Table S5Table S6Table S7Table S8Table S9Table S10\n\n\nMetadata for all the genome in the current pangenome\n\n\n\n\n\n\n\n\nPangenome statistics: Homology group counts for the genus pangenome and individual species pangenome\n\n\n\n\n\n\n\n\nGO enrichment for core, accessory and unique homology groups with respect to the pangenome background\n\n\n\n\n\n\n\n\ngeNomad prophage prediction result summary for 454 genomes\n\n\n\n\n\n\n\n\nProphage statistics for individual genomes\n\n\n\n\n\n\n\n\nSpecies wise and pangenome wide prophage statistics\n\n\n\n\n\n\n\n\nProphage clustering based on syntenic Jaccard index\n\n\n\n\n\n\n\n\nProphage homology group functional categories\n\n\n\n\n\n\n\n\nAnti-phage defense systems from DefenseFinder\n\n\nWarning in instance$preRenderHook(instance): It seems your data is too big for\nclient-side DataTables. You may consider server-side processing:\nhttps://rstudio.github.io/DT/server.html\n\n\n\n\n\n\n\n\nInhouse sample information\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Supplementary tables"
    ]
  }
]