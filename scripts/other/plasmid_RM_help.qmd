---
title: "Summary statistics for prophages"
date: "`r Sys.time()`"
format: 
  html: 
    embed-resources: true
    df-print: paged
knitr: 
  opts_chunk:
    fig.height: 7
---

***

Script to help with restriction modification system genes identification in a subset of genomes

## Initial setup

```{r}
#| label: setup
#| warning: false
suppressMessages(library(org.Pectobacterium.spp.pan.eg.db))
suppressMessages(library(tidyverse))



rm(list = ls())

source("https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R")
source("scripts/utils/config_functions.R")
source("scripts/utils/homology_groups.R")
################################################################################

confs <- prefix_config_paths(
    conf = suppressWarnings(configr::read.config(file = "project_config.yaml")),
    dir = "."
)

pangenome <- confs$data$pangenomes$pectobacterium.v2$name
panConf <- confs$data$pangenomes[[pangenome]]

sampleInfo <- get_metadata(file = panConf$files$metadata, genus = confs$genus)

panOrgDb <- org.Pectobacterium.spp.pan.eg.db

genomes <- c("g_187", "g_146", "g_399")

subPanHgs <- sub_pangenome_hgs(pandb = panOrgDb, genomes = genomes)

```

```{r}
df <- AnnotationDbi::select(
    panOrgDb,
    keys = genomes,
    columns = c(
        "genomeId", "GID", "COG_description", "pfam_description",
        "chr_name", "start", "end", "strand", "mRNA_id"
    ),
    keytype = "genomeId"
) %>%
    dplyr::filter(
        dplyr::if_any(
            .cols = c(COG_description, pfam_description),
            .fns = ~ stringr::str_detect(
                .,
                pattern = stringr::regex("restriction|methylase|methylation|methyltransferase", ignore_case = TRUE)
            )
        )
    ) %>%
    dplyr::group_by(genomeId, GID, mRNA_id) %>%
    dplyr::mutate(
        dplyr::across(
            .cols = c(COG_description, pfam_description),
            .fns = ~ paste(unique(.x), collapse = "; ")
        )
    ) %>%
    dplyr::slice(1L) %>%
    dplyr::mutate(
        dplyr::across(.cols = c(start, end), .fns = as.numeric),
    ) %>%
    dplyr::left_join(y = subPanHgs, by = c("GID" = "hgId")) %>%
    dplyr::left_join(y = dplyr::select(sampleInfo, genomeId, sampleId, strain), by = "genomeId") %>%
    dplyr::arrange(desc(nGenomes), GID, genomeId) %>%
    dplyr::select(GID, genomeId, strain, sampleId, nGenomes, class, everything())

clipr::write_clip(df)

```

## Extract FASTA sequence and process to make tabular output

```{bash}

samtools faidx data/prokka_annotation/GCF_016950075.1_ASM1695007v1/GCF_016950075.1_ASM1695007v1.ffn CEODHIHA_03931 CEODHIHA_03925 CEODHIHA_03878 CEODHIHA_03877 CEODHIHA_03876 CEODHIHA_03875 CEODHIHA_03739 CEODHIHA_03727 CEODHIHA_00728 CEODHIHA_00023 CEODHIHA_00951 CEODHIHA_01083 CEODHIHA_00107 CEODHIHA_00110 CEODHIHA_00191 CEODHIHA_00230 CEODHIHA_04008 CEODHIHA_03196 CEODHIHA_01093 CEODHIHA_01109 CEODHIHA_00087 CEODHIHA_00067 CEODHIHA_01382 CEODHIHA_03066 CEODHIHA_03030 CEODHIHA_03008 CEODHIHA_02992 CEODHIHA_02911 CEODHIHA_02855 CEODHIHA_02784 CEODHIHA_02757 CEODHIHA_02750 CEODHIHA_02657 CEODHIHA_02420 CEODHIHA_02349 CEODHIHA_02309 CEODHIHA_02168 CEODHIHA_02141 CEODHIHA_02139 CEODHIHA_02138 CEODHIHA_02135 CEODHIHA_02112 CEODHIHA_00247 CEODHIHA_00251 CEODHIHA_00263 CEODHIHA_00294 CEODHIHA_00348 CEODHIHA_00472 CEODHIHA_00498 CEODHIHA_00535 CEODHIHA_00567 CEODHIHA_00595 CEODHIHA_00664 CEODHIHA_02025 CEODHIHA_01877 CEODHIHA_01858 CEODHIHA_01846 CEODHIHA_01795 CEODHIHA_01759 CEODHIHA_00873 CEODHIHA_00774 CEODHIHA_00765 CEODHIHA_00683 CEODHIHA_01443 CEODHIHA_01510 CEODHIHA_01323 CEODHIHA_01151 CEODHIHA_03208 CEODHIHA_03374 CEODHIHA_03383 CEODHIHA_04278 CEODHIHA_04132 CEODHIHA_04133 CEODHIHA_03076 CEODHIHA_03914 CEODHIHA_00146 CEODHIHA_02070 CEODHIHA_03109 CEODHIHA_04095 CEODHIHA_01555 CEODHIHA_04176 CEODHIHA_02690 CEODHIHA_04086 CEODHIHA_01730 CEODHIHA_01731 CEODHIHA_01732 CEODHIHA_03095 |
awk '/^>/ { if(NR>1) print "";  printf("%s\t",$0); next; } { printf("%s",$0);}  END {printf("\n");}' > temp/seq.fasta

samtools faidx data/prokka_annotation/GCF_016944615.1_ASM1694461v1/GCF_016944615.1_ASM1694461v1.ffn MCIDMLNJ_02851 MCIDMLNJ_02857 MCIDMLNJ_02905 MCIDMLNJ_02906 MCIDMLNJ_02907 MCIDMLNJ_02908 MCIDMLNJ_03049 MCIDMLNJ_03061 MCIDMLNJ_03826 MCIDMLNJ_03096 MCIDMLNJ_04496 MCIDMLNJ_04345 MCIDMLNJ_03179 MCIDMLNJ_03183 MCIDMLNJ_03265 MCIDMLNJ_03310 MCIDMLNJ_02773 MCIDMLNJ_01976 MCIDMLNJ_04333 MCIDMLNJ_04317 MCIDMLNJ_03159 MCIDMLNJ_03139 MCIDMLNJ_04029 MCIDMLNJ_01905 MCIDMLNJ_01870 MCIDMLNJ_01848 MCIDMLNJ_01832 MCIDMLNJ_01751 MCIDMLNJ_01688 MCIDMLNJ_01625 MCIDMLNJ_01598 MCIDMLNJ_01592 MCIDMLNJ_01462 MCIDMLNJ_01227 MCIDMLNJ_01156 MCIDMLNJ_01116 MCIDMLNJ_00975 MCIDMLNJ_00948 MCIDMLNJ_00946 MCIDMLNJ_00945 MCIDMLNJ_00942 MCIDMLNJ_00919 MCIDMLNJ_03327 MCIDMLNJ_03331 MCIDMLNJ_03343 MCIDMLNJ_03376 MCIDMLNJ_03432 MCIDMLNJ_03566 MCIDMLNJ_03592 MCIDMLNJ_03627 MCIDMLNJ_03659 MCIDMLNJ_03687 MCIDMLNJ_03761 MCIDMLNJ_00729 MCIDMLNJ_00514 MCIDMLNJ_00497 MCIDMLNJ_00485 MCIDMLNJ_00439 MCIDMLNJ_00369 MCIDMLNJ_03969 MCIDMLNJ_03875 MCIDMLNJ_03866 MCIDMLNJ_03781 MCIDMLNJ_00058 MCIDMLNJ_00128 MCIDMLNJ_04079 MCIDMLNJ_04274 MCIDMLNJ_01991 MCIDMLNJ_02175 MCIDMLNJ_02184 MCIDMLNJ_02545 MCIDMLNJ_02684 MCIDMLNJ_02683 MCIDMLNJ_01915 MCIDMLNJ_02869 MCIDMLNJ_03215 MCIDMLNJ_00888 MCIDMLNJ_02645 MCIDMLNJ_00612 MCIDMLNJ_00611 MCIDMLNJ_00617 MCIDMLNJ_00881 MCIDMLNJ_00846 MCIDMLNJ_00836 MCIDMLNJ_02639 MCIDMLNJ_03220 MCIDMLNJ_03213 MCIDMLNJ_03218 MCIDMLNJ_01536 MCIDMLNJ_00212 MCIDMLNJ_00214 MCIDMLNJ_00215 MCIDMLNJ_00393 MCIDMLNJ_04259 MCIDMLNJ_01727 MCIDMLNJ_00324 MCIDMLNJ_00213 MCIDMLNJ_00211 MCIDMLNJ_00210 MCIDMLNJ_02923 MCIDMLNJ_04427  |
awk '/^>/ { if(NR>1) print "";  printf("%s\t",$0); next; } { printf("%s",$0);}  END {printf("\n");}' >> temp/seq.fasta

samtools faidx data/prokka_annotation/JGAR-100719-1/JGAR-100719-1.ffn BAKEABOG_00224 BAKEABOG_00218 BAKEABOG_00168 BAKEABOG_00167 BAKEABOG_00166 BAKEABOG_00165 BAKEABOG_00028 BAKEABOG_00017 BAKEABOG_03484 BAKEABOG_03709 BAKEABOG_03942 BAKEABOG_03812 BAKEABOG_04207 BAKEABOG_04210 BAKEABOG_04286 BAKEABOG_04323 BAKEABOG_00303 BAKEABOG_01675 BAKEABOG_03802 BAKEABOG_03786 BAKEABOG_04374 BAKEABOG_03751 BAKEABOG_03470 BAKEABOG_01802 BAKEABOG_01837 BAKEABOG_01858 BAKEABOG_01874 BAKEABOG_01958 BAKEABOG_02016 BAKEABOG_02115 BAKEABOG_02142 BAKEABOG_02148 BAKEABOG_02242 BAKEABOG_02470 BAKEABOG_03978 BAKEABOG_04017 BAKEABOG_04158 BAKEABOG_04182 BAKEABOG_04184 BAKEABOG_04185 BAKEABOG_04188 BAKEABOG_00838 BAKEABOG_02526 BAKEABOG_02530 BAKEABOG_02543 BAKEABOG_02574 BAKEABOG_02630 BAKEABOG_02749 BAKEABOG_02775 BAKEABOG_02820 BAKEABOG_02852 BAKEABOG_02880 BAKEABOG_02952 BAKEABOG_00923 BAKEABOG_01128 BAKEABOG_01146 BAKEABOG_01158 BAKEABOG_01208 BAKEABOG_01243 BAKEABOG_03627 BAKEABOG_03533 BAKEABOG_03524 BAKEABOG_04421 BAKEABOG_01647 BAKEABOG_01570 BAKEABOG_03411 BAKEABOG_03235 BAKEABOG_03210 BAKEABOG_03043 BAKEABOG_03034 BAKEABOG_00533 BAKEABOG_00395 BAKEABOG_00396 BAKEABOG_01792 BAKEABOG_00207 BAKEABOG_00874 BAKEABOG_01299 BAKEABOG_00434 BAKEABOG_01040 BAKEABOG_01041 BAKEABOG_01035 BAKEABOG_01306 BAKEABOG_01340 BAKEABOG_01350 BAKEABOG_00440 BAKEABOG_01763 BAKEABOG_01491 BAKEABOG_01490 BAKEABOG_01492 BAKEABOG_01493  |
awk '/^>/ { if(NR>1) print "";  printf("%s\t",$0); next; } { printf("%s",$0);}  END {printf("\n");}' >> temp/seq.fasta

```

