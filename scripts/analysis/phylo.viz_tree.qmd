---
title: "Visualized core SNP maximum-likelihood tree with metadata"
date: "`r Sys.time()`"
format: 
  html: 
    embed-resources: true
---

## Initial setup

```{r}
#| label: setup
#| warning: false

suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(configr))
suppressPackageStartupMessages(library(ggpubr))
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(ggnewscale))
suppressPackageStartupMessages(library(ape))
suppressPackageStartupMessages(library(treeio))
suppressPackageStartupMessages(library(ggtree))
suppressPackageStartupMessages(library(ggbreak))
suppressPackageStartupMessages(library(ggtreeExtra))
suppressPackageStartupMessages(library(ggstar))
suppressPackageStartupMessages(library(viridisLite))

## visualized phylogenetic tree with metadata

rm(list = ls())

source("https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R")
source("scripts/utils/config_functions.R")
source("scripts/utils/phylogeny_functions.R")
source("scripts/utils/heatmap_utils.R")
################################################################################
set.seed(124)

confs <- prefix_config_paths(
  conf = suppressWarnings(configr::read.config(file = "project_config.yaml")),
  dir = "."
)

treeMethod <- "core_snp_ml"     #ani_upgma, kmer_nj
pangenome <- confs$data$pangenomes$pectobacterium.v2$name
panConf <- confs$data$pangenomes[[pangenome]]

outDir <- confs$analysis$phylogeny$core_snp_ml$dir
outPrefix <- paste(outDir, "/", treeMethod, sep = "")

```

## Import tree data and required metadata

```{r}
sampleInfo <- get_metadata(file = panConf$files$metadata, genus = confs$genus)

sampleInfoList <- as.list_metadata(
  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId 
)

speciesOrder <- suppressMessages(
  readr::read_tsv(confs$analysis$phylogeny[[treeMethod]]$files$species_order)
)

metDf <- suppressMessages(
  readr::read_csv(panConf$db$metrics$files$per_genome, col_names = T)
) %>% 
  dplyr::rename_all(
    .funs = ~ stringr::str_replace_all(., "\\W+", "_")
  ) %>% 
  dplyr::rename_all(
    .funs = ~ stringr::str_replace_all(., "_+$", "")
  ) %>% 
  dplyr::select(
    Genome, Gene_count, mRNA_count, CDS_count, tRNA_count, rRNA_count,
    Homology_groups, Singletons, GC_content
  ) %>% 
  dplyr::mutate(genomeId = paste("g_", Genome, sep = "")) %>% 
  dplyr::select(-Genome)

## add species order factor levels to SpeciesName column
sampleInfo %<>% dplyr::mutate(
  SpeciesName = forcats::fct_relevel(SpeciesName, !!!speciesOrder$SpeciesName)
) %>% 
  dplyr::left_join(
    y = metDf, by = "genomeId"
  ) %>% 
  dplyr::group_by(SpeciesName) %>% 
  dplyr::mutate(
    mRNA_med_diff = mRNA_count - median(mRNA_count),
    genome_size_med_diff = length - median(length),
  ) %>% 
  dplyr::ungroup()


```

## Plot the tree

```{r}
## read tree
rawTree <- import_tree(confs$analysis$phylogeny[[treeMethod]]$files$tree_rooted)

## add data to tree
treeTbl <- tidytree::as_tibble(rawTree) %>%
  dplyr::full_join(y = sampleInfo, by = c("label" = "genomeId")) %>%
  treeio::as.treedata()
```

### Explore the tree topology

```{r out.width='100%', fig.height=18}
#| out-width: '100%'
#| fig-height: 15

rootNode <- rootnode(treeTbl) 

# 
# scale_color_binned(
#   scale_name = "stepsn",
#   palette = function(x) c("green", "red", "black"),
#   breaks = c(70, 90),
#   limits = c(0, 100),
#   na.value = "black",
#   show.limits = TRUE,
#   guide = "colorsteps"
# ) +
# ggnewscale::new_scale_color()

pt_tree <- ggtree::ggtree(tr = treeTbl, color="black") +
  theme_tree2() +
  ggtree::geom_point2(
    mapping = aes(
      subset = !isTip & node != rootNode, 
      color = cut(bootstrap, c(0, 70, 90, 100))),
    shape = 16, size = 1
    
  ) +
  scale_color_manual(
    values = c("#f781bf", "#4daf4a", "black"),
    guide = guide_legend(override.aes = list(size = 5)),
    name = 'Bootstrap Percentage(BP)', 
    breaks = c('(0,70]', '(70,90]'), 
    labels = expression(BP < 70, 70 <= BP * " < 90"),
    na.value = "transparent"
  ) +
  ggnewscale::new_scale_fill()

```

One of the branch is very long and hence trimming its length to 0.5 for visualization
purpose.

```{r}
longestBranch <- which(pt_tree$data$x == max(pt_tree$data$x))
pt_tree$data$x[longestBranch] <- 0.47
```

### View tree with metadata

```{r}

pt_tree2 <- pt_tree +
  theme_tree() +
  geom_treescale(x=0, y=nrow(sampleInfo)) +
  # layout_fan(angle = 10) +
  scale_y_continuous(expand=c(0, 10)) +
  ggnewscale::new_scale_color() +
  ggtree::geom_tiplab(
    mapping = aes(label = NA),
    align = TRUE, linesize = 0.4
  )  +
  ggnewscale::new_scale_color()

spKeyDf <- get_species_key_data(
  genomes = sampleInfo$genomeId, speciesInfo = sampleInfo, type = 'wide'
) %>% 
  tibble::as_tibble(rownames = "genomeId") %>% 
  tidyr::pivot_longer(
    cols = -genomeId,
    names_to = 'sp', values_to = "spCol"
  ) %>% 
  dplyr::mutate(sp = forcats::fct_relevel(sp, !!!speciesOrder$SpeciesName))

pt_tree3 <- pt_tree2 +
  # continent
  ggtreeExtra::geom_fruit(
    geom = geom_tile,
    mapping = aes(fill = continent),
    width = 0.01,
    offset = 0.03
  ) +
  scale_fill_manual(
    values = c("#E6AC00", "#D12E96", "#5E8B3A", "#AA741D", "#A5E7E1", "#244360"),
    na.value = alpha("white", 1),
    na.translate = FALSE
  ) +
  ggnewscale::new_scale_fill() +
  # mRNA count difference with species median
  ggtreeExtra::geom_fruit(
    mapping = aes(y = id, x = mRNA_med_diff),
    geom = geom_bar,
    fill = "white", color = "blue",
    offset = 0.1,
    pwidth = 0.05,
    orientation="y",
    stat="identity",
    # grid.params = list(vline = TRUE, color = "grey"),
    axis.params = list(
      axis = "x", text.size = 2, hjust = 1, nbreak = 2, text.angle = 90
    )
  ) +
  # %GC
  ggtreeExtra::geom_fruit(
    geom = geom_bar,
    mapping = aes(y = id, x = GC_content - 50),
    fill = "white", color = "black",
    offset = 0.04,
    pwidth = 0.1,
    orientation = "y",
    stat = "identity",
    # grid.params = list(vline = TRUE, color = "white"),
    axis.params = list(
      axis = "x", text.size = 2, hjust = 1, nbreak = 2, text.angle = 90
    )
  ) +
  ggtreeExtra::geom_fruit(
    mapping = aes(y = id, x = "virulence", color = virulence),
    geom = geom_point, shape = 17, size = 1,
    pwidth = 0.02, offset = 0.02
  ) +
  scale_color_manual(
    name='Field trial',
    values = c("red", "green", "black"),
    breaks = c("virulent", "avirulent", "inconclusive"),
    label = c("BL-causing", "BL non-causing", "inconclusive"),
    na.value = alpha("white", 0),
    guide = guide_legend(override.aes = list(size = 5))
  ) +
  ggnewscale::new_scale_color() +
  # virulence PCR result
  ggtreeExtra::geom_fruit(
    geom = geom_point, size = 1,
    mapping = aes(y = id, x = "vir_pcr", color = virulence_pcr),
    pwidth = 0.02, offset = 0.02
  ) +
  scale_color_manual(
    name = "PCR BL diagnosis",
    values = c("red", "green"),
    breaks = c("positive", "negative"),
    na.value = alpha("white", 0),
    guide = guide_legend(override.aes = list(size = 5))
  ) +
  ggnewscale::new_scale_color() +
  # species key
  ggtreeExtra::geom_fruit(
    geom = geom_tile, data = spKeyDf,
    mapping = aes(y = genomeId, x = forcats::fct_rev(sp), fill = spCol),
    colour = "transparent",
    pwidth = 0.2, offset = 0.01
  ) +
  scale_fill_manual(
    values = c("0" = "grey90", "1" = "black")
  ) +
  theme(
    legend.position = c(0, .95),
    legend.justification = c(0, 1),
    legend.box = "vertical"
  )

ggsave(
  filename = paste(outPrefix, ".tree_plot.pdf", sep = ""), plot = pt_tree3,
  width = 14, height = 14
)

```

:::{.scrolling_y}

```{r}
#| column: page 
#| fig-height: 14
#| fig-width: 14
#| out-width: '100%'
#| layout-valign: top
#| echo: false

pt_tree3

```
:::

Species key in the above figure marks the species on tree from left to right:
`r paste(rev(speciesOrder$SpeciesName), collapse = ", ")`.
