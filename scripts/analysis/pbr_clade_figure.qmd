---
title: "Visualize phylogeny for *P. brasiliense* clade"
date: "`r Sys.time()`"
format: 
  html: 
    embed-resources: true
    df-print: paged
knitr: 
  opts_chunk:
    fig.height: 7
execute-dir: ../../
---

Visualize phylogeny for *P. brasiliense* clade with phenotype, ANI and *in silico*
primer matching data.

## Initial setup

```{r}
#| label: setup
#| warning: false

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(configr))
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(ape))
suppressPackageStartupMessages(library(treeio))
suppressPackageStartupMessages(library(ggtree))

rm(list = ls())

source("https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R")
source("scripts/utils/config_functions.R")
source("scripts/utils/phylogeny_functions.R")
source("scripts/utils/heatmap_utils.R")

################################################################################
set.seed(124)

analysisName <- "pbr_clade"
treeMethod <- "core_snp_ml"     #ani_upgma, kmer_nj

confs <- prefix_config_paths(
  conf = suppressWarnings(configr::read.config(file = "project_config.yaml")),
  dir = "."
)

outDir <- confs$analysis$phylogeny$path
outPrefix <- paste(outDir, "/", analysisName, ".", treeMethod, sep = "")

pangenome <- confs$data$pangenomes$pectobacterium.v2$name
outGroup <- confs$analysis$phylogeny$outgroup

```

## Import data

```{r}
sampleInfo <- get_metadata(file = confs$data$pangenomes[[pangenome]]$files$metadata, genus = confs$genus)

sampleInfoList <- as.list_metadata(
  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, Genome, genomeId
)

genomeIds <- dplyr::pull(sampleInfo, genomeId, name = sampleId)

fnGenomes <- dplyr::filter(
  sampleInfo, virulence == "virulent", virulence_pcr == "negative"
) %>% 
  dplyr::pull(genomeId)

markGenomes <- list(
  fn_pbr = list(genomes = fnGenomes, color = "red")
)

speciesOrder <- suppressMessages(
  readr::read_tsv(confs$analysis$phylogeny[[treeMethod]]$files$species_order)
)


```

### Import phylogenetic tree tree

```{r}
## read tree
rawTree <- import_tree(
  confs$analysis$phylogeny[[treeMethod]]$files$tree_rooted, phylo = TRUE
)

```

### Optionally, when results are required only for a clade of interest 

```{r}
## P. brasiliense species clade
sampleInfo <- dplyr::filter(
  sampleInfo,
  SpeciesName == "P. brasiliense" | genomeId == "g_446"
)

rawTree <- ape::keep.tip(phy = rawTree, tip = sampleInfo$genomeId)

```

```{r}
## add data to tree
treeTbl <- treeio::as_tibble(rawTree) %>%
  dplyr::full_join(y = sampleInfo, by = c("label" = "genomeId")) %>%
  treeio::as.treedata()

pt_tree <- ggtree::ggtree(
  tr = treeTbl
)

leafOrder <- ggtree::get_taxa_name(pt_tree)

```

### Import *in*-silico PCR assay mapping results

```{r}
bestAssaysInGenomes <- suppressMessages(
  readr::read_tsv(confs$analysis$insilico_assay$files$insilico_pcr)
)

## finally select assays only for the Genomes in sampleInfo
genomeAssayDetails <- dplyr::select(sampleInfo, genomeId) %>% 
  dplyr::left_join(y = bestAssaysInGenomes, by = "genomeId") %>% 
  dplyr::filter(
    !is.na(assay),
    assay %in% c("Erwinia", "LZI", "TIR")
    ) %>%
  dplyr::mutate(
    genomeId = forcats::fct_relevel(genomeId, !!!leafOrder),
    assay = forcats::fct_relevel(
      assay, "Erwinia", "LZI", "TIR"
    )
  )
```
### Import ANI data

```{r}

aniMat <- suppressMessages(
  readr::read_tsv(confs$analysis$phylogeny$ani$files$ani_matrix)
) %>% 
  tibble::column_to_rownames(var = "g1") %>%
  as.matrix()

aniDf <- aniMat[leafOrder, leafOrder] %>% 
  tibble::as_tibble(rownames = "g1") %>%
  tidyr::pivot_longer(
    cols = -g1,
    names_to = "g2", values_to = "ANI"
  ) %>% 
  dplyr::mutate(
  g1 = forcats::fct_relevel(g1, !!!leafOrder),
  g2 = forcats::fct_relevel(g2, !!!leafOrder)
) 

```

## Generate plots

### Plot PCR primer BLAST results

```{r}
## assay blastn visualization
pt_pcrBlast <- ggplot2::ggplot(
  data = genomeAssayDetails,
  mapping = aes(x = type, y = genomeId)
) +
  geom_tile(
    mapping = aes(fill = pident, width = qcovs/100, height = qcovs/100),
  ) +
  facet_grid(cols = vars(assay), scales = "free_y") +
  viridis::scale_fill_viridis(name = "% identity", option = "viridis", direction = -1) +
  scale_x_discrete(
    labels = c("forward" = "F", "probe" = "P", "reverse" = "R"),
    expand = expansion(add = 0)
  ) +
  guides(
    size = guide_legend(override.aes = list(fill = "white"))
  ) +
  theme_bw() +
  theme(
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.x = element_text(size = 14, face = "bold"),
    plot.title = element_text(hjust = 0.5, vjust = 0),
    strip.text.x = element_text(size = 12, face = "bold", angle = 90, hjust = 0),
    legend.position = "bottom",
    panel.grid = element_blank()
  )

```


```{r}
colorAni <- list(
  breaks = c(85, 90, 93, 94, 94.5, 95, 95.5, 96, 96.5, 97, 99),
  colors = RColorBrewer::brewer.pal(n = 11, name = "RdBu")
  # breaks = c(85, 90, 92, 93, 93.5, 94, 94.5, 95, 95.5, 96, 96.5, 97, 99),
  # colors = viridisLite::viridis(n = 13, option = "B")
)

pt_ani <- ggplot2::ggplot(data = aniDf, mapping = aes(x = g1, y = g2)) +
  geom_tile(mapping = aes(fill = ANI)) +
  scale_fill_stepsn(
    breaks = colorAni$breaks,
    values = scales::rescale(x = colorAni$breaks),
    colours = colorAni$colors,
    limits = c(85, 100)
  ) +
  theme_bw() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    plot.title = element_text(hjust = 0.5, vjust = 0),
    legend.position = "bottom",
    panel.grid = element_blank()
  )

```


### Metadata annotation plots

```{r}

pt_phyloData <- pt_tree +
    ggtree::geom_tiplab(
    mapping = aes(label = NA),
    align = TRUE, linesize = 0.4
  ) +
  scale_x_continuous(expand = expansion(mult = c(0.05, 0.1))) +
  ggnewscale::new_scale_color() +
  ## virulence PCR result
  ggtreeExtra::geom_fruit(
    mapping = aes(y = id, x = "vir_pcr", color = virulence_pcr),
    geom = "geom_point",
    pwidth = 0.01, offset = 0.2
  ) +
  scale_color_manual(
    name = "Blackleg PCR",
    values = c("positive" = "red", "negative" = "green"),
    labels = c("positive" = "BL +ve", "negative" = "BL -ve"),
    guide = guide_legend(order = 3),
    na.value = alpha("white", 0)
  ) +
  ggnewscale::new_scale_color() +
  ## virulence phenotype
  ggtreeExtra::geom_fruit(
    mapping = aes(y = id, x = "virulence", color = virulence),
    geom = "geom_point", shape = 17, size = 2,
    pwidth = 0.01, offset = 0.02
  ) +
  scale_color_manual(
    name = "Blackleg phenotype",
    values = c("virulent" = "red", "avirulent" = "green"),
    labels = c("virulent" = "BL-causing", "avirulent" = "BL-non-causing"),
    guide = guide_legend(order = 4),
    na.value = alpha("white", 0)
  ) +
  theme(legend.position = "bottom")


## arrange plots one by one
pt_all <- pt_pcrBlast %>%
  aplot::insert_left(pt_phyloData, width = 4) %>%
  aplot::insert_right(pt_ani, width = 6)

ggsave(
  plot = pt_all, width = 16, height = 8,
  filename = paste(outPrefix, ".pdf", sep = "")
)


```

```{r echo=FALSE}
#| column: page
#| fig-height: 12
#| fig-width: 20
#| out-width: '100%'
#| layout-valign: top
#| echo: false

pt_all

```

