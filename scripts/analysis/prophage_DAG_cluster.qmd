---
title: "Prophage DAG visualization"
author: "Lakhansing Pardeshi"
date: "`r Sys.Date()`"
format: 
  html: 
    embed-resources: true
    df-print: paged
knitr: 
  opts_chunk:
    fig.height: 7
---

This script processes the consolidated prophages output. The prophage to best
parent prophage relationships from this file are converted to a directed
acyclic graph (DAG) and a network in form of table is stored. Additionally, the
DAG is visualized to show different clusters in the network.

:::{.callout-note}
This can be a new clustering method where there are a lot of singletons in the
data, a big cluster and few other small clusters.
:::

## Initial setup

```{r}
#| label: setup
#| warning: false

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(org.Pectobacterium.spp.pan.eg.db))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(ggraph))
suppressPackageStartupMessages(library(ape))
suppressPackageStartupMessages(library(treeio))

# post-processing of prophage DAG to add additional information:
# subgraph, root node for each subgraph

rm(list = ls())

source("https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RScripts/utils.R")
source("scripts/utils/config_functions.R")
source("scripts/utils/phylogeny_functions.R")
source("scripts/utils/compare_hg_sets.R")

################################################################################
set.seed(124)

confs <- prefix_config_paths(
  conf = suppressWarnings(configr::read.config(file = "project_config.yaml")),
  dir = "."
)

pangenome <- confs$data$pangenomes$pectobacterium.v2$name
panConf <- confs$data$pangenomes[[pangenome]]

treeMethod <- "kmer_upgma"     #ani_upgma, kmer_upgma

outDir <- confs$analysis$prophages$preprocessing$dir

orgDb <- org.Pectobacterium.spp.pan.eg.db
```

## Import data

```{r}
sampleInfo <- get_metadata(file = panConf$files$metadata, genus = confs$genus)

sampleInfoList <- as.list_metadata(
  df = sampleInfo, sampleId, sampleName, SpeciesName, strain, nodeLabs, genomeId 
)

# get root-leaf node path as string for filtering purpose
rawTree <- ape::read.tree(file = confs$analysis$phylogeny[[treeMethod]]$files$tree)
nodePaths <- nodepath_df(phy = rawTree) %>% 
  dplyr::rename(genomeId = tip)

phageAn <- suppressMessages(
  readr::read_tsv(confs$data$prophages$files$data)
) %>%
  dplyr::mutate(
    prophage_region = paste(chr, ":", start, "-", end, sep = ""),
    prophage_region = dplyr::if_else(is.na(start), chr, prophage_region)
  ) %>% 
  dplyr::select(
    prophage_id, prophage_length, prophage_taxonomy = taxonomy,
    prophage_region, completeness, checkv_quality, sampleId, SpeciesName
  )

# read prophage HGs stored locally
proHgs <- suppressMessages(
  readr::read_tsv(confs$analysis$prophages$preprocessing$files$raw_prophage_hg)
) %>%
  dplyr::mutate(
    hgs = stringr::str_split(hgs, ";")
  ) %>% 
  dplyr::select(prophage_id, hgs)

phages <- suppressMessages(
  readr::read_tsv(confs$analysis$prophages$preprocessing$files$filtered_prophages)
)


```

## Construct an `igraph` object from prophage relationships

### Categorize the nodes

```{r}
# assign nodetype = root for all nodes that have a child 
parents <- dplyr::filter(phages, !is.na(parent)) %>%
  dplyr::select(parent) %>%
  dplyr::distinct() %>%
  dplyr::mutate(nodeType = "root")

# all the nodes without a parent are either "singletons" or "root" nodes
nodeType <- dplyr::filter(phages, is.na(parent)) %>%
  dplyr::select(child = prophage_id) %>%
  dplyr::left_join(y = parents, by = c("child" = "parent")) %>%
  tidyr::replace_na(replace = list(nodeType = "singleton"))

phageRelations <- dplyr::left_join(
  x = phages, y = nodeType, by = c("prophage_id" = "child")
) %>%
  tidyr::replace_na(replace = list(nodeType = "child")) %>%
  dplyr::mutate(
    # nodeType = if_else(mergedNode == "merged_child", mergedNode, nodeType),
    nodeType = forcats::fct_relevel(
      .f = nodeType, "root", "singleton", "child"
    )
  )


phageRelations <- dplyr::mutate(
  phageRelations,
  child = stringr::str_split(fragments, ";"), .after = prophage_id
) %>%
  tidyr::unnest(child) %>% 
  dplyr::left_join(y = nodePaths, by = "genomeId") %>% 
  dplyr::left_join(y = proHgs, by = c("child" = "prophage_id"))


```

```{r}
#| fig-cap: Comparing the syntenic HGs vs shared HGs between child-parent prophage pairs

ggplot(data = phageRelations) +
  geom_point(mapping = aes(x = nSharedHgs, y = nSyntenicSharedHgs)) +
  labs(
    x = "# shared HGs", y = "# syntenic HGs",
    title = "prophage similarity: intersect vs synteny"
  ) +
  theme_bw(base_size = 20)
```

Various node types of the prophages:

- child: these prophages have 1 or more orthologs
- singleton: there is no ortholog for these prophages
- root: these prophages are the representatives of orthologous prophage clusters

```{r}
table(phageRelations$nodeType)
```

### Build `igraph` object

```{r}
# make igraph
nodes <- dplyr::select(
  phageRelations, child, nodeType, genomeId,
  nHg, perSharedParent
) %>%
  dplyr::left_join(y = phageAn, by = c("child" = "prophage_id")) %>%
  dplyr::rename(id = child)

edges <- dplyr::filter(phageRelations, !is.na(parent)) %>%
  dplyr::select(
    from = child, to = parent, perSharedParent,
    nSharedHgs, perSharedChild, relation, jaccardIndex
  ) %>%
  dplyr::mutate(weight = jaccardIndex)


if (length(setdiff(union(edges$from, edges$to), nodes$id)) != 0) {
  stop(
    "Nodes from edges df are missing in nodes df: ",
    paste(setdiff(union(edges$from, edges$to), nodes$id), collapse = "; ")
  )
}

gf <- igraph::graph_from_data_frame(d = edges, directed = TRUE, vertices = nodes)

gf
```

## DAG exploration

Generate an igraph data structure for prophage relationships

```{r}
# components of graph
# igraph::count_components(gf)
clu <- igraph::components(gf)
compL <- igraph::groups(clu)

# remove unused prophages for calculating summary stats
proHgs <- tibble::as_tibble(igraph::vertex_attr(gf)) %>% 
  dplyr::select(prophage_id = name, nodeType) %>% 
  dplyr::left_join(proHgs, by = "prophage_id")

rootHgsN <- dplyr::filter(proHgs, nodeType != "child") %>% 
  dplyr::pull(hgs) %>% 
  unlist() %>% unique() %>% length()

```

Number of components or representative prophages in the prophage network: `r clu$no`

Pangenome wide, `r igraph::vcount(gf)` prophages were detected and together these prophages contributed to `r length(unique(unlist(proHgs$hgs)))` homology groups. After grouping orthologous prophages, there are `r clu$no` representative prophages that are represented by `r rootHgsN` unique homology groups.

There should be only two elements when clique detection algorithm is run. One for the nodes and second for the links. If there are more than 2 elements, there is a possibility of cycles in the graph.


### identify root prophage for each component

`r clu$no` prophage clusters have following number of members in each cluster

```{r}
sort(clu$csize, decreasing = T)
```

```{r}
compDf <- tibble::enframe(clu$membership, name = "prophage_id", value = "graph_component") %>%
  dplyr::add_count(graph_component, name = "component_size")

phageRelations <- dplyr::left_join(
  phageRelations, compDf,
  by = "prophage_id"
)

compRoots <- dplyr::filter(phageRelations, !(nodeType %in% c("child", "merged_child"))) %>%
  dplyr::select(
    root_id = prophage_id, root_nHgs = nHg, root_hgs = hgs, graph_component
  ) 

networkDf <- dplyr::left_join(
  x = phageRelations, y = compRoots, by = "graph_component"
) %>%
  dplyr::rowwise() %>% 
  dplyr::mutate(
    root_shared = length(intersect(hgs, root_hgs))
  ) %>% 
  dplyr::ungroup() %>% 
  dplyr::select(-c(hgs, root_hgs)) %>% 
  dplyr::arrange(graph_component, nodeType)

readr::write_tsv(
  x = networkDf,
  file = confs$analysis$prophages$preprocessing$files$dag_clusters
)
```

```{r}
clique_size_counts(gf)
```

### visualize DAG

```{r}
# DAG visualization 
gf %>% 
  plot(vertex.size = 1.5, vertex.label = NA,
       edge.arrow.size = 0.3, edge.color = "black")

gf %>% 
  add_layout_(igraph::as_tree(), component_wise()) %>% 
  plot(vertex.size = 1.5, vertex.label = NA,
       edge.arrow.size = 0.3, edge.color = "black")


# visualization
# layout
lot <- layout_with_mds(graph = gf, dim = 2)
lot <- layout_with_dh(graph = gf)
lot <- layout_with_sugiyama(graph = gf)
lot <- layout_with_lgl(graph = gf)
lot <- layout_with_kk(graph = gf)
lot <- layout_with_fr(graph = gf)

plot(gf, layout = lot, vertex.size = 1.5, vertex.label = NA,
     edge.arrow.size = 0.3, edge.color = "black")


```

### Plot graph using `ggraph`

```{r}
#| column: page 
#| fig-height: 7
#| fig-width: 10
#| out-width: '150%'
#| layout-valign: top

# each component layout first and then arranged
lotc <- igraph::layout_components(graph = gf, layout = layout_with_kk)
# plot(gf, layout = lotc, vertex.size = 1.5, vertex.label = NA,
#      edge.arrow.size = 0.3, edge.color = "black")

(pt_net <- ggraph::ggraph(gf, layout = lotc) +
    ggraph::geom_edge_link(
      # mapping = aes(color = weight),
      arrow = arrow(length = unit(1, 'mm')),
      end_cap = circle(1, 'mm')
    ) +
    ggraph::geom_node_point(
      mapping = aes(fill = nodeType),
      alpha = 0.7, shape = 21, color = "black"
    ) +
    scale_fill_viridis_d() +
    scale_size_manual(
      values = c("child" = 1.5, "root" = 3, "singleton" = 1.5)
    ) +
    labs(title = "pangenome prophage hierarchy") +
    theme_void(base_size = 18) +
    theme(
      legend.position = "bottom"
    ))

ggsave(filename = paste(outDir, "/prophage_DAG_clusters.pdf", sep = ""),
       width = 10, height = 8)

```
